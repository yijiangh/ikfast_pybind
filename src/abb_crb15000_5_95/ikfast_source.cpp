/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-07-22 00:18:18.050584
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
// #define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
// IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan std::isnan
#endif
#ifndef isinf
#define isinf std::isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((0.101)*x0);
x13=((0.11)*x0);
x14=((1.0)*x9);
x15=((0.47)*x0);
x16=((1.0)*x7);
x17=((0.47)*x7);
x18=((0.101)*x6);
x19=((1.0)*x0);
x20=((0.444)*x1);
x21=((0.08)*x0);
x22=((1.0)*x10);
x23=((0.08)*x7);
x24=((0.101)*x7);
x25=((0.11)*x7);
x26=(x1*x4);
x27=(x3*x4);
x28=(x1*x2);
x29=(x6*x9);
x30=(x2*x3);
x31=(x0*x5);
x32=(x10*x6);
x33=((1.0)*x27);
x34=(x19*x28);
x35=(x16*x28);
x36=((((-1.0)*x33))+x28);
x37=((((-1.0)*x28))+x33);
x38=((((1.0)*x26))+(((1.0)*x30)));
x39=(x36*x6);
x40=(x37*x5);
x41=(x10*x38);
x42=((((-1.0)*x19*x27))+x34);
x43=((((-1.0)*x16*x27))+x35);
x44=(x19*((x30+x26)));
x45=((-1.0)*x44);
x46=(x16*((x30+x26)));
x47=((-1.0)*x46);
x48=(x10*x42);
x49=(x47*x6);
x50=(x45*x6);
x51=((((-1.0)*x16*x5))+x50);
x52=((((-1.0)*x16*x6))+((x44*x5)));
x53=(((x0*x6))+((x46*x5)));
x54=(x31+x49);
eerot[0]=(((x11*((((x51*x9))+x48))))+((x52*x8)));
eerot[1]=(((x11*x52))+((x8*(((((-1.0)*x22*x42))+(((-1.0)*x14*x51)))))));
eerot[2]=(((x10*x51))+((x9*(((((-1.0)*x34))+((x0*x27)))))));
IkReal x55=((1.0)*x28);
eetrans[0]=(((x0*x20))+(((-1.0)*x15*x55))+((x10*((((x18*x45))+(((-1.0)*x24*x5))))))+((x10*((((x21*x27))+(((-1.0)*x21*x55))))))+((x9*((((x23*x5))+(((-0.08)*x50))))))+((x13*x30))+((x13*x26))+((x9*(((((-1.0)*x12*x55))+((x12*x27))))))+((x15*x27)));
eerot[3]=(((x53*x8))+((x11*((((x10*x43))+((x54*x9)))))));
eerot[4]=(((x11*x53))+((x8*(((((-1.0)*x22*x43))+(((-1.0)*x14*x54)))))));
eerot[5]=(((x10*x54))+((x9*(((((-1.0)*x35))+((x27*x7)))))));
IkReal x56=((1.0)*x28);
eetrans[1]=((((-1.0)*x17*x56))+((x17*x27))+((x9*(((((-1.0)*x24*x56))+((x24*x27))))))+((x25*x26))+((x25*x30))+((x10*((((x23*x27))+(((-1.0)*x23*x56))))))+((x9*(((((-1.0)*x21*x5))+(((-0.08)*x49))))))+((x20*x7))+((x10*((((x18*x47))+((x12*x5)))))));
eerot[6]=(((x40*x8))+((x11*((((x29*x36))+x41)))));
eerot[7]=(((x11*x40))+((x8*(((((-1.0)*x14*x39))+(((-1.0)*x22*x38)))))));
eerot[8]=((((-1.0)*x38*x9))+((x32*x36)));
eetrans[2]=((0.265)+((x32*(((((-0.101)*x27))+(((0.101)*x28))))))+((x10*(((((-0.08)*x30))+(((-0.08)*x26))))))+(((0.11)*x27))+(((-0.11)*x28))+((x29*(((((-0.08)*x28))+(((0.08)*x27))))))+(((-0.47)*x30))+(((-0.47)*x26))+((x9*(((((-0.101)*x30))+(((-0.101)*x26))))))+(((0.444)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.101)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.101)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.265)+(((-0.101)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x60=((0.08)*r21);
IkReal x61=((1.0)*rxp2_2);
IkReal x62=((50.0)*pp);
IkReal x63=((19.0)*npx);
IkReal x64=((47.0)*npz);
IkReal x65=((11.0)*npy);
IkReal x66=((3.0)*npx);
IkReal x67=((2.0)*rxp0_2);
IkReal x68=((22.0)*npz);
IkReal x69=((94.0)*npx);
IkReal x70=((0.16)*r20);
IkReal x71=(rxp2_2+(((-1.0)*x60)));
IkReal x72=((6.0)*npy);
IkReal x73=((-0.16)*r20);
IkReal x74=(x60+(((-1.0)*x61)));
IkReal x75=((-11.0)*npy);
IkReal x76=((-22.0)*npx);
IkReal x77=((-4.0)*rxp1_2);
IkReal x78=((-2.0)*rxp0_2);
IkReal x79=((-188.0)*npy);
IkReal x80=(rxp2_2+x60);
IkReal x81=((-38.0)*npy);
IkReal x82=((1.2332)+x62);
IkReal x83=((2.9932)+x62);
IkReal x84=((((-1.0)*x61))+(((-1.0)*x60)));
IkReal x85=(x63+x64);
IkReal x86=(x68+x69);
IkReal x87=(x64+x66);
op[0]=x84;
op[1]=x84;
op[2]=x73;
op[3]=x73;
op[4]=x74;
op[5]=x74;
op[6]=(x63+x83+(((-1.0)*x64)));
op[7]=x75;
op[8]=x81;
op[9]=x76;
op[10]=(x83+(((-1.0)*x85)));
op[11]=x65;
op[12]=x75;
op[13]=(x82+(((-1.0)*x87)));
op[14]=x76;
op[15]=x72;
op[16]=x65;
op[17]=(x66+x82+(((-1.0)*x64)));
op[18]=0;
op[19]=x84;
op[20]=0;
op[21]=x73;
op[22]=0;
op[23]=x74;
op[24]=x67;
op[25]=x67;
op[26]=x77;
op[27]=x77;
op[28]=x78;
op[29]=x78;
op[30]=((7.52)+x86);
op[31]=0;
op[32]=x79;
op[33]=0;
op[34]=((7.52)+x68+(((-1.0)*x69)));
op[35]=0;
op[36]=0;
op[37]=((7.52)+x69+(((-1.0)*x68)));
op[38]=0;
op[39]=x79;
op[40]=0;
op[41]=((7.52)+(((-1.0)*x86)));
op[42]=0;
op[43]=x67;
op[44]=0;
op[45]=x77;
op[46]=0;
op[47]=x78;
op[48]=x80;
op[49]=x80;
op[50]=x70;
op[51]=x70;
op[52]=x71;
op[53]=x71;
op[54]=(x64+x82+(((-1.0)*x66)));
op[55]=x75;
op[56]=x72;
op[57]=x76;
op[58]=(x82+x87);
op[59]=x65;
op[60]=x75;
op[61]=(x83+x85);
op[62]=x76;
op[63]=x81;
op[64]=x65;
op[65]=(x64+x83+(((-1.0)*x63)));
op[66]=0;
op[67]=x80;
op[68]=0;
op[69]=x70;
op[70]=0;
op[71]=x71;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x88=htj4*htj4;
CheckValue<IkReal> x89=IKPowWithIntegerCheck(((1.0)+x88),-1);
if(!x89.valid){
continue;
}
cj4array[numsolutions]=((x89.value)*(((1.0)+(((-1.0)*x88)))));
CheckValue<IkReal> x90=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x90.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x90.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x91=htj5*htj5;
CheckValue<IkReal> x92=IKPowWithIntegerCheck(((1.0)+x91),-1);
if(!x92.valid){
continue;
}
cj5array[numsolutions]=((x92.value)*(((1.0)+(((-1.0)*x91)))));
CheckValue<IkReal> x93=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x93.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x93.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x94=htj3*htj3;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+x94),-1);
if(!x95.valid){
continue;
}
cj3array[numsolutions]=((x95.value)*(((1.0)+(((-1.0)*x94)))));
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x96.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x96.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x97=(cj5*rxp1_2);
IkReal x98=((25.0)*cj3);
IkReal x99=(rxp0_2*sj5);
IkReal x100=((2.0)*cj3*cj5);
IkReal x101=((2.0)*cj3*sj5);
j0eval[0]=((((-1.0)*r22))+(((12.5)*x99))+(((12.5)*x97)));
j0eval[1]=IKsign(((((-0.08)*r22))+x99+x97));
j0eval[2]=((IKabs(((((-1.0)*r10*x100))+((r11*x101))+(((-1.0)*py*x98)))))+(IKabs(((((-1.0)*r00*x100))+((r01*x101))+(((-1.0)*px*x98))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x102=(cj3*sj4);
IkReal x103=((1.0)*sj5);
IkReal x104=((1.0)*cj3*cj4);
IkReal x105=((((-1.0)*cj4*r21*x103))+((r22*sj4))+((cj4*cj5*r20)));
j0eval[0]=x105;
j0eval[1]=IKsign(x105);
j0eval[2]=((IKabs(((((-1.0)*r01*x102*x103))+(((-1.0)*r02*x104))+((cj5*r00*x102)))))+(IKabs(((((-1.0)*r12*x104))+(((-1.0)*r11*x102*x103))+((cj5*r10*x102))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x106=((2.0)*sj3);
IkReal x107=((0.08)*sj4);
IkReal x108=(cj5*r21);
IkReal x109=(rxp2_2*sj4);
IkReal x110=((25.0)*sj3);
IkReal x111=(r20*sj5);
IkReal x112=(cj4*cj5*rxp0_2);
IkReal x113=(cj4*rxp1_2*sj5);
j0eval[0]=((((12.5)*x109))+(((-12.5)*x113))+((sj4*x111))+((sj4*x108))+(((12.5)*x112)));
j0eval[1]=((IKabs(((((-1.0)*cj5*r10*x106))+((r11*sj5*x106))+(((-1.0)*py*x110)))))+(IKabs(((((-1.0)*cj5*r00*x106))+(((-1.0)*px*x110))+((r01*sj5*x106))))));
j0eval[2]=IKsign((((x107*x108))+x112+x109+(((-1.0)*x113))+((x107*x111))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x114=((0.08)*sj5);
IkReal x115=(cj5*rxp1_2);
IkReal x116=((0.08)*cj5);
IkReal x117=(rxp0_2*sj5);
j0eval[0]=((((-1.0)*r22))+(((12.5)*x117))+(((12.5)*x115)));
j0eval[1]=IKsign((x117+x115+(((-0.08)*r22))));
j0eval[2]=((IKabs(((((-1.0)*r10*x116))+(((-1.0)*py))+((r11*x114)))))+(IKabs(((((-1.0)*r00*x116))+(((-1.0)*px))+((r01*x114))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x118=r20*r20;
IkReal x119=cj5*cj5;
IkReal x120=((1.0)+(((-1.0)*x119*(r21*r21)))+(((-2.0)*cj5*r20*r21*sj5))+((x118*x119))+(((-1.0)*x118)));
j0eval[0]=x120;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x120);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x121=(cj5*sj4);
IkReal x122=((1.0)*sj5);
IkReal x123=((1.0)*cj4);
IkReal x124=((((-1.0)*cj4*r21*x122))+((r22*sj4))+((cj4*cj5*r20)));
j0eval[0]=x124;
j0eval[1]=IKsign(x124);
j0eval[2]=((IKabs(((((-1.0)*r12*x123))+(((-1.0)*r11*sj4*x122))+((r10*x121)))))+(IKabs((((r00*x121))+(((-1.0)*r02*x123))+(((-1.0)*r01*sj4*x122))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x125=((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))));
IkReal x132 = x125;
if(IKabs(x132)==0){
continue;
}
IkReal x126=pow(x132,-0.5);
if((x125) < -0.00001)
continue;
IkReal x127=IKabs(IKsqrt(x125));
IkReal x128=((12.5)*x126);
CheckValue<IkReal> x133=IKPowWithIntegerCheck(x127,-1);
if(!x133.valid){
continue;
}
IkReal x129=x133.value;
IkReal x130=(r22*x129);
if((((1.0)+(((-1.0)*(x130*x130))))) < -0.00001)
continue;
IkReal x131=IKsqrt(((1.0)+(((-1.0)*(x130*x130)))));
if( (x130) < -1-IKFAST_SINCOS_THRESH || (x130) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x134.valid){
continue;
}
IkReal gconst6=((IKasin(x130))+(((-1.0)*(x134.value))));
IkReal gconst7=((((-1.0)*rxp1_2*x128*x131))+((rxp0_2*x128*x130)));
IkReal gconst8=(((rxp1_2*x128*x130))+((rxp0_2*x128*x131)));
if((((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x135=IKPowWithIntegerCheck(IKabs(IKsqrt(((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2)))))),-1);
if(!x135.valid){
continue;
}
if( ((r22*(x135.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x135.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x136 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x136.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x135.value))))))+(x136.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x137=((0.08)*gconst8);
IkReal x138=((0.08)*gconst7);
CheckValue<IkReal> x139 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x137))+(((-1.0)*py))+((r11*x138)))),IkReal((((r01*x138))+(((-1.0)*px))+(((-1.0)*r00*x137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x139.valid){
continue;
}
CheckValue<IkReal> x140=IKPowWithIntegerCheck(IKsign((((gconst8*rxp1_2))+((gconst7*rxp0_2))+((r22*(((((-1.0)*gconst7*x138))+(((-1.0)*gconst8*x137)))))))),-1);
if(!x140.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x139.value)+(((1.5707963267949)*(x140.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x141=IKsin(j0);
IkReal x142=IKcos(j0);
IkReal x143=((1.0)*r10);
IkReal x144=((1.0)*r01);
IkReal x145=((1.0)*r11);
IkReal x146=((1.0)*sj4);
IkReal x147=(gconst7*x142);
IkReal x148=(gconst8*x142);
IkReal x149=(gconst7*x141);
IkReal x150=(gconst8*x141);
IkReal x151=(r12*x142);
IkReal x152=(r02*x141);
evalcond[0]=((1.0)+(((-1.0)*x143*x147))+((r01*x150))+((r00*x149))+(((-1.0)*x145*x148)));
evalcond[1]=((((-1.0)*x143*x149))+(((-1.0)*x144*x148))+(((-1.0)*r00*x147))+(((-1.0)*x145*x150)));
evalcond[2]=((((0.08)*r11*x147))+(((0.08)*r00*x150))+(((-1.0)*py*x142))+(((-0.08)*r10*x148))+(((-0.08)*r01*x149))+((px*x141)));
evalcond[3]=(((cj4*x152))+(((-1.0)*cj4*x151))+(((-1.0)*sj4*x145*x147))+(((-1.0)*r00*x146*x150))+((r01*sj4*x149))+((r10*sj4*x148)));
evalcond[4]=(((sj4*x152))+((cj4*r00*x150))+(((-1.0)*cj4*x144*x149))+(((-1.0)*x146*x151))+((cj4*r11*x147))+(((-1.0)*cj4*x143*x148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x153=(r22*sj4);
IkReal x154=(gconst8*r20);
IkReal x155=(gconst7*r21);
IkReal x156=(cj4*x154);
IkReal x157=((0.08)*x154);
IkReal x158=((0.08)*x155);
IkReal x159=((1.0)*cj4*x155);
IkReal x160=(x157+pz);
IkReal x161=(x156+x153);
IkReal x162=((-0.554)+(((-1.0)*x158))+x160);
IkReal x163=((-0.334)+(((-1.0)*x158))+x160);
IkReal x164=((0.554)+(((-1.0)*x158))+x160);
IkReal x165=((0.334)+(((-1.0)*x158))+x160);
IkReal x166=((1.0)+(((-1.0)*x159))+x161);
IkReal x167=((-1.0)+(((-1.0)*x159))+x161);
IkReal gconst12=x166;
IkReal gconst13=x167;
IkReal gconst14=x162;
IkReal gconst15=x163;
IkReal gconst16=x166;
IkReal gconst17=x167;
IkReal gconst18=x162;
IkReal gconst19=x163;
IkReal gconst20=x167;
IkReal gconst21=x166;
IkReal gconst22=x164;
IkReal gconst23=x165;
IkReal gconst24=x167;
IkReal gconst25=x166;
IkReal gconst26=x164;
IkReal gconst27=x165;
IkReal x168=((3.5344)*gconst24);
IkReal x169=((3.5344)*gconst21);
IkReal x170=((3.5344)*gconst16);
IkReal x171=((3.5344)*gconst13);
IkReal x172=((0.94)*gconst19);
IkReal x173=(gconst16*gconst21);
IkReal x174=(gconst12*gconst24);
IkReal x175=((0.8836)*gconst25);
IkReal x176=(gconst25*gconst26);
IkReal x177=(gconst12*gconst23);
IkReal x178=((1.0)*gconst18);
IkReal x179=((0.94)*gconst13);
IkReal x180=(gconst22*gconst24);
IkReal x181=((0.94)*gconst20);
IkReal x182=(gconst16*gconst27);
IkReal x183=((0.94)*gconst12);
IkReal x184=((3.76)*gconst21);
IkReal x185=(gconst14*gconst17);
IkReal x186=(gconst24*gconst27);
IkReal x187=(gconst13*gconst14);
IkReal x188=((0.94)*gconst25);
IkReal x189=(gconst17*gconst18);
IkReal x190=((0.69)*gconst13);
IkReal x191=(gconst17*gconst26);
IkReal x192=((0.94)*gconst14);
IkReal x193=(gconst15*gconst24);
IkReal x194=((0.8836)*gconst20);
IkReal x195=(gconst21*gconst24);
IkReal x196=(gconst12*gconst15);
IkReal x197=((3.76)*gconst23);
IkReal x198=(gconst21*gconst22);
IkReal x199=(gconst13*gconst22);
IkReal x200=((1.76)*gconst21);
IkReal x201=(gconst14*gconst21);
IkReal x202=((1.0)*gconst19);
IkReal x203=(gconst20*gconst23);
IkReal x204=(gconst15*gconst16);
IkReal x205=((0.94)*gconst27);
IkReal x206=((0.8836)*gconst17);
IkReal x207=(gconst14*gconst19);
IkReal x208=(gconst15*gconst17);
IkReal x209=(gconst23*gconst24);
IkReal x210=(gconst15*gconst25);
IkReal x211=(gconst16*gconst19);
IkReal x212=(gconst13*gconst26);
IkReal x213=(gconst12*gconst16);
IkReal x214=((0.94)*gconst17);
IkReal x215=((0.94)*gconst21);
IkReal x216=((1.0)*gconst15);
IkReal x217=(gconst15*gconst20);
IkReal x218=(gconst18*gconst25);
IkReal x219=(gconst13*gconst16);
IkReal x220=(gconst13*gconst24);
IkReal x221=((16.0)*gconst26);
IkReal x222=(gconst13*gconst18);
IkReal x223=(gconst16*gconst23);
IkReal x224=((16.0)*gconst18);
IkReal x225=(gconst24*x197);
IkReal x226=((0.8272)*x195);
IkReal x227=(gconst26*x184);
IkReal x228=((0.8836)*x195);
IkReal x229=((3.76)*x212);
IkReal x230=((0.8272)*x220);
IkReal x231=((0.8272)*x173);
IkReal x232=(gconst18*x184);
IkReal x233=(gconst16*x197);
IkReal x234=((3.76)*x193);
IkReal x235=((0.8836)*x220);
IkReal x236=((0.8836)*x173);
IkReal x237=((3.76)*x222);
IkReal x238=((0.8272)*x219);
IkReal x239=((3.76)*x204);
IkReal x240=((0.8836)*x219);
IkReal x241=(gconst21*x185);
IkReal x242=((1.0)*gconst20*x186);
IkReal x243=(x236+x235);
IkReal x244=(x238+x239+x237);
IkReal x245=(x225+x227+x226);
IkReal x246=(x229+x232+x233+x230+x231+x234);
op[0]=(((gconst21*gconst27*x180))+(((-1.0)*x176*x198))+((x176*x203))+(((-1.0)*x186*x203))+(((-1.0)*x228)));
op[1]=((((-1.0)*x188*x198))+((gconst23*gconst25*x181))+(((-1.0)*x176*x181))+x245+(((-1.0)*x176*x215))+((x186*x215))+(((-1.0)*x180*x215))+((x181*x209))+((x181*x186)));
op[2]=((((-1.0)*x191*x198))+(((-1.0)*gconst24*x202*x203))+(((-1.0)*gconst24*x194))+(((-1.0)*x182*x203))+(((-1.0)*gconst20*x186*x216))+(((-1.0)*x168))+((x176*x177))+(((0.69)*x195))+(((-1.0)*gconst21*x175))+((x203*x218))+(((-1.0)*gconst23*x221))+(((-1.0)*gconst20*x175))+((gconst22*gconst27*x173))+(((-1.76)*x209))+((x176*x217))+x169+((x191*x203))+(((-1.0)*x176*x201))+(((-1.0)*gconst23*gconst27*x174))+(((-1.0)*x176*x199))+((gconst13*gconst27*x180))+(((-1.0)*gconst25*x178*x198))+(((-1.0)*x243))+(((-1.0)*gconst26*x200))+((x186*x201))+((gconst19*gconst21*x180)));
op[3]=(((x177*x188))+(((-1.6544)*gconst21))+(((0.94)*gconst23*x174))+(((-1.0)*x192*x195))+(((-0.94)*gconst22*x173))+(((1.6544)*gconst24))+((x172*x195))+((x179*x186))+(((-1.0)*x198*x214))+((x181*x210))+(((-1.0)*gconst18*gconst21*x188))+(((-1.0)*x181*x218))+((gconst17*gconst23*x181))+(((15.04)*gconst26))+(((-1.0)*x176*x183))+x246+(((-1.0)*gconst22*gconst25*x179))+(((-15.04)*gconst23))+(((-1.0)*x191*x215))+(((-1.0)*x176*x179))+((gconst20*gconst24*x172))+((x181*x223))+(((-1.0)*x245))+(((-1.0)*x179*x180))+((x173*x205))+((x181*x193))+(((-1.0)*x181*x191))+(((-1.0)*x188*x201))+((x181*x182))+((x174*x205)));
op[4]=((14.1376)+((x176*x196))+(((-0.8836)*x174))+((x186*x187))+((gconst18*gconst20*x210))+(((-1.76)*x223))+(((-1.0)*x191*x199))+((gconst13*gconst19*x180))+((x191*x217))+(((-1.0)*x169))+(((-1.0)*x170))+(((-1.76)*x193))+((x195*x207))+(((0.69)*x173))+((x177*x218))+(((-1.0)*gconst23*x224))+((x189*x203))+((gconst14*gconst27*x173))+x171+x168+(((-1.0)*gconst17*x194))+(((-1.0)*gconst20*x193*x202))+(((-1.0)*gconst18*x200))+(((-1.0)*gconst17*x178*x198))+(((-1.0)*gconst27*x174*x216))+(((-1.0)*gconst20*x182*x216))+(((-1.0)*gconst25*x178*x199))+(((-1.0)*gconst16*x202*x203))+(((-1.0)*x176*x187))+(((-1.0)*gconst13*x175))+(((-1.0)*x240))+(((-1.0)*gconst25*x178*x201))+((gconst24*x190))+(((-1.0)*gconst12*x175))+((gconst19*gconst22*x173))+(((-1.0)*gconst16*x194))+((x182*x199))+(((-1.0)*gconst15*x221))+(((-1.0)*gconst26*x241))+(((-1.76)*x212))+(((-1.0)*x177*x182))+(((-1.0)*x228))+((x177*x191))+(((-1.0)*gconst21*x206))+(((-1.0)*gconst23*x174*x202)));
op[5]=((((-1.6544)*gconst13))+(((-1.0)*x185*x215))+(((1.6544)*gconst16))+(((-1.0)*gconst17*gconst22*x179))+((x183*x210))+(((-1.0)*x183*x218))+((x179*x182))+((x177*x214))+(((-1.0)*gconst16*gconst22*x179))+((x172*x174))+((x172*x173))+((x172*x220))+(((15.04)*gconst18))+x244+(((-1.0)*x179*x218))+(((-1.0)*gconst14*gconst25*x179))+(((-1.0)*x189*x215))+(((-15.04)*gconst15))+(((0.94)*gconst15*x174))+(((-1.0)*gconst14*gconst24*x179))+(((-1.0)*x173*x192))+(((-1.0)*x246))+((x181*x208))+((x181*x204))+(((0.94)*gconst16*x177))+(((-1.0)*x179*x191))+(((-1.0)*x183*x191))+((gconst16*gconst20*x172))+((x182*x183))+(((-1.0)*x181*x189)));
op[6]=(((x177*x189))+(((-1.0)*gconst15*x174*x202))+(((-1.76)*x222))+((x199*x211))+(((-1.0)*x171))+(((-1.0)*gconst20*x202*x204))+(((-1.0)*x178*x241))+(((-1.76)*x204))+(((-0.8836)*x213))+(((-1.0)*gconst12*x206))+x170+((x196*x218))+((gconst16*x190))+(((-1.0)*gconst17*x178*x199))+((x191*x196))+(((-1.0)*gconst25*x178*x187))+((x189*x217))+(((-1.0)*x243))+(((-1.0)*gconst13*x206))+((gconst19*gconst24*x187))+(((-1.0)*x185*x212))+((x173*x207))+(((-1.0)*x182*x196))+(((-1.0)*gconst15*x224))+(((-1.0)*gconst16*x177*x202))+((x182*x187)));
op[7]=(((x172*x213))+((x172*x219))+(((-1.0)*gconst14*gconst16*x179))+(((-1.0)*x244))+((x183*x204))+((x183*x208))+(((-1.0)*x179*x189))+(((-1.0)*x179*x185))+(((-1.0)*x183*x189)));
op[8]=((((-1.0)*gconst16*x196*x202))+((x189*x196))+(((-1.0)*gconst13*x178*x185))+(((-1.0)*x240))+((x187*x211)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x247=(cj1*cj4);
IkReal x248=((1.0)*r22);
IkReal x249=(gconst7*r21);
IkReal x250=((1.0)*sj4);
IkReal x251=(cj4*sj1);
IkReal x252=(sj1*sj4);
IkReal x253=(gconst8*r20);
IkReal x254=(cj1*sj4);
if( IKabs(((((-1.0)*x249*x251))+((x251*x253))+(((-1.0)*cj1*x249*x250))+((x253*x254))+((r22*x252))+(((-1.0)*x247*x248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x247*x253))+(((-1.0)*x248*x251))+(((-1.0)*x248*x254))+(((-1.0)*sj1*x249*x250))+((x252*x253))+((x247*x249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x249*x251))+((x251*x253))+(((-1.0)*cj1*x249*x250))+((x253*x254))+((r22*x252))+(((-1.0)*x247*x248))))+IKsqr(((((-1.0)*x247*x253))+(((-1.0)*x248*x251))+(((-1.0)*x248*x254))+(((-1.0)*sj1*x249*x250))+((x252*x253))+((x247*x249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x249*x251))+((x251*x253))+(((-1.0)*cj1*x249*x250))+((x253*x254))+((r22*x252))+(((-1.0)*x247*x248))), ((((-1.0)*x247*x253))+(((-1.0)*x248*x251))+(((-1.0)*x248*x254))+(((-1.0)*sj1*x249*x250))+((x252*x253))+((x247*x249))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x255=IKcos(j2);
IkReal x256=IKsin(j2);
IkReal x257=((1.0)*cj4);
IkReal x258=(gconst7*r21);
IkReal x259=((0.08)*gconst8);
IkReal x260=(r10*sj0);
IkReal x261=(cj0*r02);
IkReal x262=(gconst8*r20);
IkReal x263=((1.0)*sj4);
IkReal x264=(r12*sj0);
IkReal x265=(cj1*x255);
IkReal x266=(cj0*gconst8*r00);
IkReal x267=(cj1*x256);
IkReal x268=(sj1*x255);
IkReal x269=(sj1*x256);
IkReal x270=(cj0*gconst7*r01);
IkReal x271=(gconst7*r11*sj0);
IkReal x272=((1.0)*x269);
evalcond[0]=((((-1.0)*x262*x263))+((sj4*x258))+((cj4*r22))+x267+x268);
evalcond[1]=(((r22*sj4))+((cj4*x262))+(((-1.0)*x257*x258))+x265+(((-1.0)*x272)));
evalcond[2]=((((-0.444)*cj1))+(((0.11)*x269))+((r20*x259))+(((-0.11)*x265))+(((0.47)*x267))+(((0.47)*x268))+pz+(((-0.08)*x258)));
evalcond[3]=((((-1.0)*x263*x270))+(((-1.0)*x263*x271))+x265+((gconst8*sj4*x260))+(((-1.0)*x272))+((sj4*x266))+(((-1.0)*x257*x264))+(((-1.0)*x257*x261)));
evalcond[4]=((((-1.0)*x263*x264))+(((-1.0)*x268))+(((-1.0)*x267))+((cj4*x270))+((cj4*x271))+(((-1.0)*x261*x263))+(((-1.0)*gconst8*x257*x260))+(((-1.0)*x257*x266)));
evalcond[5]=((((-1.0)*cj0*r00*x259))+(((0.11)*x267))+(((0.11)*x268))+(((0.08)*x271))+(((0.08)*x270))+(((-0.47)*x269))+(((-1.0)*x259*x260))+(((0.47)*x265))+(((-1.0)*py*sj0))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x273=((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))));
IkReal x280 = x273;
if(IKabs(x280)==0){
continue;
}
IkReal x274=pow(x280,-0.5);
if((x273) < -0.00001)
continue;
IkReal x275=IKabs(IKsqrt(x273));
IkReal x276=((12.5)*x274);
CheckValue<IkReal> x281=IKPowWithIntegerCheck(x275,-1);
if(!x281.valid){
continue;
}
IkReal x277=x281.value;
IkReal x278=(r22*x277);
if((((1.0)+(((-1.0)*(x278*x278))))) < -0.00001)
continue;
IkReal x279=IKsqrt(((1.0)+(((-1.0)*(x278*x278)))));
if( (x278) < -1-IKFAST_SINCOS_THRESH || (x278) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x282 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x282.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin(x278))))+(((-1.0)*(x282.value))));
IkReal gconst10=(((rxp0_2*x276*x278))+((rxp1_2*x276*x279)));
IkReal gconst11=(((rxp1_2*x276*x278))+(((-1.0)*rxp0_2*x276*x279)));
if((((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x283=IKPowWithIntegerCheck(IKabs(IKsqrt(((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2)))))),-1);
if(!x283.valid){
continue;
}
if( ((r22*(x283.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x283.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x284 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x284.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x283.value))))+(x284.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x285=((0.08)*gconst11);
IkReal x286=((0.08)*gconst10);
CheckValue<IkReal> x287=IKPowWithIntegerCheck(IKsign((((gconst11*rxp1_2))+((r22*(((((-1.0)*gconst10*x286))+(((-1.0)*gconst11*x285))))))+((gconst10*rxp0_2)))),-1);
if(!x287.valid){
continue;
}
CheckValue<IkReal> x288 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x285))+((r11*x286))+(((-1.0)*py)))),IkReal((((r01*x286))+(((-1.0)*px))+(((-1.0)*r00*x285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x288.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x287.value)))+(x288.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x289=IKsin(j0);
IkReal x290=IKcos(j0);
IkReal x291=((1.0)*gconst11);
IkReal x292=((1.0)*cj4);
IkReal x293=((1.0)*gconst10);
IkReal x294=((0.08)*gconst11);
IkReal x295=(r00*x289);
IkReal x296=(r10*x290);
IkReal x297=(sj4*x290);
IkReal x298=(r02*x289);
IkReal x299=(r11*x290);
IkReal x300=(gconst10*r01*x289);
evalcond[0]=((1.0)+(((-1.0)*x291*x299))+(((-1.0)*x293*x296))+((gconst10*x295))+((gconst11*r01*x289)));
evalcond[1]=((((-1.0)*r10*x289*x293))+(((-1.0)*r00*x290*x293))+(((-1.0)*r01*x290*x291))+(((-1.0)*r11*x289*x291)));
evalcond[2]=((((-1.0)*py*x290))+(((-0.08)*x300))+((x294*x295))+((px*x289))+(((0.08)*gconst10*x299))+(((-1.0)*x294*x296)));
evalcond[3]=((((-1.0)*r11*x293*x297))+(((-1.0)*sj4*x291*x295))+((cj4*x298))+(((-1.0)*r12*x290*x292))+((sj4*x300))+((gconst11*sj4*x296)));
evalcond[4]=((((-1.0)*x292*x300))+(((-1.0)*cj4*x291*x296))+((sj4*x298))+((cj4*gconst10*x299))+((cj4*gconst11*x295))+(((-1.0)*r12*x297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x301=(r22*sj4);
IkReal x302=(gconst11*r20);
IkReal x303=(gconst10*r21);
IkReal x304=(cj4*x302);
IkReal x305=((0.08)*x302);
IkReal x306=((0.08)*x303);
IkReal x307=((1.0)*cj4*x303);
IkReal x308=(x305+pz);
IkReal x309=(x304+x301);
IkReal x310=((-0.554)+x308+(((-1.0)*x306)));
IkReal x311=((-0.334)+x308+(((-1.0)*x306)));
IkReal x312=((0.554)+x308+(((-1.0)*x306)));
IkReal x313=((0.334)+x308+(((-1.0)*x306)));
IkReal x314=((1.0)+x309+(((-1.0)*x307)));
IkReal x315=((-1.0)+x309+(((-1.0)*x307)));
IkReal gconst44=x314;
IkReal gconst45=x315;
IkReal gconst46=x310;
IkReal gconst47=x311;
IkReal gconst48=x314;
IkReal gconst49=x315;
IkReal gconst50=x310;
IkReal gconst51=x311;
IkReal gconst52=x315;
IkReal gconst53=x314;
IkReal gconst54=x312;
IkReal gconst55=x313;
IkReal gconst56=x315;
IkReal gconst57=x314;
IkReal gconst58=x312;
IkReal gconst59=x313;
IkReal x316=((3.5344)*gconst56);
IkReal x317=((3.5344)*gconst53);
IkReal x318=((3.5344)*gconst48);
IkReal x319=((3.5344)*gconst45);
IkReal x320=(gconst48*gconst55);
IkReal x321=(gconst44*gconst56);
IkReal x322=((1.0)*gconst51);
IkReal x323=((0.94)*gconst58);
IkReal x324=(gconst44*gconst49);
IkReal x325=((0.94)*gconst52);
IkReal x326=(gconst50*gconst57);
IkReal x327=(gconst53*gconst57);
IkReal x328=(gconst55*gconst58);
IkReal x329=(gconst44*gconst57);
IkReal x330=((3.76)*gconst58);
IkReal x331=((0.94)*gconst47);
IkReal x332=(gconst45*gconst57);
IkReal x333=(gconst49*gconst52);
IkReal x334=((0.8836)*gconst56);
IkReal x335=(gconst55*gconst56);
IkReal x336=(gconst51*gconst54);
IkReal x337=(gconst48*gconst53);
IkReal x338=((1.0)*gconst54);
IkReal x339=(gconst45*gconst58);
IkReal x340=(gconst45*gconst56);
IkReal x341=(gconst49*gconst50);
IkReal x342=(gconst47*gconst58);
IkReal x343=((0.94)*gconst44);
IkReal x344=((1.0)*gconst46);
IkReal x345=(gconst47*gconst56);
IkReal x346=(gconst53*gconst56);
IkReal x347=((0.94)*gconst46);
IkReal x348=(gconst45*gconst49);
IkReal x349=(gconst47*gconst48);
IkReal x350=(gconst45*gconst48);
IkReal x351=(gconst54*gconst59);
IkReal x352=((3.76)*gconst50);
IkReal x353=(gconst47*gconst50);
IkReal x354=(gconst52*gconst57);
IkReal x355=((0.94)*gconst55);
IkReal x356=(gconst48*gconst59);
IkReal x357=(gconst48*gconst51);
IkReal x358=((1.0)*gconst59);
IkReal x359=((0.94)*gconst45);
IkReal x360=((0.94)*gconst53);
IkReal x361=((0.94)*gconst59);
IkReal x362=((0.94)*gconst51);
IkReal x363=((1.76)*gconst53);
IkReal x364=((0.94)*gconst54);
IkReal x365=(gconst46*gconst59);
IkReal x366=(gconst46*gconst51);
IkReal x367=(gconst50*gconst55);
IkReal x368=(gconst44*gconst48);
IkReal x369=(gconst49*gconst53);
IkReal x370=((0.8272)*x346);
IkReal x371=((3.76)*x335);
IkReal x372=(gconst53*x330);
IkReal x373=(gconst53*x334);
IkReal x374=((0.8272)*x340);
IkReal x375=((3.76)*x320);
IkReal x376=((3.76)*x345);
IkReal x377=((0.8272)*x337);
IkReal x378=(gconst45*x330);
IkReal x379=(gconst53*x352);
IkReal x380=(gconst45*x334);
IkReal x381=((0.8836)*x337);
IkReal x382=((3.76)*x349);
IkReal x383=(gconst45*x352);
IkReal x384=((0.8272)*x350);
IkReal x385=((0.8836)*x350);
IkReal x386=((0.94)*x337);
IkReal x387=(gconst52*x358);
IkReal x388=(gconst58*x369);
IkReal x389=(x380+x381);
IkReal x390=(x372+x371+x370);
IkReal x391=(x384+x382+x383);
IkReal x392=(x379+x378+x377+x376+x375+x374);
op[0]=(((x328*x354))+(((-1.0)*x335*x387))+(((-1.0)*gconst58*x327*x338))+(((-1.0)*x373))+((x346*x351)));
op[1]=(((x346*x361))+(((-1.0)*x323*x354))+(((-1.0)*x323*x327))+x390+((gconst56*gconst59*x325))+((gconst55*gconst57*x325))+((x325*x335))+(((-1.0)*x346*x364))+(((-1.0)*x327*x364)));
op[2]=(((x336*x346))+(((-1.0)*gconst58*x363))+(((-16.0)*x328))+(((-1.76)*x335))+((x328*x329))+((x337*x351))+((x346*x365))+(((-1.0)*x320*x387))+(((0.69)*x346))+x317+((x342*x354))+(((-1.0)*x316))+((x340*x351))+(((-1.0)*gconst53*x326*x338))+(((-1.0)*x338*x388))+(((-1.0)*gconst52*x322*x335))+(((-1.0)*gconst55*x321*x358))+(((-1.0)*x345*x387))+((x328*x333))+(((-1.0)*gconst58*x332*x338))+(((-1.0)*x389))+(((-0.8836)*x354))+((gconst52*gconst55*x326))+(((-0.8836)*x327))+(((-1.0)*gconst52*x334))+(((-1.0)*gconst58*x327*x344)));
op[3]=((((-1.0)*x390))+((x325*x356))+((x325*x345))+((x340*x361))+(((-1.0)*gconst49*gconst54*x360))+((x320*x325))+((x346*x362))+((x329*x355))+(((-1.0)*x325*x326))+((x321*x361))+(((-1.0)*x327*x347))+(((-1.0)*x323*x329))+x392+(((-1.0)*x340*x364))+(((-1.0)*x332*x364))+(((-15.04)*gconst55))+(((15.04)*gconst58))+(((-1.0)*x326*x360))+(((1.6544)*gconst56))+(((-1.0)*x346*x347))+(((-1.0)*x323*x332))+(((-1.0)*x323*x333))+((x337*x361))+(((-1.6544)*gconst53))+((gconst49*gconst55*x325))+(((-1.0)*x337*x364))+((gconst51*gconst56*x325))+((gconst47*gconst57*x325))+(((-1.0)*x323*x369))+((x321*x355)));
op[4]=((14.1376)+(((-1.0)*gconst52*x320*x322))+(((-16.0)*x342))+(((-1.0)*x349*x387))+((x336*x340))+((x336*x337))+(((-1.0)*gconst49*x338*x339))+(((-1.0)*gconst52*x322*x345))+(((-1.76)*x339))+(((-16.0)*x367))+((x340*x365))+(((-1.0)*gconst53*x326*x344))+((x346*x366))+(((-0.8836)*gconst48*gconst52))+(((-1.0)*x373))+((x329*x342))+(((-1.76)*x320))+((x333*x367))+(((0.69)*x340))+(((0.69)*x337))+(((-1.0)*gconst44*x320*x358))+x319+x316+((gconst44*gconst55*x326))+((x333*x342))+(((-1.0)*x344*x388))+(((-1.76)*x345))+((x324*x328))+(((-1.0)*x318))+(((-1.0)*x317))+(((-1.0)*gconst53*x338*x341))+(((-0.8836)*x333))+(((-0.8836)*x332))+(((-1.0)*gconst45*x326*x338))+(((-1.0)*gconst47*x321*x358))+(((-1.0)*gconst55*x321*x322))+((x350*x351))+(((-1.0)*x385))+((gconst47*gconst52*x326))+((x337*x365))+(((-1.0)*gconst50*x363))+(((-0.8836)*x329))+(((-0.8836)*x321))+(((-1.0)*gconst58*x332*x344))+(((-0.8836)*x369)));
op[5]=((((-1.0)*x347*x369))+((gconst47*gconst49*x325))+(((-1.0)*x392))+((x325*x357))+((x325*x349))+(((-1.0)*x350*x364))+((x350*x361))+((x340*x362))+(((-1.0)*x337*x347))+(((-1.0)*x326*x359))+(((-15.04)*gconst47))+(((-1.0)*x332*x347))+((x321*x362))+((x324*x355))+(((1.6544)*gconst48))+(((-1.0)*x323*x324))+x391+(((-1.0)*x325*x341))+(((-1.0)*x326*x343))+(((-1.0)*x348*x364))+(((15.04)*gconst50))+((x329*x331))+(((-1.0)*x340*x347))+((x343*x356))+(((-1.0)*x323*x348))+((x337*x362))+(((-1.6544)*gconst45))+(((-1.0)*x341*x360))+((x321*x331))+((x320*x343)));
op[6]=(((x324*x367))+(((-16.0)*x353))+(((-1.0)*gconst52*x322*x349))+((x350*x365))+((x340*x366))+(((-1.0)*gconst53*x341*x344))+((x324*x342))+(((-1.0)*gconst44*x320*x322))+(((-1.76)*gconst45*gconst50))+((x336*x350))+x318+((gconst44*gconst47*x326))+(((-1.76)*x349))+(((-1.0)*x319))+(((-1.0)*gconst49*x339*x344))+(((0.69)*x350))+(((-1.0)*gconst47*x321*x322))+(((-1.0)*x389))+(((-1.0)*gconst45*x338*x341))+((x337*x366))+(((-1.0)*gconst45*x326*x344))+(((-0.8836)*x348))+((x333*x353))+(((-0.8836)*x324))+(((-0.8836)*x368))+(((-1.0)*gconst44*x349*x358)));
op[7]=((((-1.0)*x391))+((x350*x362))+((x324*x331))+(((-0.94)*gconst50*x324))+(((-1.0)*x341*x359))+(((-1.0)*x347*x348))+(((-1.0)*x347*x350))+((x343*x357))+((x331*x368)));
op[8]=(((x350*x366))+(((-1.0)*gconst45*x341*x344))+((x324*x353))+(((-1.0)*gconst44*x322*x349))+(((-1.0)*x385)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x393=((1.0)*cj4);
IkReal x394=(cj1*r22);
IkReal x395=((1.0)*sj4);
IkReal x396=(sj1*sj4);
IkReal x397=(gconst11*r20);
IkReal x398=(gconst10*r21*sj1);
IkReal x399=(cj1*gconst10*r21);
if( IKabs((((cj1*sj4*x397))+(((-1.0)*x395*x399))+((cj4*sj1*x397))+((r22*x396))+(((-1.0)*x393*x394))+(((-1.0)*x393*x398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x394*x395))+((cj4*x399))+(((-1.0)*x395*x398))+((x396*x397))+(((-1.0)*r22*sj1*x393))+(((-1.0)*cj1*x393*x397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*sj4*x397))+(((-1.0)*x395*x399))+((cj4*sj1*x397))+((r22*x396))+(((-1.0)*x393*x394))+(((-1.0)*x393*x398))))+IKsqr(((((-1.0)*x394*x395))+((cj4*x399))+(((-1.0)*x395*x398))+((x396*x397))+(((-1.0)*r22*sj1*x393))+(((-1.0)*cj1*x393*x397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*sj4*x397))+(((-1.0)*x395*x399))+((cj4*sj1*x397))+((r22*x396))+(((-1.0)*x393*x394))+(((-1.0)*x393*x398))), ((((-1.0)*x394*x395))+((cj4*x399))+(((-1.0)*x395*x398))+((x396*x397))+(((-1.0)*r22*sj1*x393))+(((-1.0)*cj1*x393*x397))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x400=IKcos(j2);
IkReal x401=IKsin(j2);
IkReal x402=((0.08)*sj0);
IkReal x403=(gconst10*r11);
IkReal x404=(gconst11*r10);
IkReal x405=(gconst10*r21);
IkReal x406=((1.0)*cj4);
IkReal x407=(cj0*r02);
IkReal x408=(gconst11*r20);
IkReal x409=((1.0)*sj4);
IkReal x410=(cj1*x400);
IkReal x411=(cj1*x401);
IkReal x412=(cj0*gconst11*r00);
IkReal x413=(sj1*x400);
IkReal x414=(sj1*x401);
IkReal x415=(sj0*x409);
IkReal x416=(cj0*gconst10*r01);
IkReal x417=((1.0)*x414);
evalcond[0]=(((cj4*r22))+x413+x411+((sj4*x405))+(((-1.0)*x408*x409)));
evalcond[1]=(((r22*sj4))+((cj4*x408))+x410+(((-1.0)*x405*x406))+(((-1.0)*x417)));
evalcond[2]=((((-0.11)*x410))+(((-0.444)*cj1))+(((0.08)*x408))+(((-0.08)*x405))+(((0.47)*x413))+(((0.47)*x411))+pz+(((0.11)*x414)));
evalcond[3]=(((sj0*sj4*x404))+(((-1.0)*x406*x407))+(((-1.0)*x403*x415))+x410+(((-1.0)*r12*sj0*x406))+(((-1.0)*x417))+((sj4*x412))+(((-1.0)*x409*x416)));
evalcond[4]=((((-1.0)*x406*x412))+((cj4*x416))+(((-1.0)*sj0*x404*x406))+(((-1.0)*x407*x409))+((cj4*sj0*x403))+(((-1.0)*r12*x415))+(((-1.0)*x413))+(((-1.0)*x411)));
evalcond[5]=((((0.08)*x416))+(((-0.08)*x412))+(((-0.47)*x414))+(((-1.0)*x402*x404))+(((0.47)*x410))+(((-1.0)*py*sj0))+(((0.11)*x413))+(((0.11)*x411))+((x402*x403))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x418=(cj5*sj4);
IkReal x419=((1.0)*sj5);
IkReal x420=((1.0)*cj4);
CheckValue<IkReal> x421 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x420))+((r10*x418))+(((-1.0)*r11*sj4*x419)))),IkReal(((((-1.0)*r02*x420))+((r00*x418))+(((-1.0)*r01*sj4*x419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x421.valid){
continue;
}
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign((((r22*sj4))+(((-1.0)*cj4*r21*x419))+((cj4*cj5*r20)))),-1);
if(!x422.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x421.value)+(((1.5707963267949)*(x422.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x423=IKsin(j0);
IkReal x424=IKcos(j0);
IkReal x425=(r11*sj5);
IkReal x426=(cj5*r10);
IkReal x427=((1.0)*r10);
IkReal x428=(cj5*r01);
IkReal x429=(cj5*r00);
IkReal x430=(cj5*r11);
IkReal x431=(sj5*x423);
IkReal x432=((0.08)*x424);
IkReal x433=(sj4*x424);
IkReal x434=((1.0)*x424);
IkReal x435=(cj4*x423);
IkReal x436=((1.0)*x423);
IkReal x437=(r12*x434);
evalcond[0]=((1.0)+(((-1.0)*x430*x434))+(((-1.0)*sj5*x424*x427))+((r00*x431))+((x423*x428)));
evalcond[1]=((((-1.0)*x430*x436))+(((-1.0)*x427*x431))+(((-1.0)*r00*sj5*x434))+(((-1.0)*x428*x434)));
evalcond[2]=(((x425*x432))+(((-1.0)*x426*x432))+(((-0.08)*r01*x431))+(((-1.0)*py*x434))+(((0.08)*x423*x429))+((px*x423)));
evalcond[3]=(((r01*sj4*x431))+(((-1.0)*x425*x433))+((x426*x433))+((r02*x435))+(((-1.0)*sj4*x429*x436))+(((-1.0)*cj4*x437)));
evalcond[4]=(((x429*x435))+((r02*sj4*x423))+(((-1.0)*r12*x433))+(((-1.0)*cj4*x426*x434))+((cj4*x424*x425))+(((-1.0)*cj4*r01*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x438=((0.1504)*cj5);
IkReal x439=(cj0*r00);
IkReal x440=(r22*sj4);
IkReal x441=(cj5*r20);
IkReal x442=((0.44)*cj4);
IkReal x443=(r10*sj0);
IkReal x444=(r21*sj5);
IkReal x445=((1.88)*sj4);
IkReal x446=((5.64)*sj4);
IkReal x447=((0.4512)*cj5);
IkReal x448=((1.32)*cj4);
IkReal x449=((2.796)*cj4);
IkReal x450=((0.932)*cj4);
IkReal x451=(py*sj0);
IkReal x452=(cj4*r22);
IkReal x453=(cj0*px);
IkReal x454=((0.1056)*x444);
IkReal x455=((0.96)*x444);
IkReal x456=((5.64)*x452);
IkReal x457=(r11*sj0*sj5);
IkReal x458=(cj0*r01*sj5);
IkReal x459=(x444*x449);
IkReal x460=((0.4512)*x458);
IkReal x461=((0.4512)*x457);
IkReal x462=(x444*x448);
IkReal x463=(x444*x446);
IkReal x464=(x456+x455+x463+x462);
IkReal x465=(x459+x454+x461+x460);
IkReal x466=((((0.96)*x441))+(((12.0)*pz))+(((1.32)*x440))+((x441*x448))+((x441*x446)));
IkReal x467=(((x439*x447))+(((0.1056)*x441))+(((5.64)*x451))+(((5.64)*x453))+(((1.32)*pz))+(((2.796)*x440))+((x441*x449))+((x443*x447)));
j1eval[0]=((6.67776)+(IKabs(((-1.776)+(((0.32)*x444))+((x444*x445))+(((-0.32)*x441))+((x442*x444))+(((1.88)*x452))+(((-0.44)*x440))+(((-4.0)*pz))+(((-1.0)*x441*x445))+(((-1.0)*x441*x442)))))+(IKabs(((-0.19536)+(((-1.0)*x438*x443))+(((0.0352)*x444))+(((-1.0)*x438*x439))+(((-0.44)*pz))+(((-0.932)*x440))+(((0.1504)*x458))+(((0.1504)*x457))+(((-1.88)*x451))+(((-1.88)*x453))+(((-0.0352)*x441))+((x444*x450))+(((-1.0)*x441*x450)))))+(IKabs(((-0.19536)+(((-1.0)*x467))+x465)))+(IKabs(((0.19536)+(((-1.0)*x467))+x465)))+(IKabs(((1.776)+(((-1.0)*x466))+x464)))+(IKabs(((-1.776)+(((-1.0)*x466))+x464))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x468=(r21*sj5);
IkReal x469=(cj5*r20);
IkReal x470=((5.64)*sj4);
IkReal x471=(r22*sj4);
IkReal x472=((1.32)*cj4);
IkReal x473=((0.44)*cj4);
IkReal x474=(cj4*r22);
IkReal x475=((1.88)*sj4);
IkReal x476=((0.96)*x468);
IkReal x477=((5.64)*x474);
IkReal x478=((0.32)*x468);
IkReal x479=((1.88)*x474);
IkReal x480=(x468*x472);
IkReal x481=(x468*x470);
IkReal x482=(x468*x475);
IkReal x483=(x468*x473);
IkReal x484=(x481+x480+x476+x477);
IkReal x485=(x483+x482+x478+x479);
IkReal x486=((((1.32)*x471))+((x469*x472))+((x469*x470))+(((12.0)*pz))+(((0.96)*x469)));
IkReal x487=(((x469*x473))+((x469*x475))+(((4.0)*pz))+(((0.44)*x471))+(((0.32)*x469)));
op[0]=((-1.776)+(((-1.0)*x487))+x485);
op[1]=0;
op[2]=((-1.776)+(((-1.0)*x486))+x484);
op[3]=0;
op[4]=((1.776)+(((-1.0)*x486))+x484);
op[5]=0;
op[6]=((1.776)+(((-1.0)*x487))+x485);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x488=((0.1504)*cj5);
IkReal x489=(cj0*r00);
IkReal x490=((2.796)*cj4);
IkReal x491=(cj5*r20);
IkReal x492=(r10*sj0);
IkReal x493=((0.4512)*cj5);
IkReal x494=(r21*sj5);
IkReal x495=((0.932)*cj4);
IkReal x496=(py*sj0);
IkReal x497=(cj0*px);
IkReal x498=(r22*sj4);
IkReal x499=((0.1056)*x494);
IkReal x500=((0.0352)*x494);
IkReal x501=(r11*sj0*sj5);
IkReal x502=(cj0*r01*sj5);
IkReal x503=(x490*x494);
IkReal x504=((0.4512)*x502);
IkReal x505=((0.4512)*x501);
IkReal x506=(x494*x495);
IkReal x507=((0.1504)*x501);
IkReal x508=((0.1504)*x502);
IkReal x509=(x499+x503+x504+x505);
IkReal x510=(x508+x500+x506+x507);
IkReal x511=(((x489*x493))+((x490*x491))+(((1.32)*pz))+(((2.796)*x498))+(((5.64)*x497))+(((5.64)*x496))+(((0.1056)*x491))+((x492*x493)));
IkReal x512=(((x488*x492))+((x491*x495))+((x488*x489))+(((0.0352)*x491))+(((1.88)*x497))+(((1.88)*x496))+(((0.44)*pz))+(((0.932)*x498)));
j1evalpoly[0]=((0.19536)+(((1.66944)*htj1))+x510+(((3.33888)*(htj1*htj1*htj1)))+(((1.66944)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.19536)+x509+(((-1.0)*x511))))))+(((-1.0)*x512))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.19536)+x510+(((-1.0)*x512))))))+(((htj1*htj1)*(((0.19536)+x509+(((-1.0)*x511)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x513=(cj1*cj4);
IkReal x514=((1.0)*r22);
IkReal x515=(r21*sj5);
IkReal x516=(cj1*sj4);
IkReal x517=(cj5*r20);
IkReal x518=(cj4*sj1);
IkReal x519=(sj1*sj4);
if( IKabs(((((-1.0)*x513*x514))+(((-1.0)*x515*x516))+(((-1.0)*x515*x518))+((x517*x518))+((x516*x517))+((r22*x519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x514*x516))+(((-1.0)*x514*x518))+((x513*x515))+(((-1.0)*x515*x519))+((x517*x519))+(((-1.0)*x513*x517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x513*x514))+(((-1.0)*x515*x516))+(((-1.0)*x515*x518))+((x517*x518))+((x516*x517))+((r22*x519))))+IKsqr(((((-1.0)*x514*x516))+(((-1.0)*x514*x518))+((x513*x515))+(((-1.0)*x515*x519))+((x517*x519))+(((-1.0)*x513*x517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x513*x514))+(((-1.0)*x515*x516))+(((-1.0)*x515*x518))+((x517*x518))+((x516*x517))+((r22*x519))), ((((-1.0)*x514*x516))+(((-1.0)*x514*x518))+((x513*x515))+(((-1.0)*x515*x519))+((x517*x519))+(((-1.0)*x513*x517))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x520=IKcos(j2);
IkReal x521=IKsin(j2);
IkReal x522=((0.08)*cj5);
IkReal x523=((1.0)*sj4);
IkReal x524=(cj5*r00);
IkReal x525=(r10*sj0);
IkReal x526=(cj5*r20);
IkReal x527=((1.0)*sj0);
IkReal x528=(r21*sj5);
IkReal x529=((1.0)*cj4);
IkReal x530=(cj1*x520);
IkReal x531=(cj1*x521);
IkReal x532=(sj1*x520);
IkReal x533=(r11*sj0*sj5);
IkReal x534=(cj0*x529);
IkReal x535=(sj1*x521);
IkReal x536=(cj0*r01*sj5);
IkReal x537=((1.0)*x535);
evalcond[0]=(((cj4*r22))+(((-1.0)*x523*x526))+x531+x532+((sj4*x528)));
evalcond[1]=(((cj4*x526))+((r22*sj4))+(((-1.0)*x537))+(((-1.0)*x528*x529))+x530);
evalcond[2]=((((0.11)*x535))+((r20*x522))+(((-0.444)*cj1))+(((-0.08)*x528))+pz+(((-0.11)*x530))+(((0.47)*x532))+(((0.47)*x531)));
evalcond[3]=(((cj0*sj4*x524))+(((-1.0)*x523*x536))+(((-1.0)*x523*x533))+(((-1.0)*x537))+(((-1.0)*r02*x534))+x530+(((-1.0)*cj4*r12*x527))+((cj5*sj4*x525)));
evalcond[4]=((((-1.0)*x524*x534))+((cj4*x536))+((cj4*x533))+(((-1.0)*x532))+(((-1.0)*x531))+(((-1.0)*cj5*x525*x529))+(((-1.0)*r12*sj0*x523))+(((-1.0)*cj0*r02*x523)));
evalcond[5]=((((0.11)*x532))+(((0.11)*x531))+(((-1.0)*cj0*r00*x522))+(((-0.47)*x535))+(((-1.0)*py*x527))+(((0.47)*x530))+(((0.08)*x533))+(((0.08)*x536))+(((-1.0)*x522*x525))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x538=cj5*cj5;
CheckValue<IkReal> x539 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
CheckValue<IkReal> x540=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x538*(r21*r21)))+(((r20*r20)*(((-1.0)+x538))))+(((-2.0)*cj5*r20*r21*sj5)))),-1);
if(!x540.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x539.value)+(((1.5707963267949)*(x540.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x541=IKsin(j0);
IkReal x542=IKcos(j0);
IkReal x543=(r11*sj5);
IkReal x544=(cj5*r10);
IkReal x545=((1.0)*r10);
IkReal x546=(cj5*r01);
IkReal x547=(cj5*r00);
IkReal x548=(cj5*r11);
IkReal x549=(sj5*x541);
IkReal x550=((0.08)*x542);
IkReal x551=(sj4*x542);
IkReal x552=((1.0)*x542);
IkReal x553=(cj4*x541);
IkReal x554=((1.0)*x541);
IkReal x555=(r12*x552);
evalcond[0]=((1.0)+(((-1.0)*sj5*x542*x545))+((x541*x546))+(((-1.0)*x548*x552))+((r00*x549)));
evalcond[1]=((((-1.0)*x545*x549))+(((-1.0)*r00*sj5*x552))+(((-1.0)*x548*x554))+(((-1.0)*x546*x552)));
evalcond[2]=((((-1.0)*x544*x550))+(((-0.08)*r01*x549))+((px*x541))+((x543*x550))+(((0.08)*x541*x547))+(((-1.0)*py*x552)));
evalcond[3]=(((r02*x553))+((x544*x551))+(((-1.0)*x543*x551))+(((-1.0)*sj4*x547*x554))+((r01*sj4*x549))+(((-1.0)*cj4*x555)));
evalcond[4]=((((-1.0)*cj4*x544*x552))+(((-1.0)*cj4*r01*x549))+(((-1.0)*r12*x551))+((x547*x553))+((r02*sj4*x541))+((cj4*x542*x543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x556=((0.1504)*cj5);
IkReal x557=(cj0*r00);
IkReal x558=(r22*sj4);
IkReal x559=(cj5*r20);
IkReal x560=((0.44)*cj4);
IkReal x561=(r10*sj0);
IkReal x562=(r21*sj5);
IkReal x563=((1.88)*sj4);
IkReal x564=((5.64)*sj4);
IkReal x565=((0.4512)*cj5);
IkReal x566=((1.32)*cj4);
IkReal x567=((2.796)*cj4);
IkReal x568=((0.932)*cj4);
IkReal x569=(py*sj0);
IkReal x570=(cj4*r22);
IkReal x571=(cj0*px);
IkReal x572=((0.1056)*x562);
IkReal x573=((0.96)*x562);
IkReal x574=((5.64)*x570);
IkReal x575=(r11*sj0*sj5);
IkReal x576=(cj0*r01*sj5);
IkReal x577=(x562*x567);
IkReal x578=((0.4512)*x576);
IkReal x579=((0.4512)*x575);
IkReal x580=(x562*x566);
IkReal x581=(x562*x564);
IkReal x582=(x574+x573+x580+x581);
IkReal x583=(x579+x578+x577+x572);
IkReal x584=((((12.0)*pz))+(((0.96)*x559))+(((1.32)*x558))+((x559*x564))+((x559*x566)));
IkReal x585=((((0.1056)*x559))+(((5.64)*x571))+((x561*x565))+(((1.32)*pz))+((x557*x565))+(((2.796)*x558))+(((5.64)*x569))+((x559*x567)));
j1eval[0]=((6.67776)+(IKabs(((-1.776)+((x562*x563))+(((1.88)*x570))+(((-0.44)*x558))+((x560*x562))+(((-1.0)*x559*x560))+(((-1.0)*x559*x563))+(((-0.32)*x559))+(((0.32)*x562))+(((-4.0)*pz)))))+(IKabs(((1.776)+x582+(((-1.0)*x584)))))+(IKabs(((-0.19536)+(((-1.0)*x556*x557))+(((0.0352)*x562))+(((-1.88)*x571))+(((-0.932)*x558))+(((-0.0352)*x559))+(((-1.88)*x569))+((x562*x568))+(((-1.0)*x556*x561))+(((0.1504)*x576))+(((0.1504)*x575))+(((-1.0)*x559*x568))+(((-0.44)*pz)))))+(IKabs(((-1.776)+x582+(((-1.0)*x584)))))+(IKabs(((0.19536)+x583+(((-1.0)*x585)))))+(IKabs(((-0.19536)+x583+(((-1.0)*x585))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x586=(r21*sj5);
IkReal x587=(cj5*r20);
IkReal x588=((5.64)*sj4);
IkReal x589=(r22*sj4);
IkReal x590=((1.32)*cj4);
IkReal x591=((0.44)*cj4);
IkReal x592=(cj4*r22);
IkReal x593=((1.88)*sj4);
IkReal x594=((0.96)*x586);
IkReal x595=((5.64)*x592);
IkReal x596=((0.32)*x586);
IkReal x597=((1.88)*x592);
IkReal x598=(x586*x590);
IkReal x599=(x586*x588);
IkReal x600=(x586*x593);
IkReal x601=(x586*x591);
IkReal x602=(x595+x594+x599+x598);
IkReal x603=(x597+x596+x601+x600);
IkReal x604=((((0.96)*x587))+(((12.0)*pz))+((x587*x588))+(((1.32)*x589))+((x587*x590)));
IkReal x605=((((4.0)*pz))+(((0.32)*x587))+(((0.44)*x589))+((x587*x593))+((x587*x591)));
op[0]=((-1.776)+x603+(((-1.0)*x605)));
op[1]=0;
op[2]=((-1.776)+x602+(((-1.0)*x604)));
op[3]=0;
op[4]=((1.776)+x602+(((-1.0)*x604)));
op[5]=0;
op[6]=((1.776)+x603+(((-1.0)*x605)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x606=((0.1504)*cj5);
IkReal x607=(cj0*r00);
IkReal x608=((2.796)*cj4);
IkReal x609=(cj5*r20);
IkReal x610=(r10*sj0);
IkReal x611=((0.4512)*cj5);
IkReal x612=(r21*sj5);
IkReal x613=((0.932)*cj4);
IkReal x614=(py*sj0);
IkReal x615=(cj0*px);
IkReal x616=(r22*sj4);
IkReal x617=((0.1056)*x612);
IkReal x618=((0.0352)*x612);
IkReal x619=(r11*sj0*sj5);
IkReal x620=(cj0*r01*sj5);
IkReal x621=(x608*x612);
IkReal x622=((0.4512)*x620);
IkReal x623=((0.4512)*x619);
IkReal x624=(x612*x613);
IkReal x625=((0.1504)*x619);
IkReal x626=((0.1504)*x620);
IkReal x627=(x617+x621+x623+x622);
IkReal x628=(x618+x625+x624+x626);
IkReal x629=(((x608*x609))+(((1.32)*pz))+(((0.1056)*x609))+((x607*x611))+((x610*x611))+(((2.796)*x616))+(((5.64)*x614))+(((5.64)*x615)));
IkReal x630=((((1.88)*x614))+(((1.88)*x615))+(((0.0352)*x609))+((x606*x607))+(((0.932)*x616))+((x606*x610))+((x609*x613))+(((0.44)*pz)));
j1evalpoly[0]=((0.19536)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.19536)+(((-1.0)*x630))+x628))))+(((1.66944)*htj1))+(((-1.0)*x630))+(((htj1*htj1)*(((0.19536)+(((-1.0)*x629))+x627))))+(((htj1*htj1*htj1*htj1)*(((-0.19536)+(((-1.0)*x629))+x627))))+x628+(((3.33888)*(htj1*htj1*htj1)))+(((1.66944)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x631=(cj1*cj4);
IkReal x632=((1.0)*r22);
IkReal x633=(r21*sj5);
IkReal x634=(cj1*sj4);
IkReal x635=(cj5*r20);
IkReal x636=(cj4*sj1);
IkReal x637=(sj1*sj4);
if( IKabs(((((-1.0)*x631*x632))+((x634*x635))+((x635*x636))+((r22*x637))+(((-1.0)*x633*x636))+(((-1.0)*x633*x634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x635*x637))+(((-1.0)*x633*x637))+(((-1.0)*x631*x635))+((x631*x633))+(((-1.0)*x632*x634))+(((-1.0)*x632*x636)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x631*x632))+((x634*x635))+((x635*x636))+((r22*x637))+(((-1.0)*x633*x636))+(((-1.0)*x633*x634))))+IKsqr((((x635*x637))+(((-1.0)*x633*x637))+(((-1.0)*x631*x635))+((x631*x633))+(((-1.0)*x632*x634))+(((-1.0)*x632*x636))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x631*x632))+((x634*x635))+((x635*x636))+((r22*x637))+(((-1.0)*x633*x636))+(((-1.0)*x633*x634))), (((x635*x637))+(((-1.0)*x633*x637))+(((-1.0)*x631*x635))+((x631*x633))+(((-1.0)*x632*x634))+(((-1.0)*x632*x636))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x638=IKcos(j2);
IkReal x639=IKsin(j2);
IkReal x640=((0.08)*cj5);
IkReal x641=((1.0)*sj4);
IkReal x642=(cj5*r00);
IkReal x643=(r10*sj0);
IkReal x644=(cj5*r20);
IkReal x645=((1.0)*sj0);
IkReal x646=(r21*sj5);
IkReal x647=((1.0)*cj4);
IkReal x648=(cj1*x638);
IkReal x649=(cj1*x639);
IkReal x650=(sj1*x638);
IkReal x651=(r11*sj0*sj5);
IkReal x652=(cj0*x647);
IkReal x653=(sj1*x639);
IkReal x654=(cj0*r01*sj5);
IkReal x655=((1.0)*x653);
evalcond[0]=(((cj4*r22))+((sj4*x646))+(((-1.0)*x641*x644))+x649+x650);
evalcond[1]=(((cj4*x644))+((r22*sj4))+(((-1.0)*x646*x647))+(((-1.0)*x655))+x648);
evalcond[2]=(((r20*x640))+(((-0.444)*cj1))+(((0.47)*x649))+(((0.47)*x650))+pz+(((-0.08)*x646))+(((0.11)*x653))+(((-0.11)*x648)));
evalcond[3]=((((-1.0)*x641*x651))+(((-1.0)*x641*x654))+(((-1.0)*x655))+((cj0*sj4*x642))+(((-1.0)*r02*x652))+x648+((cj5*sj4*x643))+(((-1.0)*cj4*r12*x645)));
evalcond[4]=(((cj4*x654))+((cj4*x651))+(((-1.0)*x649))+(((-1.0)*x650))+(((-1.0)*cj5*x643*x647))+(((-1.0)*x642*x652))+(((-1.0)*r12*sj0*x641))+(((-1.0)*cj0*r02*x641)));
evalcond[5]=((((0.08)*x654))+(((0.08)*x651))+(((-1.0)*cj0*r00*x640))+(((-1.0)*x640*x643))+(((0.47)*x648))+(((0.11)*x649))+(((-0.47)*x653))+(((0.11)*x650))+(((-1.0)*py*x645))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x656=((0.08)*sj5);
IkReal x657=((0.08)*cj5);
CheckValue<IkReal> x658=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+(((-0.08)*r22))+((rxp0_2*sj5)))),-1);
if(!x658.valid){
continue;
}
CheckValue<IkReal> x659 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r11*x656))+(((-1.0)*r10*x657)))),IkReal(((((-1.0)*r00*x657))+(((-1.0)*px))+((r01*x656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x659.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x658.value)))+(x659.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x660=IKsin(j0);
IkReal x661=IKcos(j0);
IkReal x662=(r11*sj5);
IkReal x663=(cj5*r10);
IkReal x664=((1.0)*r10);
IkReal x665=(cj5*r01);
IkReal x666=(cj5*r00);
IkReal x667=(cj5*r11);
IkReal x668=(sj5*x660);
IkReal x669=((0.08)*x661);
IkReal x670=(sj4*x661);
IkReal x671=((1.0)*x661);
IkReal x672=(cj4*x660);
IkReal x673=((1.0)*x660);
IkReal x674=(r12*x671);
evalcond[0]=((1.0)+((r00*x668))+(((-1.0)*x667*x671))+((x660*x665))+(((-1.0)*sj5*x661*x664)));
evalcond[1]=((((-1.0)*r00*sj5*x671))+(((-1.0)*x665*x671))+(((-1.0)*x667*x673))+(((-1.0)*x664*x668)));
evalcond[2]=((((-0.08)*r01*x668))+(((-1.0)*x663*x669))+((x662*x669))+((px*x660))+(((-1.0)*py*x671))+(((0.08)*x660*x666)));
evalcond[3]=(((r02*x672))+((r01*sj4*x668))+(((-1.0)*cj4*x674))+(((-1.0)*x662*x670))+((x663*x670))+(((-1.0)*sj4*x666*x673)));
evalcond[4]=((((-1.0)*cj4*x663*x671))+(((-1.0)*r12*x670))+((x666*x672))+(((-1.0)*cj4*r01*x668))+((cj4*x661*x662))+((r02*sj4*x660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x675=((0.1504)*cj5);
IkReal x676=(cj0*r00);
IkReal x677=(r22*sj4);
IkReal x678=(cj5*r20);
IkReal x679=((0.44)*cj4);
IkReal x680=(r10*sj0);
IkReal x681=(r21*sj5);
IkReal x682=((1.88)*sj4);
IkReal x683=((5.64)*sj4);
IkReal x684=((0.4512)*cj5);
IkReal x685=((1.32)*cj4);
IkReal x686=((2.796)*cj4);
IkReal x687=((0.932)*cj4);
IkReal x688=(py*sj0);
IkReal x689=(cj4*r22);
IkReal x690=(cj0*px);
IkReal x691=((0.1056)*x681);
IkReal x692=((0.96)*x681);
IkReal x693=((5.64)*x689);
IkReal x694=(r11*sj0*sj5);
IkReal x695=(cj0*r01*sj5);
IkReal x696=(x681*x686);
IkReal x697=((0.4512)*x695);
IkReal x698=((0.4512)*x694);
IkReal x699=(x681*x685);
IkReal x700=(x681*x683);
IkReal x701=(x692+x693+x699+x700);
IkReal x702=(x696+x697+x691+x698);
IkReal x703=(((x678*x683))+((x678*x685))+(((12.0)*pz))+(((1.32)*x677))+(((0.96)*x678)));
IkReal x704=(((x678*x686))+(((5.64)*x688))+(((2.796)*x677))+((x676*x684))+(((1.32)*pz))+((x680*x684))+(((0.1056)*x678))+(((5.64)*x690)));
j1eval[0]=((6.67776)+(IKabs(((-0.19536)+(((-1.0)*x704))+x702)))+(IKabs(((-1.776)+(((-1.0)*x703))+x701)))+(IKabs(((-0.19536)+(((-1.88)*x690))+(((-0.932)*x677))+(((-1.0)*x675*x676))+(((-0.0352)*x678))+(((-1.0)*x675*x680))+(((-1.0)*x678*x687))+(((-0.44)*pz))+((x681*x687))+(((0.0352)*x681))+(((0.1504)*x694))+(((0.1504)*x695))+(((-1.88)*x688)))))+(IKabs(((0.19536)+(((-1.0)*x704))+x702)))+(IKabs(((1.776)+(((-1.0)*x703))+x701)))+(IKabs(((-1.776)+(((-0.44)*x677))+(((-1.0)*x678*x679))+(((1.88)*x689))+(((0.32)*x681))+(((-1.0)*x678*x682))+(((-0.32)*x678))+((x679*x681))+((x681*x682))+(((-4.0)*pz))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x705=(r21*sj5);
IkReal x706=(cj5*r20);
IkReal x707=((5.64)*sj4);
IkReal x708=(r22*sj4);
IkReal x709=((1.32)*cj4);
IkReal x710=((0.44)*cj4);
IkReal x711=(cj4*r22);
IkReal x712=((1.88)*sj4);
IkReal x713=((0.96)*x705);
IkReal x714=((5.64)*x711);
IkReal x715=((0.32)*x705);
IkReal x716=((1.88)*x711);
IkReal x717=(x705*x709);
IkReal x718=(x705*x707);
IkReal x719=(x705*x712);
IkReal x720=(x705*x710);
IkReal x721=(x718+x713+x714+x717);
IkReal x722=(x719+x715+x716+x720);
IkReal x723=((((0.96)*x706))+(((12.0)*pz))+((x706*x707))+((x706*x709))+(((1.32)*x708)));
IkReal x724=((((0.44)*x708))+(((4.0)*pz))+((x706*x710))+((x706*x712))+(((0.32)*x706)));
op[0]=((-1.776)+(((-1.0)*x724))+x722);
op[1]=0;
op[2]=((-1.776)+(((-1.0)*x723))+x721);
op[3]=0;
op[4]=((1.776)+(((-1.0)*x723))+x721);
op[5]=0;
op[6]=((1.776)+(((-1.0)*x724))+x722);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x725=((0.1504)*cj5);
IkReal x726=(cj0*r00);
IkReal x727=((2.796)*cj4);
IkReal x728=(cj5*r20);
IkReal x729=(r10*sj0);
IkReal x730=((0.4512)*cj5);
IkReal x731=(r21*sj5);
IkReal x732=((0.932)*cj4);
IkReal x733=(py*sj0);
IkReal x734=(cj0*px);
IkReal x735=(r22*sj4);
IkReal x736=((0.1056)*x731);
IkReal x737=((0.0352)*x731);
IkReal x738=(r11*sj0*sj5);
IkReal x739=(cj0*r01*sj5);
IkReal x740=(x727*x731);
IkReal x741=((0.4512)*x739);
IkReal x742=((0.4512)*x738);
IkReal x743=(x731*x732);
IkReal x744=((0.1504)*x738);
IkReal x745=((0.1504)*x739);
IkReal x746=(x736+x742+x740+x741);
IkReal x747=(x737+x744+x745+x743);
IkReal x748=(((x727*x728))+((x726*x730))+((x729*x730))+(((1.32)*pz))+(((0.1056)*x728))+(((2.796)*x735))+(((5.64)*x734))+(((5.64)*x733)));
IkReal x749=(((x728*x732))+(((0.0352)*x728))+(((0.932)*x735))+((x725*x729))+((x725*x726))+(((0.44)*pz))+(((1.88)*x734))+(((1.88)*x733)));
j1evalpoly[0]=((0.19536)+(((1.66944)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.19536)+x747+(((-1.0)*x749))))))+(((3.33888)*(htj1*htj1*htj1)))+x747+(((1.66944)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.19536)+x746+(((-1.0)*x748))))))+(((-1.0)*x749))+(((htj1*htj1)*(((0.19536)+x746+(((-1.0)*x748)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x750=(cj1*cj4);
IkReal x751=((1.0)*r22);
IkReal x752=(r21*sj5);
IkReal x753=(cj1*sj4);
IkReal x754=(cj5*r20);
IkReal x755=(cj4*sj1);
IkReal x756=(sj1*sj4);
if( IKabs(((((-1.0)*x752*x755))+(((-1.0)*x752*x753))+(((-1.0)*x750*x751))+((r22*x756))+((x753*x754))+((x754*x755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x752*x756))+(((-1.0)*x750*x754))+(((-1.0)*x751*x753))+(((-1.0)*x751*x755))+((x750*x752))+((x754*x756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x752*x755))+(((-1.0)*x752*x753))+(((-1.0)*x750*x751))+((r22*x756))+((x753*x754))+((x754*x755))))+IKsqr(((((-1.0)*x752*x756))+(((-1.0)*x750*x754))+(((-1.0)*x751*x753))+(((-1.0)*x751*x755))+((x750*x752))+((x754*x756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x752*x755))+(((-1.0)*x752*x753))+(((-1.0)*x750*x751))+((r22*x756))+((x753*x754))+((x754*x755))), ((((-1.0)*x752*x756))+(((-1.0)*x750*x754))+(((-1.0)*x751*x753))+(((-1.0)*x751*x755))+((x750*x752))+((x754*x756))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x757=IKcos(j2);
IkReal x758=IKsin(j2);
IkReal x759=((0.08)*cj5);
IkReal x760=((1.0)*sj4);
IkReal x761=(cj5*r00);
IkReal x762=(r10*sj0);
IkReal x763=(cj5*r20);
IkReal x764=((1.0)*sj0);
IkReal x765=(r21*sj5);
IkReal x766=((1.0)*cj4);
IkReal x767=(cj1*x757);
IkReal x768=(cj1*x758);
IkReal x769=(sj1*x757);
IkReal x770=(r11*sj0*sj5);
IkReal x771=(cj0*x766);
IkReal x772=(sj1*x758);
IkReal x773=(cj0*r01*sj5);
IkReal x774=((1.0)*x772);
evalcond[0]=(((cj4*r22))+((sj4*x765))+x768+x769+(((-1.0)*x760*x763)));
evalcond[1]=((((-1.0)*x765*x766))+((r22*sj4))+((cj4*x763))+x767+(((-1.0)*x774)));
evalcond[2]=((((-0.444)*cj1))+(((-0.11)*x767))+(((0.47)*x769))+(((0.47)*x768))+(((0.11)*x772))+(((-0.08)*x765))+pz+((r20*x759)));
evalcond[3]=((((-1.0)*cj4*r12*x764))+((cj5*sj4*x762))+(((-1.0)*r02*x771))+((cj0*sj4*x761))+x767+(((-1.0)*x774))+(((-1.0)*x760*x770))+(((-1.0)*x760*x773)));
evalcond[4]=((((-1.0)*cj5*x762*x766))+(((-1.0)*r12*sj0*x760))+(((-1.0)*cj0*r02*x760))+(((-1.0)*x769))+(((-1.0)*x768))+((cj4*x770))+((cj4*x773))+(((-1.0)*x761*x771)));
evalcond[5]=((((0.08)*x773))+(((0.08)*x770))+(((-1.0)*py*x764))+(((0.47)*x767))+(((0.11)*x769))+(((0.11)*x768))+(((-0.47)*x772))+(((-1.0)*cj0*r00*x759))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((-1.0)*x759*x762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x775=((0.08)*sj5);
IkReal x776=(rxp0_2*sj5);
IkReal x777=((0.08)*cj5);
IkReal x778=(cj5*rxp1_2);
j0eval[0]=((((-12.5)*x778))+(((-12.5)*x776))+r22);
j0eval[1]=((IKabs(((((-1.0)*r10*x777))+(((-1.0)*py))+((r11*x775)))))+(IKabs(((((-1.0)*px))+((r01*x775))+(((-1.0)*r00*x777))))));
j0eval[2]=IKsign(((((-1.0)*x778))+(((-1.0)*x776))+(((0.08)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x779=((1.0)*cj5);
IkReal x780=(cj4*sj5);
IkReal x781=((1.0)*sj4);
IkReal x782=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x779)));
j0eval[0]=x782;
j0eval[1]=IKsign(x782);
j0eval[2]=((IKabs((((r01*x780))+(((-1.0)*r02*x781))+(((-1.0)*cj4*r00*x779)))))+(IKabs(((((-1.0)*cj4*r10*x779))+(((-1.0)*r12*x781))+((r11*x780))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x783=cj5*cj5;
IkReal x784=r20*r20;
IkReal x785=((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x783*(r21*r21)))+x784+(((-1.0)*x783*x784)));
j0eval[0]=x785;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x785);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x786=((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))));
IkReal x793 = x786;
if(IKabs(x793)==0){
continue;
}
IkReal x787=pow(x793,-0.5);
if((x786) < -0.00001)
continue;
IkReal x788=IKabs(IKsqrt(x786));
IkReal x789=((12.5)*x787);
CheckValue<IkReal> x794=IKPowWithIntegerCheck(x788,-1);
if(!x794.valid){
continue;
}
IkReal x790=x794.value;
IkReal x791=(r22*x790);
if((((1.0)+(((-1.0)*(x791*x791))))) < -0.00001)
continue;
IkReal x792=IKsqrt(((1.0)+(((-1.0)*(x791*x791)))));
if( (x791) < -1-IKFAST_SINCOS_THRESH || (x791) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal(((-12.5)*rxp1_2)),IkReal(((-12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
IkReal gconst76=((((-1.0)*(IKasin(x791))))+(((-1.0)*(x795.value))));
IkReal gconst77=(((rxp1_2*x789*x792))+((rxp0_2*x789*x791)));
IkReal gconst78=((((-1.0)*rxp0_2*x789*x792))+((rxp1_2*x789*x791)));
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal(((-12.5)*rxp1_2)),IkReal(((-12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
if((((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKabs(IKsqrt(((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2)))))),-1);
if(!x797.valid){
continue;
}
if( ((r22*(x797.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x797.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x796.value)+(IKasin((r22*(x797.value))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x798=((0.08)*gconst78);
IkReal x799=((0.08)*gconst77);
CheckValue<IkReal> x800=IKPowWithIntegerCheck(IKsign((((r22*((((gconst78*x798))+((gconst77*x799))))))+(((-1.0)*gconst78*rxp1_2))+(((-1.0)*gconst77*rxp0_2)))),-1);
if(!x800.valid){
continue;
}
CheckValue<IkReal> x801 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r10*x798))+((r11*x799)))),IkReal((((r01*x799))+(((-1.0)*r00*x798))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x801.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x800.value)))+(x801.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x802=IKsin(j0);
IkReal x803=IKcos(j0);
IkReal x804=((0.08)*gconst77);
IkReal x805=((1.0)*gconst78);
IkReal x806=((1.0)*cj4);
IkReal x807=(r11*x803);
IkReal x808=((1.0)*gconst77*r10);
IkReal x809=(gconst77*x802);
IkReal x810=((1.0)*x803);
IkReal x811=(r00*x802);
IkReal x812=(r02*x802);
IkReal x813=(r01*x802);
IkReal x814=(gconst78*r10*x803);
evalcond[0]=((-1.0)+((gconst78*x813))+(((-1.0)*x805*x807))+(((-1.0)*x803*x808))+((r00*x809)));
evalcond[1]=((((-1.0)*r01*x803*x805))+(((-1.0)*gconst77*r00*x810))+(((-1.0)*r11*x802*x805))+(((-1.0)*x802*x808)));
evalcond[2]=(((x804*x807))+(((-1.0)*py*x810))+(((0.08)*gconst78*x811))+((px*x802))+(((-1.0)*x804*x813))+(((-0.08)*x814)));
evalcond[3]=(((sj4*x814))+((cj4*x812))+((r01*sj4*x809))+(((-1.0)*sj4*x805*x811))+(((-1.0)*gconst77*sj4*x807))+(((-1.0)*r12*x803*x806)));
evalcond[4]=((((-1.0)*r01*x806*x809))+((sj4*x812))+(((-1.0)*r12*sj4*x810))+(((-1.0)*cj4*r10*x803*x805))+((cj4*gconst78*x811))+((cj4*gconst77*x807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x815=(r22*sj4);
IkReal x816=(gconst78*r20);
IkReal x817=(gconst77*r21);
IkReal x818=(cj4*x816);
IkReal x819=((0.08)*x816);
IkReal x820=((0.08)*x817);
IkReal x821=((1.0)*cj4*x817);
IkReal x822=(pz+x819);
IkReal x823=(x818+x815);
IkReal x824=((-0.554)+(((-1.0)*x820))+x822);
IkReal x825=((-0.334)+(((-1.0)*x820))+x822);
IkReal x826=((0.554)+(((-1.0)*x820))+x822);
IkReal x827=((0.334)+(((-1.0)*x820))+x822);
IkReal x828=((-1.0)+(((-1.0)*x821))+x823);
IkReal x829=((1.0)+(((-1.0)*x821))+x823);
IkReal gconst82=x828;
IkReal gconst83=x829;
IkReal gconst84=x824;
IkReal gconst85=x825;
IkReal gconst86=x828;
IkReal gconst87=x829;
IkReal gconst88=x824;
IkReal gconst89=x825;
IkReal gconst90=x829;
IkReal gconst91=x828;
IkReal gconst92=x826;
IkReal gconst93=x827;
IkReal gconst94=x829;
IkReal gconst95=x828;
IkReal gconst96=x826;
IkReal gconst97=x827;
IkReal x830=((3.5344)*gconst91);
IkReal x831=((3.5344)*gconst94);
IkReal x832=((3.5344)*gconst83);
IkReal x833=((3.5344)*gconst86);
IkReal x834=((0.94)*gconst90);
IkReal x835=(gconst86*gconst93);
IkReal x836=(gconst85*gconst95);
IkReal x837=(gconst83*gconst89);
IkReal x838=(gconst92*gconst94);
IkReal x839=(gconst88*gconst91);
IkReal x840=(gconst84*gconst86);
IkReal x841=(gconst89*gconst91);
IkReal x842=(gconst82*gconst94);
IkReal x843=(gconst83*gconst96);
IkReal x844=(gconst86*gconst89);
IkReal x845=(gconst82*gconst96);
IkReal x846=((0.94)*gconst95);
IkReal x847=(gconst87*gconst96);
IkReal x848=(gconst90*gconst96);
IkReal x849=(gconst87*gconst93);
IkReal x850=((0.8836)*gconst95);
IkReal x851=((0.94)*gconst82);
IkReal x852=(gconst90*gconst94);
IkReal x853=(gconst93*gconst95);
IkReal x854=(gconst91*gconst97);
IkReal x855=((0.94)*gconst86);
IkReal x856=(gconst83*gconst88);
IkReal x857=((3.76)*gconst85);
IkReal x858=(gconst94*gconst97);
IkReal x859=(gconst86*gconst90);
IkReal x860=((1.0)*gconst89);
IkReal x861=(gconst87*gconst88);
IkReal x862=((0.8836)*gconst87);
IkReal x863=((0.94)*gconst87);
IkReal x864=(gconst83*gconst97);
IkReal x865=((0.94)*gconst83);
IkReal x866=(gconst82*gconst88);
IkReal x867=(gconst93*gconst94);
IkReal x868=(gconst85*gconst90);
IkReal x869=(gconst95*gconst96);
IkReal x870=(gconst85*gconst86);
IkReal x871=(gconst91*gconst94);
IkReal x872=(gconst91*gconst96);
IkReal x873=((1.0)*gconst95);
IkReal x874=(gconst84*gconst94);
IkReal x875=(gconst82*gconst86);
IkReal x876=(gconst86*gconst92);
IkReal x877=(gconst88*gconst90);
IkReal x878=(gconst91*gconst92);
IkReal x879=((16.0)*gconst93);
IkReal x880=(gconst83*gconst84);
IkReal x881=(gconst84*gconst91);
IkReal x882=((0.94)*gconst94);
IkReal x883=(gconst85*gconst87);
IkReal x884=((1.0)*gconst97);
IkReal x885=(gconst83*gconst92);
IkReal x886=((1.0)*gconst87);
IkReal x887=((0.8836)*gconst86);
IkReal x888=(gconst86*gconst97);
IkReal x889=(gconst85*gconst94);
IkReal x890=(gconst82*gconst85);
IkReal x891=(gconst86*gconst91);
IkReal x892=(gconst83*gconst94);
IkReal x893=((16.0)*gconst85);
IkReal x894=((0.94)*gconst91);
IkReal x895=(gconst83*gconst86);
IkReal x896=((3.76)*x872);
IkReal x897=((3.76)*x867);
IkReal x898=((0.8272)*x871);
IkReal x899=((0.8836)*x871);
IkReal x900=((3.76)*x843);
IkReal x901=((3.76)*x839);
IkReal x902=((3.76)*x835);
IkReal x903=(gconst94*x857);
IkReal x904=((0.8272)*x892);
IkReal x905=((0.8272)*x891);
IkReal x906=(gconst91*x887);
IkReal x907=((0.8836)*x892);
IkReal x908=((3.76)*x856);
IkReal x909=(gconst86*x857);
IkReal x910=((0.8272)*x895);
IkReal x911=(gconst83*x887);
IkReal x912=(gconst83*x863);
IkReal x913=((1.0)*x878);
IkReal x914=(gconst93*x860);
IkReal x915=(gconst85*x884);
IkReal x916=((1.0)*x881);
IkReal x917=(x906+x907);
IkReal x918=(x908+x909);
IkReal x919=(x904+x905);
IkReal x920=(x896+x897);
IkReal x921=(x900+x901+x902+x903);
op[0]=(((x848*x853))+(((-1.0)*x899))+(((-1.0)*x869*x913))+((x838*x854))+(((-1.0)*gconst93*x852*x884)));
op[1]=((((-1.0)*x846*x872))+(((-1.0)*x846*x878))+(((-1.0)*x920))+((x834*x858))+((x834*x853))+(((-1.0)*x834*x869))+((x834*x867))+((x854*x882))+(((-1.0)*x838*x894))+x898);
op[2]=((((-1.0)*gconst90*x850))+(((1.76)*x867))+(((-0.8836)*x852))+((x838*x841))+((gconst90*gconst93*x847))+(((-1.0)*gconst93*x842*x884))+((x845*x853))+(((-1.0)*x917))+(((-1.0)*x869*x916))+((x836*x848))+(((-1.0)*gconst96*x879))+(((-1.0)*x830))+(((-1.0)*gconst92*x843*x873))+(((0.69)*x871))+(((-1.0)*gconst92*x839*x873))+((x853*x877))+((x838*x864))+((x854*x876))+((x854*x874))+x831+(((-1.0)*x852*x915))+(((-1.0)*x852*x914))+(((-1.0)*x847*x913))+(((-1.0)*gconst91*x850))+(((1.76)*x872))+(((-1.0)*gconst90*x835*x884)));
op[3]=(((gconst82*gconst93*x846))+(((-1.0)*x921))+(((-15.04)*gconst93))+(((-1.0)*gconst88*gconst95*x834))+(((0.94)*gconst93*x842))+((x841*x882))+(((-1.0)*x898))+(((-1.0)*x846*x885))+(((-1.0)*x846*x881))+(((-1.0)*x838*x865))+(((-1.0)*x843*x846))+((x834*x888))+((x834*x889))+((x858*x865))+(((-1.0)*x834*x847))+(((-1.6544)*gconst94))+(((0.94)*gconst97*x842))+((x834*x849))+((x854*x855))+((x834*x835))+((x834*x836))+((gconst89*gconst94*x834))+(((-1.0)*x839*x846))+(((-1.0)*x845*x846))+(((-1.0)*x847*x894))+(((1.6544)*gconst91))+x920+x919+(((-1.0)*x863*x878))+(((-0.94)*gconst84*x871))+(((-1.0)*x855*x878))+(((15.04)*gconst96)));
op[4]=((14.1376)+(((-1.0)*gconst83*x850))+(((-0.8836)*x859))+((x836*x877))+(((-1.0)*gconst92*x839*x886))+(((-1.0)*gconst91*x862))+(((-1.0)*gconst84*x839*x873))+(((-1.0)*gconst82*x850))+(((-1.0)*gconst90*x862))+(((-1.0)*gconst92*x843*x886))+(((-1.0)*x842*x914))+(((-1.0)*x842*x915))+(((-1.0)*gconst82*x835*x884))+(((1.76)*x843))+(((-1.0)*x899))+((x841*x876))+((x841*x874))+(((-1.0)*x911))+(((-1.0)*gconst84*x843*x873))+(((1.76)*x839))+(((1.76)*x835))+(((-1.0)*gconst88*x879))+(((-1.0)*gconst92*x856*x873))+(((0.69)*x891))+(((0.69)*x892))+((x836*x845))+((x837*x838))+(((-1.0)*gconst90*x835*x860))+(((-0.8836)*x842))+(((-1.0)*x832))+(((-1.0)*x831))+(((1.76)*x889))+((x847*x868))+(((-1.0)*gconst96*x893))+((x853*x866))+((x840*x854))+((x845*x849))+((x849*x877))+((x858*x880))+((x864*x876))+x830+x833+(((-1.0)*x859*x915))+(((-1.0)*x847*x916))+(((-1.0)*gconst85*x852*x860)));
op[5]=((((-1.0)*x845*x863))+(((-1.0)*x846*x866))+(((-1.0)*x846*x856))+(((-15.04)*gconst85))+((x834*x870))+(((1.6544)*gconst83))+(((-1.0)*x834*x861))+(((-1.0)*x918))+(((-1.0)*x919))+(((-1.0)*x863*x885))+(((-1.0)*x863*x881))+(((0.94)*gconst89*x842))+((x855*x864))+(((0.94)*gconst85*x842))+(((-1.0)*x846*x880))+(((-1.0)*x840*x894))+(((-1.0)*x839*x863))+(((-1.0)*x855*x885))+((x834*x883))+((x841*x855))+(((15.04)*gconst88))+(((-1.6544)*gconst86))+((x834*x844))+(((-1.0)*x843*x863))+((x837*x882))+((x835*x851))+((x851*x888))+((x849*x851))+x921+x910+((x836*x851))+(((-1.0)*x865*x874)));
op[6]=(((x837*x876))+((x837*x874))+((x836*x866))+(((-1.0)*gconst92*x856*x886))+(((-1.0)*x844*x868))+(((-0.8836)*x875))+((x840*x841))+(((-1.0)*x917))+(((-1.0)*gconst84*x856*x873))+(((-1.0)*gconst82*x862))+(((0.69)*x895))+((x845*x883))+(((-1.0)*x833))+((x861*x868))+(((-1.0)*gconst88*x893))+((x849*x866))+x832+(((-1.0)*gconst82*x835*x860))+(((-1.0)*gconst84*x839*x886))+(((-1.0)*gconst85*x842*x860))+(((1.76)*x856))+((x840*x864))+(((-1.0)*gconst83*x862))+(((-1.0)*gconst84*x843*x886))+(((-1.0)*gconst82*x870*x884))+(((1.76)*x870)));
op[7]=((((-1.0)*x910))+(((-1.0)*x863*x880))+((x844*x851))+((x851*x870))+(((-1.0)*x851*x861))+(((-1.0)*x856*x863))+((x851*x883))+(((-1.0)*x840*x865))+((x837*x855))+x918);
op[8]=((((-1.0)*x844*x890))+(((-1.0)*gconst84*x856*x886))+(((-1.0)*x911))+((x837*x840))+((x861*x890)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x922=((1.0)*r22);
IkReal x923=(cj1*cj4);
IkReal x924=(sj1*sj4);
IkReal x925=(cj4*sj1);
IkReal x926=(gconst77*r21);
IkReal x927=(gconst78*r20);
IkReal x928=(cj1*sj4);
IkReal x929=(sj4*x927);
if( IKabs(((((-1.0)*x925*x927))+((x927*x928))+(((-1.0)*x926*x928))+((x925*x926))+(((-1.0)*x922*x923))+(((-1.0)*x922*x924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x928))+((x924*x927))+(((-1.0)*x923*x926))+((x923*x927))+(((-1.0)*x924*x926))+(((-1.0)*x922*x925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x925*x927))+((x927*x928))+(((-1.0)*x926*x928))+((x925*x926))+(((-1.0)*x922*x923))+(((-1.0)*x922*x924))))+IKsqr((((r22*x928))+((x924*x927))+(((-1.0)*x923*x926))+((x923*x927))+(((-1.0)*x924*x926))+(((-1.0)*x922*x925))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x925*x927))+((x927*x928))+(((-1.0)*x926*x928))+((x925*x926))+(((-1.0)*x922*x923))+(((-1.0)*x922*x924))), (((r22*x928))+((x924*x927))+(((-1.0)*x923*x926))+((x923*x927))+(((-1.0)*x924*x926))+(((-1.0)*x922*x925))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x930=IKsin(j2);
IkReal x931=IKcos(j2);
IkReal x932=(cj4*gconst77);
IkReal x933=(r11*sj0);
IkReal x934=(gconst78*r20);
IkReal x935=((1.0)*sj4);
IkReal x936=((1.0)*cj4);
IkReal x937=(cj0*r02);
IkReal x938=(cj0*r01);
IkReal x939=(gconst77*r21);
IkReal x940=((0.08)*gconst77);
IkReal x941=(r12*sj0);
IkReal x942=(sj1*x931);
IkReal x943=(cj1*x930);
IkReal x944=(cj1*x931);
IkReal x945=(sj1*x930);
IkReal x946=(cj0*gconst78*r00);
IkReal x947=(gconst78*r10*sj0);
IkReal x948=(x942+x943);
evalcond[0]=(((cj4*r22))+(((-1.0)*x934*x935))+((sj4*x939))+x948);
evalcond[1]=((((-1.0)*r21*x932))+((r22*sj4))+(((-1.0)*x944))+((cj4*x934))+x945);
evalcond[2]=((((0.08)*x934))+(((0.47)*x942))+(((0.47)*x943))+(((-0.444)*cj1))+(((-0.08)*x939))+(((0.11)*x945))+pz+(((-0.11)*x944)));
evalcond[3]=((((-1.0)*x935*x937))+(((-1.0)*x936*x947))+(((-1.0)*x936*x946))+x948+(((-1.0)*x935*x941))+((x932*x933))+((x932*x938)));
evalcond[4]=((((-1.0)*x945))+(((-1.0)*gconst77*x933*x935))+(((-1.0)*gconst77*x935*x938))+((sj4*x947))+((sj4*x946))+(((-1.0)*x936*x937))+(((-1.0)*x936*x941))+x944);
evalcond[5]=((((-0.08)*x946))+(((-0.08)*x947))+((x933*x940))+(((0.47)*x944))+(((0.11)*x942))+(((0.11)*x943))+((x938*x940))+(((-1.0)*py*sj0))+(((-0.47)*x945))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x949=((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))));
IkReal x956 = x949;
if(IKabs(x956)==0){
continue;
}
IkReal x950=pow(x956,-0.5);
if((x949) < -0.00001)
continue;
IkReal x951=IKabs(IKsqrt(x949));
IkReal x952=((12.5)*x950);
CheckValue<IkReal> x957=IKPowWithIntegerCheck(x951,-1);
if(!x957.valid){
continue;
}
IkReal x953=x957.value;
IkReal x954=(r22*x953);
if((((1.0)+(((-1.0)*(x954*x954))))) < -0.00001)
continue;
IkReal x955=IKsqrt(((1.0)+(((-1.0)*(x954*x954)))));
if( (x954) < -1-IKFAST_SINCOS_THRESH || (x954) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal(((-12.5)*rxp1_2)),IkReal(((-12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
IkReal gconst79=((3.14159265358979)+(IKasin(x954))+(((-1.0)*(x958.value))));
IkReal gconst80=((((-1.0)*rxp1_2*x952*x955))+((rxp0_2*x952*x954)));
IkReal gconst81=(((rxp1_2*x952*x954))+((rxp0_2*x952*x955)));
CheckValue<IkReal> x959 = IKatan2WithCheck(IkReal(((-12.5)*rxp1_2)),IkReal(((-12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x959.valid){
continue;
}
if((((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKabs(IKsqrt(((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2)))))),-1);
if(!x960.valid){
continue;
}
if( ((r22*(x960.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x960.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x959.value)+(((-1.0)*(IKasin((r22*(x960.value))))))+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x961=((0.08)*gconst81);
IkReal x962=((0.08)*gconst80);
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x961))+(((-1.0)*py))+((r11*x962)))),IkReal(((((-1.0)*r00*x961))+(((-1.0)*px))+((r01*x962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
CheckValue<IkReal> x964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst80*rxp0_2))+(((-1.0)*gconst81*rxp1_2))+((r22*((((gconst81*x961))+((gconst80*x962)))))))),-1);
if(!x964.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x963.value)+(((1.5707963267949)*(x964.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x965=IKsin(j0);
IkReal x966=IKcos(j0);
IkReal x967=((1.0)*gconst80);
IkReal x968=((0.08)*gconst80);
IkReal x969=(gconst81*r10);
IkReal x970=(r11*x966);
IkReal x971=(r01*x965);
IkReal x972=(gconst81*x965);
IkReal x973=((1.0)*x966);
IkReal x974=(r02*x965);
evalcond[0]=((-1.0)+(((-1.0)*r10*x966*x967))+((gconst80*r00*x965))+((gconst81*x971))+(((-1.0)*gconst81*x970)));
evalcond[1]=((((-1.0)*r10*x965*x967))+(((-1.0)*gconst81*r01*x973))+(((-1.0)*r00*x966*x967))+(((-1.0)*r11*x972)));
evalcond[2]=((((-0.08)*x966*x969))+((px*x965))+(((-1.0)*py*x973))+((x968*x970))+(((0.08)*r00*x972))+(((-1.0)*x968*x971)));
evalcond[3]=((((-1.0)*r00*sj4*x972))+((cj4*x974))+(((-1.0)*cj4*r12*x973))+((gconst80*sj4*x971))+((sj4*x966*x969))+(((-1.0)*sj4*x967*x970)));
evalcond[4]=(((sj4*x974))+(((-1.0)*cj4*x967*x971))+(((-1.0)*cj4*x969*x973))+((cj4*r00*x972))+(((-1.0)*r12*sj4*x973))+((cj4*gconst80*x970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x975=(r22*sj4);
IkReal x976=(gconst80*r21);
IkReal x977=(gconst81*r20);
IkReal x978=(cj4*x977);
IkReal x979=((0.08)*x977);
IkReal x980=((0.08)*x976);
IkReal x981=((1.0)*cj4*x976);
IkReal x982=(pz+x979);
IkReal x983=(x975+x978);
IkReal x984=((-0.554)+(((-1.0)*x980))+x982);
IkReal x985=((-0.334)+(((-1.0)*x980))+x982);
IkReal x986=((0.554)+(((-1.0)*x980))+x982);
IkReal x987=((0.334)+(((-1.0)*x980))+x982);
IkReal x988=((-1.0)+(((-1.0)*x981))+x983);
IkReal x989=((1.0)+(((-1.0)*x981))+x983);
IkReal gconst114=x988;
IkReal gconst115=x989;
IkReal gconst116=x984;
IkReal gconst117=x985;
IkReal gconst118=x988;
IkReal gconst119=x989;
IkReal gconst120=x984;
IkReal gconst121=x985;
IkReal gconst122=x989;
IkReal gconst123=x988;
IkReal gconst124=x986;
IkReal gconst125=x987;
IkReal gconst126=x989;
IkReal gconst127=x988;
IkReal gconst128=x986;
IkReal gconst129=x987;
IkReal x990=((3.5344)*gconst123);
IkReal x991=((3.5344)*gconst126);
IkReal x992=((3.5344)*gconst115);
IkReal x993=((3.5344)*gconst118);
IkReal x994=(gconst119*gconst128);
IkReal x995=((0.94)*gconst114);
IkReal x996=(gconst127*gconst128);
IkReal x997=((1.0)*gconst123);
IkReal x998=(gconst117*gconst122);
IkReal x999=(gconst114*gconst118);
IkReal x1000=(gconst126*gconst129);
IkReal x1001=(gconst115*gconst124);
IkReal x1002=((0.8836)*gconst115);
IkReal x1003=((0.94)*gconst118);
IkReal x1004=(gconst115*gconst121);
IkReal x1005=(gconst122*gconst129);
IkReal x1006=(gconst115*gconst116);
IkReal x1007=((0.94)*gconst123);
IkReal x1008=((0.94)*gconst120);
IkReal x1009=((1.76)*gconst120);
IkReal x1010=(gconst119*gconst120);
IkReal x1011=((1.0)*gconst125);
IkReal x1012=(gconst121*gconst126);
IkReal x1013=(gconst119*gconst122);
IkReal x1014=(gconst120*gconst127);
IkReal x1015=(gconst116*gconst126);
IkReal x1016=(gconst117*gconst126);
IkReal x1017=((0.8272)*gconst115);
IkReal x1018=((0.8836)*gconst122);
IkReal x1019=((1.0)*gconst121);
IkReal x1020=((3.76)*gconst125);
IkReal x1021=((16.0)*gconst117);
IkReal x1022=((3.76)*gconst120);
IkReal x1023=(gconst123*gconst128);
IkReal x1024=(gconst118*gconst129);
IkReal x1025=(gconst123*gconst124);
IkReal x1026=(gconst114*gconst117);
IkReal x1027=((0.94)*gconst127);
IkReal x1028=(gconst114*gconst125);
IkReal x1029=((0.94)*gconst122);
IkReal x1030=(gconst118*gconst121);
IkReal x1031=(gconst117*gconst118);
IkReal x1032=(gconst116*gconst123);
IkReal x1033=((0.8836)*gconst126);
IkReal x1034=(gconst122*gconst125);
IkReal x1035=((0.94)*gconst126);
IkReal x1036=((0.69)*gconst123);
IkReal x1037=((0.94)*gconst115);
IkReal x1038=((0.94)*gconst119);
IkReal x1039=(gconst118*gconst125);
IkReal x1040=((0.8836)*gconst127);
IkReal x1041=((0.8272)*gconst123);
IkReal x1042=((0.8836)*gconst123);
IkReal x1043=(gconst115*gconst128);
IkReal x1044=((0.69)*gconst115);
IkReal x1045=((16.0)*gconst125);
IkReal x1046=(gconst125*gconst126);
IkReal x1047=(gconst126*x1020);
IkReal x1048=((3.76)*x1023);
IkReal x1049=(gconst126*x1041);
IkReal x1050=(gconst123*x1033);
IkReal x1051=((3.76)*x1043);
IkReal x1052=((3.76)*x1016);
IkReal x1053=(gconst118*x1020);
IkReal x1054=(gconst123*x1022);
IkReal x1055=(gconst126*x1017);
IkReal x1056=(gconst118*x1041);
IkReal x1057=(gconst126*x1002);
IkReal x1058=(gconst118*x1042);
IkReal x1059=(gconst115*x1022);
IkReal x1060=((3.76)*x1031);
IkReal x1061=(gconst118*x1017);
IkReal x1062=(gconst118*x1002);
IkReal x1063=(gconst125*x1029);
IkReal x1064=(gconst118*x1032);
IkReal x1065=((1.0)*gconst117*x1000);
IkReal x1066=(x1057+x1058);
IkReal x1067=(x1059+x1060);
IkReal x1068=(x1055+x1056);
IkReal x1069=(x1047+x1048);
IkReal x1070=(x1051+x1052+x1053+x1054);
op[0]=((((-1.0)*gconst124*x996*x997))+(((-1.0)*x1050))+(((-1.0)*gconst122*x1000*x1011))+((x1000*x1025))+((x1034*x996)));
op[1]=(x1049+((x1000*x1029))+((x1000*x1007))+(((-1.0)*gconst124*gconst127*x1007))+(((-1.0)*x1007*x996))+((x1027*x1034))+((x1029*x1046))+(((-1.0)*x1069))+(((-1.0)*gconst124*gconst126*x1007))+(((-1.0)*x1029*x996)));
op[2]=((((-1.0)*gconst116*x996*x997))+(((-1.0)*gconst123*x1040))+((x1028*x996))+((x1000*x1032))+(((-1.0)*gconst127*x1018))+(((-1.0)*x1001*x996))+((x1000*x1001))+(((1.76)*x1046))+(((-1.0)*gconst128*x1045))+(((-1.0)*gconst118*x1005*x1011))+(((-1.0)*gconst114*x1000*x1011))+(((-1.0)*gconst124*x994*x997))+(((-1.0)*x990))+(((-1.0)*gconst122*x1011*x1012))+((x1012*x1025))+(((-1.0)*gconst124*x1014*x997))+((x1034*x994))+((x996*x998))+((x1024*x1025))+(((-1.0)*x1066))+((x1014*x1034))+(((-1.0)*x1000*x998))+x991+(((1.76)*x1023))+((gconst126*x1036))+(((-1.0)*gconst126*x1018)));
op[3]=(((x1003*x1034))+((x1000*x995))+(((1.6544)*gconst123))+(((0.94)*gconst125*x1013))+(((-15.04)*gconst125))+(((-1.0)*gconst119*gconst124*x1007))+x1069+x1068+((gconst125*gconst127*x995))+(((-1.6544)*gconst126))+((x1000*x1037))+((gconst123*gconst129*x1003))+((x1035*x998))+(((-1.0)*x995*x996))+((x1046*x995))+(((-1.0)*x1007*x994))+(((-1.0)*x1037*x996))+(((-1.0)*x1003*x1025))+(((-1.0)*x1001*x1027))+((x1027*x998))+(((15.04)*gconst128))+((x1012*x1029))+(((-1.0)*x1007*x1015))+(((-1.0)*x1007*x1014))+(((-1.0)*gconst116*gconst127*x1007))+(((-1.0)*x1001*x1035))+((x1007*x1012))+(((-1.0)*gconst122*gconst127*x1008))+(((-1.0)*x1070))+(((-1.0)*x1049))+((x1003*x1005))+(((-1.0)*x1029*x994)));
op[4]=((14.1376)+(((-1.0)*gconst116*x994*x997))+(((-1.0)*x1050))+(((1.76)*x1016))+((x1014*x998))+((x1010*x1034))+((x1028*x994))+((x994*x998))+(((-1.0)*gconst118*x1018))+((gconst126*x1044))+((x1026*x996))+(((-1.0)*gconst119*x1042))+(((-1.0)*gconst114*x1033))+(((-1.0)*gconst127*x1002))+(((-0.8836)*x1013))+(((1.76)*x1039))+(((-1.0)*x1000*x1026))+((x1014*x1028))+(((-1.0)*x1001*x994))+(((-1.0)*x1006*x996))+((x1000*x1006))+(((-1.0)*gconst129*x1011*x999))+(((1.76)*x1043))+(((-1.0)*x1012*x998))+((gconst118*x1036))+(((-1.0)*x1024*x998))+(((-1.0)*x1001*x1014))+(((-1.0)*gconst124*x1010*x997))+(((-1.0)*gconst116*x1014*x997))+(((-1.0)*x991))+(((-1.0)*x992))+((x1001*x1024))+((x1012*x1032))+(((-1.0)*gconst114*x1011*x1012))+(((-1.0)*gconst120*x1045))+((x1001*x1012))+((x1024*x1032))+(((-1.0)*gconst114*x1040))+((x1025*x1030))+(((-1.0)*gconst122*x1011*x1030))+(((-1.0)*x1062))+(((-1.0)*gconst128*x1021))+x993+x990+((gconst123*x1009)));
op[5]=(((x1038*x998))+((gconst117*gconst127*x995))+(((-1.6544)*gconst118))+x1070+x1061+(((-1.0)*x994*x995))+(((-1.0)*gconst116*gconst119*x1007))+((x1003*x998))+(((1.6544)*gconst115))+(((-15.04)*gconst117))+((gconst119*gconst125*x995))+((gconst115*gconst129*x1003))+(((-1.0)*x1008*x1013))+(((-1.0)*x1037*x994))+(((-1.0)*x1006*x1035))+((x1004*x1035))+((x1024*x995))+(((15.04)*gconst120))+(((-1.0)*gconst115*gconst127*x1008))+(((-1.0)*x1001*x1003))+(((-1.0)*x1003*x1032))+(((-1.0)*x1007*x1010))+(((-1.0)*x1068))+(((-1.0)*x1067))+(((-1.0)*x1001*x1038))+((x1012*x995))+((gconst121*gconst123*x1003))+((x1016*x995))+((x1039*x995))+((gconst121*gconst122*x1003))+(((-1.0)*x1006*x1027))+(((-1.0)*x1014*x995)));
op[6]=(((x1010*x1028))+(((-1.0)*x1012*x1026))+((x1030*x1032))+((gconst115*x1009))+(((-0.8836)*x999))+((x1026*x994))+(((1.76)*x1031))+((x1010*x998))+((x1014*x1026))+(((-1.0)*gconst116*x1010*x997))+(((-1.0)*x1006*x994))+(((-1.0)*gconst120*x1021))+(((-1.0)*gconst121*x1011*x999))+(((-0.8836)*gconst114*gconst119))+(((-1.0)*x1001*x1010))+(((-1.0)*x1006*x1014))+(((-1.0)*x993))+(((-1.0)*gconst119*x1002))+((x1006*x1024))+((x1004*x1015))+(((-1.0)*gconst117*gconst129*x999))+((gconst118*x1044))+(((-1.0)*x1066))+((x1001*x1030))+(((-1.0)*gconst118*x1019*x998))+x992);
op[7]=(((gconst117*gconst119*x995))+((x1031*x995))+x1067+((x1030*x995))+(((-1.0)*x1010*x995))+(((-1.0)*x1006*x1038))+(((-1.0)*gconst115*gconst119*x1008))+(((-1.0)*x1061))+(((-1.0)*x1003*x1006))+((x1003*x1004)));
op[8]=(((x1010*x1026))+(((-1.0)*gconst117*x1019*x999))+(((-1.0)*x1006*x1010))+(((-1.0)*x1062))+((gconst116*gconst118*x1004)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1071=((1.0)*cj4);
IkReal x1072=(cj1*r22);
IkReal x1073=(gconst81*r20);
IkReal x1074=(r22*sj1);
IkReal x1075=((1.0)*sj4);
IkReal x1076=(gconst80*r21);
if( IKabs(((((-1.0)*sj1*x1071*x1073))+(((-1.0)*x1074*x1075))+((cj1*sj4*x1073))+(((-1.0)*x1071*x1072))+(((-1.0)*cj1*x1075*x1076))+((cj4*sj1*x1076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x1073))+(((-1.0)*x1071*x1074))+(((-1.0)*cj1*x1071*x1076))+((sj4*x1072))+(((-1.0)*sj1*x1075*x1076))+((cj1*cj4*x1073)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1071*x1073))+(((-1.0)*x1074*x1075))+((cj1*sj4*x1073))+(((-1.0)*x1071*x1072))+(((-1.0)*cj1*x1075*x1076))+((cj4*sj1*x1076))))+IKsqr((((sj1*sj4*x1073))+(((-1.0)*x1071*x1074))+(((-1.0)*cj1*x1071*x1076))+((sj4*x1072))+(((-1.0)*sj1*x1075*x1076))+((cj1*cj4*x1073))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x1071*x1073))+(((-1.0)*x1074*x1075))+((cj1*sj4*x1073))+(((-1.0)*x1071*x1072))+(((-1.0)*cj1*x1075*x1076))+((cj4*sj1*x1076))), (((sj1*sj4*x1073))+(((-1.0)*x1071*x1074))+(((-1.0)*cj1*x1071*x1076))+((sj4*x1072))+(((-1.0)*sj1*x1075*x1076))+((cj1*cj4*x1073))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1077=IKsin(j2);
IkReal x1078=IKcos(j2);
IkReal x1079=(cj4*gconst81);
IkReal x1080=(r10*sj0);
IkReal x1081=((1.0)*cj0);
IkReal x1082=((0.08)*gconst81);
IkReal x1083=(cj0*r00);
IkReal x1084=(gconst81*sj4);
IkReal x1085=((0.08)*gconst80);
IkReal x1086=((1.0)*sj0);
IkReal x1087=(cj0*r01);
IkReal x1088=(cj4*gconst80);
IkReal x1089=(gconst80*sj4);
IkReal x1090=(sj1*x1078);
IkReal x1091=(cj1*x1077);
IkReal x1092=(cj1*x1078);
IkReal x1093=(gconst80*r11*sj0);
IkReal x1094=(sj1*x1077);
IkReal x1095=(x1090+x1091);
evalcond[0]=(((cj4*r22))+x1095+(((-1.0)*r20*x1084))+((r21*x1089)));
evalcond[1]=(x1094+(((-1.0)*r21*x1088))+((r22*sj4))+(((-1.0)*x1092))+((r20*x1079)));
evalcond[2]=((((-1.0)*r21*x1085))+(((-0.444)*cj1))+(((-0.11)*x1092))+(((0.47)*x1091))+(((0.47)*x1090))+((r20*x1082))+pz+(((0.11)*x1094)));
evalcond[3]=(x1095+((r11*sj0*x1088))+(((-1.0)*x1079*x1080))+(((-1.0)*r12*sj4*x1086))+(((-1.0)*r02*sj4*x1081))+((x1087*x1088))+(((-1.0)*r00*x1079*x1081)));
evalcond[4]=((((-1.0)*r11*x1086*x1089))+x1092+(((-1.0)*cj4*r02*x1081))+(((-1.0)*x1094))+((x1080*x1084))+(((-1.0)*r01*x1081*x1089))+(((-1.0)*cj4*r12*x1086))+((x1083*x1084)));
evalcond[5]=((((-1.0)*py*x1086))+((r11*sj0*x1085))+(((0.47)*x1092))+(((-1.0)*x1080*x1082))+(((-0.47)*x1094))+(((0.11)*x1091))+(((0.11)*x1090))+(((-1.0)*x1082*x1083))+((x1085*x1087))+(((-1.0)*px*x1081))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1096=cj5*cj5;
CheckValue<IkReal> x1097=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x1096*(r21*r21)))+(((r20*r20)*(((1.0)+(((-1.0)*x1096)))))))),-1);
if(!x1097.valid){
continue;
}
CheckValue<IkReal> x1098 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1097.value)))+(x1098.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1099=IKsin(j0);
IkReal x1100=IKcos(j0);
IkReal x1101=(r11*sj5);
IkReal x1102=(cj5*r10);
IkReal x1103=((1.0)*r10);
IkReal x1104=(cj5*r01);
IkReal x1105=(cj5*r00);
IkReal x1106=(cj5*r11);
IkReal x1107=(sj5*x1099);
IkReal x1108=((0.08)*x1100);
IkReal x1109=(sj4*x1100);
IkReal x1110=((1.0)*x1100);
IkReal x1111=(cj4*x1099);
IkReal x1112=((1.0)*x1099);
IkReal x1113=(r12*x1110);
evalcond[0]=((-1.0)+((r00*x1107))+((x1099*x1104))+(((-1.0)*x1106*x1110))+(((-1.0)*sj5*x1100*x1103)));
evalcond[1]=((((-1.0)*x1103*x1107))+(((-1.0)*x1106*x1112))+(((-1.0)*x1104*x1110))+(((-1.0)*r00*sj5*x1110)));
evalcond[2]=((((-0.08)*r01*x1107))+((x1101*x1108))+(((-1.0)*py*x1110))+(((0.08)*x1099*x1105))+((px*x1099))+(((-1.0)*x1102*x1108)));
evalcond[3]=(((x1102*x1109))+(((-1.0)*cj4*x1113))+(((-1.0)*sj4*x1105*x1112))+((r01*sj4*x1107))+(((-1.0)*x1101*x1109))+((r02*x1111)));
evalcond[4]=(((r02*sj4*x1099))+(((-1.0)*cj4*x1102*x1110))+((x1105*x1111))+(((-1.0)*r12*x1109))+(((-1.0)*cj4*r01*x1107))+((cj4*x1100*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1114=((1.32)*pz);
IkReal x1115=((12.0)*pz);
IkReal x1116=(r22*sj4);
IkReal x1117=(cj5*r20);
IkReal x1118=((0.44)*cj4);
IkReal x1119=(r21*sj5);
IkReal x1120=((1.88)*sj4);
IkReal x1121=((5.64)*sj4);
IkReal x1122=((1.32)*cj4);
IkReal x1123=((2.796)*cj4);
IkReal x1124=((0.932)*cj4);
IkReal x1125=(cj0*px);
IkReal x1126=(cj4*r22);
IkReal x1127=(py*sj0);
IkReal x1128=((5.64)*x1125);
IkReal x1129=((0.1056)*x1117);
IkReal x1130=((5.64)*x1127);
IkReal x1131=((0.96)*x1117);
IkReal x1132=(cj0*cj5*r00);
IkReal x1133=(r11*sj0*sj5);
IkReal x1134=(cj5*r10*sj0);
IkReal x1135=(cj0*r01*sj5);
IkReal x1136=((0.4512)*x1132);
IkReal x1137=(x1119*x1123);
IkReal x1138=((0.4512)*x1134);
IkReal x1139=(x1119*x1122);
IkReal x1140=(x1117*x1121);
IkReal x1141=(x1115+x1140+x1139+x1131);
IkReal x1142=((((0.96)*x1119))+((x1119*x1121))+(((1.32)*x1116))+((x1117*x1122))+(((5.64)*x1126)));
IkReal x1143=((((0.4512)*x1133))+(((0.4512)*x1135))+(((0.1056)*x1119))+(((2.796)*x1116))+((x1117*x1123)));
IkReal x1144=(x1114+x1128+x1129+x1138+x1130+x1137+x1136);
j1eval[0]=((6.67776)+(IKabs(((0.19536)+x1144+(((-1.0)*x1143)))))+(IKabs(((1.776)+(((-1.88)*x1126))+(((-0.44)*x1116))+(((0.32)*x1117))+(((4.0)*pz))+((x1117*x1120))+(((-1.0)*x1119*x1120))+(((-0.32)*x1119))+((x1118*x1119))+(((-1.0)*x1117*x1118)))))+(IKabs(((0.19536)+(((0.0352)*x1117))+(((0.1504)*x1134))+(((0.1504)*x1132))+(((-1.0)*x1117*x1124))+(((1.88)*x1127))+(((1.88)*x1125))+(((-0.1504)*x1133))+(((-0.1504)*x1135))+((x1119*x1124))+(((-0.0352)*x1119))+(((-0.932)*x1116))+(((0.44)*pz)))))+(IKabs(((-0.19536)+x1144+(((-1.0)*x1143)))))+(IKabs(((1.776)+x1141+(((-1.0)*x1142)))))+(IKabs(((-1.776)+x1141+(((-1.0)*x1142))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1145=((12.0)*pz);
IkReal x1146=((4.0)*pz);
IkReal x1147=(r21*sj5);
IkReal x1148=(cj5*r20);
IkReal x1149=((5.64)*sj4);
IkReal x1150=(r22*sj4);
IkReal x1151=((1.32)*cj4);
IkReal x1152=((0.44)*cj4);
IkReal x1153=(cj4*r22);
IkReal x1154=((1.88)*sj4);
IkReal x1155=((0.96)*x1148);
IkReal x1156=((0.32)*x1148);
IkReal x1157=(x1147*x1151);
IkReal x1158=(x1148*x1149);
IkReal x1159=(x1147*x1152);
IkReal x1160=(x1148*x1154);
IkReal x1161=(x1146+x1159+x1156+x1160);
IkReal x1162=(x1145+x1158+x1155+x1157);
IkReal x1163=((((5.64)*x1153))+(((0.96)*x1147))+((x1147*x1149))+((x1148*x1151))+(((1.32)*x1150)));
IkReal x1164=((((0.44)*x1150))+(((0.32)*x1147))+(((1.88)*x1153))+((x1147*x1154))+((x1148*x1152)));
op[0]=((1.776)+x1161+(((-1.0)*x1164)));
op[1]=0;
op[2]=((1.776)+x1162+(((-1.0)*x1163)));
op[3]=0;
op[4]=((-1.776)+x1162+(((-1.0)*x1163)));
op[5]=0;
op[6]=((-1.776)+x1161+(((-1.0)*x1164)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1165=((0.44)*pz);
IkReal x1166=((1.32)*pz);
IkReal x1167=((0.1504)*cj5);
IkReal x1168=(cj0*r00);
IkReal x1169=((2.796)*cj4);
IkReal x1170=(cj5*r20);
IkReal x1171=(cj0*px);
IkReal x1172=(r10*sj0);
IkReal x1173=((0.4512)*cj5);
IkReal x1174=(r21*sj5);
IkReal x1175=((0.932)*cj4);
IkReal x1176=(py*sj0);
IkReal x1177=(r22*sj4);
IkReal x1178=((1.88)*x1171);
IkReal x1179=((0.0352)*x1170);
IkReal x1180=((1.88)*x1176);
IkReal x1181=((5.64)*x1171);
IkReal x1182=((0.1056)*x1170);
IkReal x1183=((5.64)*x1176);
IkReal x1184=((0.0352)*x1174);
IkReal x1185=((0.932)*x1177);
IkReal x1186=(r11*sj0*sj5);
IkReal x1187=(cj0*r01*sj5);
IkReal x1188=(x1167*x1172);
IkReal x1189=(x1167*x1168);
IkReal x1190=(x1174*x1175);
IkReal x1191=(x1168*x1173);
IkReal x1192=(x1169*x1174);
IkReal x1193=(x1172*x1173);
IkReal x1194=(x1170*x1175);
IkReal x1195=((0.1504)*x1186);
IkReal x1196=((0.1504)*x1187);
IkReal x1197=((((0.4512)*x1187))+(((0.4512)*x1186))+(((2.796)*x1177))+(((0.1056)*x1174))+((x1169*x1170)));
IkReal x1198=(x1184+x1185+x1195+x1194+x1196);
IkReal x1199=(x1188+x1189+x1180+x1190+x1165+x1179+x1178);
IkReal x1200=(x1182+x1183+x1181+x1191+x1193+x1192+x1166);
j1evalpoly[0]=((-0.19536)+x1199+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.19536)+x1199+(((-1.0)*x1198))))))+(((-1.66944)*htj1))+(((htj1*htj1)*(((-0.19536)+x1200+(((-1.0)*x1197))))))+(((-3.33888)*(htj1*htj1*htj1)))+(((-1.0)*x1198))+(((htj1*htj1*htj1*htj1)*(((0.19536)+x1200+(((-1.0)*x1197))))))+(((-1.66944)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1201=(r21*sj5);
IkReal x1202=(cj1*sj4);
IkReal x1203=(cj5*r20);
IkReal x1204=(sj1*sj4);
IkReal x1205=(cj4*sj1);
IkReal x1206=((1.0)*cj1*cj4);
IkReal x1207=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x1203*x1205))+(((-1.0)*r22*x1206))+((x1202*x1203))+(((-1.0)*r22*x1204))+(((-1.0)*x1201*x1202))+((x1201*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1203*x1204))+(((-1.0)*r22*x1205))+((cj1*cj4*x1203))+(((-1.0)*x1201*x1204))+(((-1.0)*x1201*x1206))+((r22*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1203*x1205))+(((-1.0)*r22*x1206))+((x1202*x1203))+(((-1.0)*r22*x1204))+(((-1.0)*x1201*x1202))+((x1201*x1205))))+IKsqr((((x1203*x1204))+(((-1.0)*r22*x1205))+((cj1*cj4*x1203))+(((-1.0)*x1201*x1204))+(((-1.0)*x1201*x1206))+((r22*x1202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1203*x1205))+(((-1.0)*r22*x1206))+((x1202*x1203))+(((-1.0)*r22*x1204))+(((-1.0)*x1201*x1202))+((x1201*x1205))), (((x1203*x1204))+(((-1.0)*r22*x1205))+((cj1*cj4*x1203))+(((-1.0)*x1201*x1204))+(((-1.0)*x1201*x1206))+((r22*x1202))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1208=IKsin(j2);
IkReal x1209=IKcos(j2);
IkReal x1210=((0.08)*cj5);
IkReal x1211=((1.0)*sj4);
IkReal x1212=(cj5*r00);
IkReal x1213=(r10*sj0);
IkReal x1214=(cj5*r20);
IkReal x1215=((1.0)*sj0);
IkReal x1216=(r21*sj5);
IkReal x1217=((1.0)*cj4);
IkReal x1218=(sj1*x1209);
IkReal x1219=(cj1*x1208);
IkReal x1220=(cj1*x1209);
IkReal x1221=(r11*sj0*sj5);
IkReal x1222=(sj1*x1208);
IkReal x1223=(cj0*x1217);
IkReal x1224=(cj0*r01*sj5);
IkReal x1225=(x1218+x1219);
evalcond[0]=(x1225+((cj4*r22))+((sj4*x1216))+(((-1.0)*x1211*x1214)));
evalcond[1]=(x1222+(((-1.0)*x1220))+((r22*sj4))+((cj4*x1214))+(((-1.0)*x1216*x1217)));
evalcond[2]=((((0.11)*x1222))+(((-0.444)*cj1))+(((0.47)*x1219))+(((0.47)*x1218))+(((-0.11)*x1220))+pz+((r20*x1210))+(((-0.08)*x1216)));
evalcond[3]=((((-1.0)*x1212*x1223))+x1225+((cj4*x1224))+((cj4*x1221))+(((-1.0)*cj5*x1213*x1217))+(((-1.0)*r12*sj0*x1211))+(((-1.0)*cj0*r02*x1211)));
evalcond[4]=(x1220+(((-1.0)*x1222))+(((-1.0)*cj4*r12*x1215))+((cj0*sj4*x1212))+((cj5*sj4*x1213))+(((-1.0)*r02*x1223))+(((-1.0)*x1211*x1221))+(((-1.0)*x1211*x1224)));
evalcond[5]=((((-0.47)*x1222))+(((0.11)*x1219))+(((0.11)*x1218))+(((-1.0)*cj0*r00*x1210))+(((-1.0)*x1210*x1213))+(((0.08)*x1221))+(((0.08)*x1224))+(((0.47)*x1220))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((-1.0)*py*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1226=((1.0)*cj5);
IkReal x1227=(cj4*sj5);
IkReal x1228=((1.0)*sj4);
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1226)))),-1);
if(!x1229.valid){
continue;
}
CheckValue<IkReal> x1230 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1228))+(((-1.0)*cj4*r10*x1226))+((r11*x1227)))),IkReal(((((-1.0)*cj4*r00*x1226))+((r01*x1227))+(((-1.0)*r02*x1228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1230.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1229.value)))+(x1230.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1231=IKsin(j0);
IkReal x1232=IKcos(j0);
IkReal x1233=(r11*sj5);
IkReal x1234=(cj5*r10);
IkReal x1235=((1.0)*r10);
IkReal x1236=(cj5*r01);
IkReal x1237=(cj5*r00);
IkReal x1238=(cj5*r11);
IkReal x1239=(sj5*x1231);
IkReal x1240=((0.08)*x1232);
IkReal x1241=(sj4*x1232);
IkReal x1242=((1.0)*x1232);
IkReal x1243=(cj4*x1231);
IkReal x1244=((1.0)*x1231);
IkReal x1245=(r12*x1242);
evalcond[0]=((-1.0)+((r00*x1239))+(((-1.0)*x1238*x1242))+((x1231*x1236))+(((-1.0)*sj5*x1232*x1235)));
evalcond[1]=((((-1.0)*x1236*x1242))+(((-1.0)*x1235*x1239))+(((-1.0)*x1238*x1244))+(((-1.0)*r00*sj5*x1242)));
evalcond[2]=((((-1.0)*py*x1242))+((x1233*x1240))+(((-0.08)*r01*x1239))+((px*x1231))+(((-1.0)*x1234*x1240))+(((0.08)*x1231*x1237)));
evalcond[3]=((((-1.0)*x1233*x1241))+(((-1.0)*cj4*x1245))+(((-1.0)*sj4*x1237*x1244))+((r02*x1243))+((r01*sj4*x1239))+((x1234*x1241)));
evalcond[4]=((((-1.0)*cj4*r01*x1239))+(((-1.0)*cj4*x1234*x1242))+(((-1.0)*r12*x1241))+((r02*sj4*x1231))+((cj4*x1232*x1233))+((x1237*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1246=((1.32)*pz);
IkReal x1247=((12.0)*pz);
IkReal x1248=(r22*sj4);
IkReal x1249=(cj5*r20);
IkReal x1250=((0.44)*cj4);
IkReal x1251=(r21*sj5);
IkReal x1252=((1.88)*sj4);
IkReal x1253=((5.64)*sj4);
IkReal x1254=((1.32)*cj4);
IkReal x1255=((2.796)*cj4);
IkReal x1256=((0.932)*cj4);
IkReal x1257=(cj0*px);
IkReal x1258=(cj4*r22);
IkReal x1259=(py*sj0);
IkReal x1260=((5.64)*x1257);
IkReal x1261=((0.1056)*x1249);
IkReal x1262=((5.64)*x1259);
IkReal x1263=((0.96)*x1249);
IkReal x1264=(cj0*cj5*r00);
IkReal x1265=(r11*sj0*sj5);
IkReal x1266=(cj5*r10*sj0);
IkReal x1267=(cj0*r01*sj5);
IkReal x1268=((0.4512)*x1264);
IkReal x1269=(x1251*x1255);
IkReal x1270=((0.4512)*x1266);
IkReal x1271=(x1251*x1254);
IkReal x1272=(x1249*x1253);
IkReal x1273=(x1247+x1271+x1272+x1263);
IkReal x1274=((((5.64)*x1258))+(((0.96)*x1251))+((x1251*x1253))+((x1249*x1254))+(((1.32)*x1248)));
IkReal x1275=((((0.4512)*x1267))+(((0.4512)*x1265))+(((2.796)*x1248))+(((0.1056)*x1251))+((x1249*x1255)));
IkReal x1276=(x1246+x1270+x1269+x1268+x1262+x1261+x1260);
j1eval[0]=((6.67776)+(IKabs(((1.776)+x1273+(((-1.0)*x1274)))))+(IKabs(((0.19536)+x1276+(((-1.0)*x1275)))))+(IKabs(((0.19536)+(((-1.0)*x1249*x1256))+(((-0.0352)*x1251))+(((1.88)*x1257))+(((1.88)*x1259))+(((0.1504)*x1266))+(((0.1504)*x1264))+((x1251*x1256))+(((-0.1504)*x1267))+(((-0.1504)*x1265))+(((-0.932)*x1248))+(((0.0352)*x1249))+(((0.44)*pz)))))+(IKabs(((-1.776)+x1273+(((-1.0)*x1274)))))+(IKabs(((-0.19536)+x1276+(((-1.0)*x1275)))))+(IKabs(((1.776)+(((-1.0)*x1249*x1250))+(((0.32)*x1249))+(((4.0)*pz))+(((-0.44)*x1248))+((x1250*x1251))+(((-1.0)*x1251*x1252))+(((-0.32)*x1251))+((x1249*x1252))+(((-1.88)*x1258))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1277=((12.0)*pz);
IkReal x1278=((4.0)*pz);
IkReal x1279=(r21*sj5);
IkReal x1280=(cj5*r20);
IkReal x1281=((5.64)*sj4);
IkReal x1282=(r22*sj4);
IkReal x1283=((1.32)*cj4);
IkReal x1284=((0.44)*cj4);
IkReal x1285=(cj4*r22);
IkReal x1286=((1.88)*sj4);
IkReal x1287=((0.96)*x1280);
IkReal x1288=((0.32)*x1280);
IkReal x1289=(x1279*x1283);
IkReal x1290=(x1280*x1281);
IkReal x1291=(x1279*x1284);
IkReal x1292=(x1280*x1286);
IkReal x1293=(x1278+x1288+x1292+x1291);
IkReal x1294=(x1277+x1287+x1289+x1290);
IkReal x1295=(((x1279*x1281))+(((5.64)*x1285))+(((1.32)*x1282))+(((0.96)*x1279))+((x1280*x1283)));
IkReal x1296=(((x1279*x1286))+(((0.44)*x1282))+(((1.88)*x1285))+(((0.32)*x1279))+((x1280*x1284)));
op[0]=((1.776)+x1293+(((-1.0)*x1296)));
op[1]=0;
op[2]=((1.776)+x1294+(((-1.0)*x1295)));
op[3]=0;
op[4]=((-1.776)+x1294+(((-1.0)*x1295)));
op[5]=0;
op[6]=((-1.776)+x1293+(((-1.0)*x1296)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1297=((0.44)*pz);
IkReal x1298=((1.32)*pz);
IkReal x1299=((0.1504)*cj5);
IkReal x1300=(cj0*r00);
IkReal x1301=((2.796)*cj4);
IkReal x1302=(cj5*r20);
IkReal x1303=(cj0*px);
IkReal x1304=(r10*sj0);
IkReal x1305=((0.4512)*cj5);
IkReal x1306=(r21*sj5);
IkReal x1307=((0.932)*cj4);
IkReal x1308=(py*sj0);
IkReal x1309=(r22*sj4);
IkReal x1310=((1.88)*x1303);
IkReal x1311=((0.0352)*x1302);
IkReal x1312=((1.88)*x1308);
IkReal x1313=((5.64)*x1303);
IkReal x1314=((0.1056)*x1302);
IkReal x1315=((5.64)*x1308);
IkReal x1316=((0.0352)*x1306);
IkReal x1317=((0.932)*x1309);
IkReal x1318=(r11*sj0*sj5);
IkReal x1319=(cj0*r01*sj5);
IkReal x1320=(x1299*x1304);
IkReal x1321=(x1299*x1300);
IkReal x1322=(x1306*x1307);
IkReal x1323=(x1300*x1305);
IkReal x1324=(x1301*x1306);
IkReal x1325=(x1304*x1305);
IkReal x1326=(x1302*x1307);
IkReal x1327=((0.1504)*x1318);
IkReal x1328=((0.1504)*x1319);
IkReal x1329=((((0.4512)*x1318))+(((0.4512)*x1319))+(((0.1056)*x1306))+(((2.796)*x1309))+((x1301*x1302)));
IkReal x1330=(x1317+x1316+x1326+x1327+x1328);
IkReal x1331=(x1312+x1311+x1310+x1322+x1320+x1321+x1297);
IkReal x1332=(x1315+x1314+x1313+x1323+x1324+x1325+x1298);
j1evalpoly[0]=((-0.19536)+x1331+(((htj1*htj1)*(((-0.19536)+x1332+(((-1.0)*x1329))))))+(((-1.66944)*htj1))+(((-3.33888)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.19536)+x1331+(((-1.0)*x1330))))))+(((htj1*htj1*htj1*htj1)*(((0.19536)+x1332+(((-1.0)*x1329))))))+(((-1.0)*x1330))+(((-1.66944)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1333=(r21*sj5);
IkReal x1334=(cj1*sj4);
IkReal x1335=(cj5*r20);
IkReal x1336=(sj1*sj4);
IkReal x1337=(cj4*sj1);
IkReal x1338=((1.0)*cj1*cj4);
IkReal x1339=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x1333*x1334))+(((-1.0)*r22*x1338))+(((-1.0)*x1335*x1337))+(((-1.0)*r22*x1336))+((x1333*x1337))+((x1334*x1335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1333*x1336))+((x1335*x1336))+((cj1*cj4*x1335))+(((-1.0)*r22*x1337))+(((-1.0)*x1333*x1338))+((r22*x1334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1333*x1334))+(((-1.0)*r22*x1338))+(((-1.0)*x1335*x1337))+(((-1.0)*r22*x1336))+((x1333*x1337))+((x1334*x1335))))+IKsqr(((((-1.0)*x1333*x1336))+((x1335*x1336))+((cj1*cj4*x1335))+(((-1.0)*r22*x1337))+(((-1.0)*x1333*x1338))+((r22*x1334))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1333*x1334))+(((-1.0)*r22*x1338))+(((-1.0)*x1335*x1337))+(((-1.0)*r22*x1336))+((x1333*x1337))+((x1334*x1335))), ((((-1.0)*x1333*x1336))+((x1335*x1336))+((cj1*cj4*x1335))+(((-1.0)*r22*x1337))+(((-1.0)*x1333*x1338))+((r22*x1334))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1340=IKsin(j2);
IkReal x1341=IKcos(j2);
IkReal x1342=((0.08)*cj5);
IkReal x1343=((1.0)*sj4);
IkReal x1344=(cj5*r00);
IkReal x1345=(r10*sj0);
IkReal x1346=(cj5*r20);
IkReal x1347=((1.0)*sj0);
IkReal x1348=(r21*sj5);
IkReal x1349=((1.0)*cj4);
IkReal x1350=(sj1*x1341);
IkReal x1351=(cj1*x1340);
IkReal x1352=(cj1*x1341);
IkReal x1353=(r11*sj0*sj5);
IkReal x1354=(sj1*x1340);
IkReal x1355=(cj0*x1349);
IkReal x1356=(cj0*r01*sj5);
IkReal x1357=(x1351+x1350);
evalcond[0]=(x1357+((cj4*r22))+((sj4*x1348))+(((-1.0)*x1343*x1346)));
evalcond[1]=(x1354+(((-1.0)*x1352))+((r22*sj4))+(((-1.0)*x1348*x1349))+((cj4*x1346)));
evalcond[2]=((((-0.11)*x1352))+(((-0.08)*x1348))+(((-0.444)*cj1))+(((0.47)*x1350))+(((0.47)*x1351))+(((0.11)*x1354))+pz+((r20*x1342)));
evalcond[3]=(x1357+(((-1.0)*r12*sj0*x1343))+(((-1.0)*cj0*r02*x1343))+((cj4*x1353))+((cj4*x1356))+(((-1.0)*x1344*x1355))+(((-1.0)*cj5*x1345*x1349)));
evalcond[4]=(x1352+(((-1.0)*x1354))+(((-1.0)*r02*x1355))+(((-1.0)*cj4*r12*x1347))+((cj0*sj4*x1344))+((cj5*sj4*x1345))+(((-1.0)*x1343*x1356))+(((-1.0)*x1343*x1353)));
evalcond[5]=((((-1.0)*cj0*r00*x1342))+(((-1.0)*py*x1347))+(((-0.47)*x1354))+(((0.47)*x1352))+(((0.11)*x1350))+(((0.11)*x1351))+(((0.08)*x1356))+(((0.08)*x1353))+(((-1.0)*x1342*x1345))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1358=((0.08)*sj5);
IkReal x1359=((0.08)*cj5);
CheckValue<IkReal> x1360=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((0.08)*r22)))),-1);
if(!x1360.valid){
continue;
}
CheckValue<IkReal> x1361 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1359))+(((-1.0)*py))+((r11*x1358)))),IkReal(((((-1.0)*px))+(((-1.0)*r00*x1359))+((r01*x1358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1361.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1360.value)))+(x1361.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1362=IKsin(j0);
IkReal x1363=IKcos(j0);
IkReal x1364=(r11*sj5);
IkReal x1365=(cj5*r10);
IkReal x1366=((1.0)*r10);
IkReal x1367=(cj5*r01);
IkReal x1368=(cj5*r00);
IkReal x1369=(cj5*r11);
IkReal x1370=(sj5*x1362);
IkReal x1371=((0.08)*x1363);
IkReal x1372=(sj4*x1363);
IkReal x1373=((1.0)*x1363);
IkReal x1374=(cj4*x1362);
IkReal x1375=((1.0)*x1362);
IkReal x1376=(r12*x1373);
evalcond[0]=((-1.0)+(((-1.0)*x1369*x1373))+((r00*x1370))+(((-1.0)*sj5*x1363*x1366))+((x1362*x1367)));
evalcond[1]=((((-1.0)*r00*sj5*x1373))+(((-1.0)*x1366*x1370))+(((-1.0)*x1367*x1373))+(((-1.0)*x1369*x1375)));
evalcond[2]=((((-1.0)*x1365*x1371))+(((0.08)*x1362*x1368))+((px*x1362))+(((-0.08)*r01*x1370))+(((-1.0)*py*x1373))+((x1364*x1371)));
evalcond[3]=(((x1365*x1372))+(((-1.0)*sj4*x1368*x1375))+(((-1.0)*x1364*x1372))+((r01*sj4*x1370))+(((-1.0)*cj4*x1376))+((r02*x1374)));
evalcond[4]=((((-1.0)*cj4*x1365*x1373))+(((-1.0)*r12*x1372))+(((-1.0)*cj4*r01*x1370))+((cj4*x1363*x1364))+((r02*sj4*x1362))+((x1368*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1377=((1.32)*pz);
IkReal x1378=((12.0)*pz);
IkReal x1379=(r22*sj4);
IkReal x1380=(cj5*r20);
IkReal x1381=((0.44)*cj4);
IkReal x1382=(r21*sj5);
IkReal x1383=((1.88)*sj4);
IkReal x1384=((5.64)*sj4);
IkReal x1385=((1.32)*cj4);
IkReal x1386=((2.796)*cj4);
IkReal x1387=((0.932)*cj4);
IkReal x1388=(cj0*px);
IkReal x1389=(cj4*r22);
IkReal x1390=(py*sj0);
IkReal x1391=((5.64)*x1388);
IkReal x1392=((0.1056)*x1380);
IkReal x1393=((5.64)*x1390);
IkReal x1394=((0.96)*x1380);
IkReal x1395=(cj0*cj5*r00);
IkReal x1396=(r11*sj0*sj5);
IkReal x1397=(cj5*r10*sj0);
IkReal x1398=(cj0*r01*sj5);
IkReal x1399=((0.4512)*x1395);
IkReal x1400=(x1382*x1386);
IkReal x1401=((0.4512)*x1397);
IkReal x1402=(x1382*x1385);
IkReal x1403=(x1380*x1384);
IkReal x1404=(x1378+x1394+x1403+x1402);
IkReal x1405=(((x1380*x1385))+(((5.64)*x1389))+(((1.32)*x1379))+(((0.96)*x1382))+((x1382*x1384)));
IkReal x1406=(((x1380*x1386))+(((2.796)*x1379))+(((0.4512)*x1398))+(((0.4512)*x1396))+(((0.1056)*x1382)));
IkReal x1407=(x1377+x1399+x1393+x1392+x1391+x1401+x1400);
j1eval[0]=((6.67776)+(IKabs(((-0.19536)+(((-1.0)*x1406))+x1407)))+(IKabs(((-1.776)+(((-1.0)*x1405))+x1404)))+(IKabs(((0.19536)+(((-0.1504)*x1398))+(((-0.1504)*x1396))+(((-1.0)*x1380*x1387))+(((1.88)*x1388))+(((0.1504)*x1397))+(((0.1504)*x1395))+(((0.44)*pz))+(((-0.0352)*x1382))+((x1382*x1387))+(((0.0352)*x1380))+(((1.88)*x1390))+(((-0.932)*x1379)))))+(IKabs(((1.776)+(((-1.0)*x1405))+x1404)))+(IKabs(((0.19536)+(((-1.0)*x1406))+x1407)))+(IKabs(((1.776)+((x1380*x1383))+((x1381*x1382))+(((0.32)*x1380))+(((4.0)*pz))+(((-1.88)*x1389))+(((-1.0)*x1382*x1383))+(((-0.44)*x1379))+(((-0.32)*x1382))+(((-1.0)*x1380*x1381))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1408=((12.0)*pz);
IkReal x1409=((4.0)*pz);
IkReal x1410=(r21*sj5);
IkReal x1411=(cj5*r20);
IkReal x1412=((5.64)*sj4);
IkReal x1413=(r22*sj4);
IkReal x1414=((1.32)*cj4);
IkReal x1415=((0.44)*cj4);
IkReal x1416=(cj4*r22);
IkReal x1417=((1.88)*sj4);
IkReal x1418=((0.96)*x1411);
IkReal x1419=((0.32)*x1411);
IkReal x1420=(x1410*x1414);
IkReal x1421=(x1411*x1412);
IkReal x1422=(x1410*x1415);
IkReal x1423=(x1411*x1417);
IkReal x1424=(x1423+x1422+x1419+x1409);
IkReal x1425=(x1421+x1420+x1418+x1408);
IkReal x1426=((((5.64)*x1416))+(((0.96)*x1410))+(((1.32)*x1413))+((x1411*x1414))+((x1410*x1412)));
IkReal x1427=((((1.88)*x1416))+(((0.32)*x1410))+((x1411*x1415))+(((0.44)*x1413))+((x1410*x1417)));
op[0]=((1.776)+x1424+(((-1.0)*x1427)));
op[1]=0;
op[2]=((1.776)+x1425+(((-1.0)*x1426)));
op[3]=0;
op[4]=((-1.776)+x1425+(((-1.0)*x1426)));
op[5]=0;
op[6]=((-1.776)+x1424+(((-1.0)*x1427)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1428=((0.44)*pz);
IkReal x1429=((1.32)*pz);
IkReal x1430=((0.1504)*cj5);
IkReal x1431=(cj0*r00);
IkReal x1432=((2.796)*cj4);
IkReal x1433=(cj5*r20);
IkReal x1434=(cj0*px);
IkReal x1435=(r10*sj0);
IkReal x1436=((0.4512)*cj5);
IkReal x1437=(r21*sj5);
IkReal x1438=((0.932)*cj4);
IkReal x1439=(py*sj0);
IkReal x1440=(r22*sj4);
IkReal x1441=((1.88)*x1434);
IkReal x1442=((0.0352)*x1433);
IkReal x1443=((1.88)*x1439);
IkReal x1444=((5.64)*x1434);
IkReal x1445=((0.1056)*x1433);
IkReal x1446=((5.64)*x1439);
IkReal x1447=((0.0352)*x1437);
IkReal x1448=((0.932)*x1440);
IkReal x1449=(r11*sj0*sj5);
IkReal x1450=(cj0*r01*sj5);
IkReal x1451=(x1430*x1435);
IkReal x1452=(x1430*x1431);
IkReal x1453=(x1437*x1438);
IkReal x1454=(x1431*x1436);
IkReal x1455=(x1432*x1437);
IkReal x1456=(x1435*x1436);
IkReal x1457=(x1433*x1438);
IkReal x1458=((0.1504)*x1449);
IkReal x1459=((0.1504)*x1450);
IkReal x1460=(((x1432*x1433))+(((0.4512)*x1449))+(((0.4512)*x1450))+(((0.1056)*x1437))+(((2.796)*x1440)));
IkReal x1461=(x1457+x1458+x1459+x1447+x1448);
IkReal x1462=(x1428+x1451+x1452+x1453+x1443+x1442+x1441);
IkReal x1463=(x1429+x1454+x1455+x1456+x1446+x1445+x1444);
j1evalpoly[0]=((-0.19536)+(((htj1*htj1)*(((-0.19536)+(((-1.0)*x1460))+x1463))))+(((-1.0)*x1461))+(((-1.66944)*htj1))+(((-3.33888)*(htj1*htj1*htj1)))+x1462+(((htj1*htj1*htj1*htj1)*(((0.19536)+(((-1.0)*x1460))+x1463))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.19536)+(((-1.0)*x1461))+x1462))))+(((-1.66944)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1464=(r21*sj5);
IkReal x1465=(cj1*sj4);
IkReal x1466=(cj5*r20);
IkReal x1467=(sj1*sj4);
IkReal x1468=(cj4*sj1);
IkReal x1469=((1.0)*cj1*cj4);
IkReal x1470=((1.0)*r22*sj1);
if( IKabs((((x1465*x1466))+(((-1.0)*r22*x1469))+(((-1.0)*r22*x1467))+((x1464*x1468))+(((-1.0)*x1466*x1468))+(((-1.0)*x1464*x1465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*x1466))+(((-1.0)*r22*x1468))+(((-1.0)*x1464*x1469))+((x1466*x1467))+((r22*x1465))+(((-1.0)*x1464*x1467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1465*x1466))+(((-1.0)*r22*x1469))+(((-1.0)*r22*x1467))+((x1464*x1468))+(((-1.0)*x1466*x1468))+(((-1.0)*x1464*x1465))))+IKsqr((((cj1*cj4*x1466))+(((-1.0)*r22*x1468))+(((-1.0)*x1464*x1469))+((x1466*x1467))+((r22*x1465))+(((-1.0)*x1464*x1467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1465*x1466))+(((-1.0)*r22*x1469))+(((-1.0)*r22*x1467))+((x1464*x1468))+(((-1.0)*x1466*x1468))+(((-1.0)*x1464*x1465))), (((cj1*cj4*x1466))+(((-1.0)*r22*x1468))+(((-1.0)*x1464*x1469))+((x1466*x1467))+((r22*x1465))+(((-1.0)*x1464*x1467))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1471=IKsin(j2);
IkReal x1472=IKcos(j2);
IkReal x1473=((0.08)*cj5);
IkReal x1474=((1.0)*sj4);
IkReal x1475=(cj5*r00);
IkReal x1476=(r10*sj0);
IkReal x1477=(cj5*r20);
IkReal x1478=((1.0)*sj0);
IkReal x1479=(r21*sj5);
IkReal x1480=((1.0)*cj4);
IkReal x1481=(sj1*x1472);
IkReal x1482=(cj1*x1471);
IkReal x1483=(cj1*x1472);
IkReal x1484=(r11*sj0*sj5);
IkReal x1485=(sj1*x1471);
IkReal x1486=(cj0*x1480);
IkReal x1487=(cj0*r01*sj5);
IkReal x1488=(x1482+x1481);
evalcond[0]=(((cj4*r22))+((sj4*x1479))+(((-1.0)*x1474*x1477))+x1488);
evalcond[1]=(((cj4*x1477))+(((-1.0)*x1479*x1480))+((r22*sj4))+(((-1.0)*x1483))+x1485);
evalcond[2]=((((0.47)*x1482))+(((0.47)*x1481))+(((-0.444)*cj1))+(((-0.08)*x1479))+pz+(((-0.11)*x1483))+((r20*x1473))+(((0.11)*x1485)));
evalcond[3]=((((-1.0)*r12*sj0*x1474))+(((-1.0)*cj0*r02*x1474))+((cj4*x1484))+((cj4*x1487))+(((-1.0)*x1475*x1486))+x1488+(((-1.0)*cj5*x1476*x1480)));
evalcond[4]=(((cj0*sj4*x1475))+(((-1.0)*x1485))+(((-1.0)*r02*x1486))+(((-1.0)*x1474*x1484))+(((-1.0)*x1474*x1487))+x1483+((cj5*sj4*x1476))+(((-1.0)*cj4*r12*x1478)));
evalcond[5]=((((0.47)*x1483))+(((-1.0)*cj0*r00*x1473))+(((-0.47)*x1485))+(((0.08)*x1484))+(((0.08)*x1487))+(((-1.0)*py*x1478))+(((0.11)*x1482))+(((0.11)*x1481))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((-1.0)*x1473*x1476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1489=((1.0)*cj5);
IkReal x1490=((1.0)*sj5);
IkReal x1491=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1489)));
j0eval[0]=x1491;
j0eval[1]=((IKabs(((((-1.0)*r01*x1489))+(((-1.0)*r00*x1490)))))+(IKabs(((((-1.0)*r11*x1489))+(((-1.0)*r10*x1490))))));
j0eval[2]=IKsign(x1491);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1492=(cj5*sj4);
IkReal x1493=((1.0)*sj5);
IkReal x1494=((1.0)*cj4);
IkReal x1495=((((-1.0)*r20*x1493))+(((-1.0)*cj5*r21)));
j0eval[0]=x1495;
j0eval[1]=((IKabs((((r10*x1492))+(((-1.0)*r12*x1494))+(((-1.0)*r11*sj4*x1493)))))+(IKabs((((r00*x1492))+(((-1.0)*r02*x1494))+(((-1.0)*r01*sj4*x1493))))));
j0eval[2]=IKsign(x1495);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1496=((0.08)*sj5);
IkReal x1497=(rxp2_2*sj4);
IkReal x1498=((0.08)*cj5);
IkReal x1499=(r20*sj4);
IkReal x1500=(r21*sj4);
IkReal x1501=(cj4*cj5*rxp0_2);
IkReal x1502=(cj4*rxp1_2*sj5);
j0eval[0]=(((sj5*x1499))+(((12.5)*x1501))+((cj5*x1500))+(((12.5)*x1497))+(((-12.5)*x1502)));
j0eval[1]=IKsign((((x1498*x1500))+(((-1.0)*x1502))+((x1496*x1499))+x1501+x1497));
j0eval[2]=((IKabs((((r11*x1496))+(((-1.0)*py))+(((-1.0)*r10*x1498)))))+(IKabs(((((-1.0)*r00*x1498))+((r01*x1496))+(((-1.0)*px))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1503=((-1.0)*r20);
IkReal x1505 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1505)==0){
continue;
}
IkReal x1504=pow(x1505,-0.5);
CheckValue<IkReal> x1506 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1503),IKFAST_ATAN2_MAGTHRESH);
if(!x1506.valid){
continue;
}
IkReal gconst146=((-1.0)*(x1506.value));
IkReal gconst147=(r21*x1504);
IkReal gconst148=(x1503*x1504);
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1507.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1508=((-1.0)*r20);
IkReal x1509=x1504;
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1508),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
IkReal x1510=((-1.0)*(x1511.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1510;
IkReal gconst146=x1510;
IkReal gconst147=(r21*x1509);
IkReal gconst148=(x1508*x1509);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1512=((-1.0)*r20);
IkReal x1513=x1504;
CheckValue<IkReal> x1515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1512),IKFAST_ATAN2_MAGTHRESH);
if(!x1515.valid){
continue;
}
IkReal x1514=((-1.0)*(x1515.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1514;
IkReal gconst146=x1514;
IkReal gconst147=(r21*x1513);
IkReal gconst148=(x1512*x1513);
IkReal x1516=(rxp2_2*sj4);
IkReal x1517=(r21*rxp1_2);
IkReal x1518=(r20*rxp0_2);
IkReal x1519=x1504;
IkReal x1520=((12.5)*cj4*x1519);
IkReal x1521=((1.0)*cj4*x1519);
j0eval[0]=((((12.5)*x1516))+(((-1.0)*x1518*x1520))+(((-1.0)*x1517*x1520)));
j0eval[1]=IKsign(((((-1.0)*x1518*x1521))+x1516+(((-1.0)*x1517*x1521))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1522=((-1.0)*r20);
IkReal x1523=x1504;
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1522),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
IkReal x1524=((-1.0)*(x1525.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1524;
IkReal gconst146=x1524;
IkReal gconst147=(r21*x1523);
IkReal gconst148=(x1522*x1523);
IkReal x1526=cj4*cj4;
IkReal x1527=r22*r22;
IkReal x1528=r21*r21;
IkReal x1529=r20*r20;
IkReal x1530=((1.0)+(((-1.0)*x1527)));
IkReal x1531=((1.0)*x1527);
IkReal x1532=((1.0)*x1526);
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(x1530,-1);
if(!x1540.valid){
continue;
}
IkReal x1533=x1540.value;
IkReal x1534=(x1526*x1533);
IkReal x1541 = x1530;
if(IKabs(x1541)==0){
continue;
}
IkReal x1535=pow(x1541,-0.5);
IkReal x1536=(x1528*x1534);
IkReal x1537=(x1529*x1534);
IkReal x1538=((2.0)*cj4*r22*sj4*x1535);
IkReal x1539=((1.0)+((x1528*x1538))+(((-1.0)*x1531))+(((-1.0)*x1532))+(((-1.0)*x1532*x1533*(x1529*x1529)))+((x1526*x1527))+x1537+x1536+((x1529*x1538))+(((-1.0)*x1532*x1533*(x1528*x1528)))+(((-2.0)*x1529*x1536)));
j0eval[0]=x1539;
j0eval[1]=IKsign(x1539);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1542=cj4*cj4;
IkReal x1543=gconst147*gconst147;
IkReal x1544=gconst148*gconst148;
IkReal x1545=(gconst147*r21);
IkReal x1546=((1.0)*cj4);
IkReal x1547=((2.0)*gconst148*r20);
IkReal x1548=((1.0)*x1542);
IkReal x1549=(cj4*r22*sj4);
IkReal x1550=(x1542*x1544);
CheckValue<IkReal> x1551 = IKatan2WithCheck(IkReal((((cj4*gconst147*r01))+(((-1.0)*r02*sj4))+(((-1.0)*gconst148*r00*x1546)))),IkReal(((((-1.0)*gconst147*r11*x1546))+((cj4*gconst148*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1551.valid){
continue;
}
CheckValue<IkReal> x1552=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x1544*x1548*(r20*r20)))+(((r22*r22)*(((-1.0)+x1542))))+((x1542*x1545*x1547))+x1550+(((-1.0)*x1547*x1549))+(((-1.0)*x1543*x1548*(r21*r21)))+(((2.0)*x1545*x1549))+(((-1.0)*x1548))+((x1542*x1543)))),-1);
if(!x1552.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1551.value)+(((1.5707963267949)*(x1552.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1553=IKsin(j0);
IkReal x1554=IKcos(j0);
IkReal x1555=((1.0)*r10);
IkReal x1556=((1.0)*sj4);
IkReal x1557=(cj4*gconst148);
IkReal x1558=(cj4*r11);
IkReal x1559=((1.0)*cj4);
IkReal x1560=(gconst147*x1554);
IkReal x1561=(r00*x1553);
IkReal x1562=(r01*x1553);
IkReal x1563=(r12*x1554);
IkReal x1564=(r02*x1553);
IkReal x1565=((1.0)*x1554);
IkReal x1566=(gconst148*r10*x1554);
evalcond[0]=((((-1.0)*x1555*x1560))+(((-1.0)*gconst148*r11*x1565))+((gconst148*x1562))+((gconst147*x1561)));
evalcond[1]=((((0.08)*gconst148*x1561))+(((-1.0)*py*x1565))+(((-0.08)*x1566))+(((-0.08)*gconst147*x1562))+(((0.08)*r11*x1560))+((px*x1553)));
evalcond[2]=((((-1.0)*x1559*x1563))+((cj4*x1564))+(((-1.0)*gconst148*x1556*x1561))+((sj4*x1566))+(((-1.0)*r11*x1556*x1560))+((gconst147*sj4*x1562)));
evalcond[3]=((1.0)+(((-1.0)*x1554*x1555*x1557))+((sj4*x1564))+(((-1.0)*gconst147*x1559*x1562))+(((-1.0)*x1556*x1563))+((x1557*x1561))+((x1558*x1560)));
evalcond[4]=(((gconst147*x1553*x1558))+((cj4*r01*x1560))+(((-1.0)*x1553*x1555*x1557))+(((-1.0)*r00*x1557*x1565))+(((-1.0)*r02*x1554*x1556))+(((-1.0)*r12*x1553*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1567=(gconst147*r20);
IkReal x1568=(gconst148*r21);
IkReal x1569=((-1.0)*r20);
IkReal x1570=(x1568+x1567);
IkReal x1571=((-1.0)+x1570);
IkReal x1572=((1.0)+x1570);
IkReal x1573=x1504;
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1569),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
IkReal x1574=((-1.0)*(x1576.value));
IkReal x1575=(((cj4*r22))+((gconst147*r21*sj4))+(((-1.0)*gconst148*r20*sj4)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1574;
IkReal gconst146=x1574;
IkReal gconst147=(r21*x1573);
IkReal gconst148=(x1569*x1573);
IkReal gconst152=x1571;
IkReal gconst153=x1572;
IkReal gconst154=x1575;
IkReal gconst155=x1575;
IkReal gconst156=x1571;
IkReal gconst157=x1572;
IkReal gconst158=x1575;
IkReal gconst159=x1575;
IkReal gconst160=x1572;
IkReal gconst161=x1571;
IkReal gconst162=x1575;
IkReal gconst163=x1575;
IkReal gconst164=x1572;
IkReal gconst165=x1571;
IkReal gconst166=x1575;
IkReal gconst167=x1575;
IkReal x1577=sj4*sj4;
IkReal x1578=gconst147*gconst147;
IkReal x1579=r20*r20;
IkReal x1580=gconst148*gconst148;
IkReal x1581=r21*r21;
IkReal x1582=cj4*cj4;
IkReal x1583=r22*r22;
IkReal x1584=((24.0)*x1578);
IkReal x1585=((4.0)*x1577);
IkReal x1586=((16.0)*x1577);
IkReal x1587=(x1580*x1581);
IkReal x1588=(x1578*x1581);
IkReal x1589=(x1579*x1580);
IkReal x1590=(x1582*x1583);
IkReal x1591=(x1578*x1579);
IkReal x1592=(gconst147*gconst148*r20*r21);
IkReal x1593=(cj4*gconst148*r20*r22*sj4);
IkReal x1594=(cj4*gconst147*r21*r22*sj4);
IkReal x1595=((8.0)*x1592);
IkReal x1596=(x1577*x1592);
j1eval[0]=((IKabs(((16.0)+(((-16.0)*x1587))+(((32.0)*x1593))+(((32.0)*x1596))+(((-32.0)*x1594))+(((-32.0)*x1592))+(((-1.0)*x1586*x1588))+(((-1.0)*x1586*x1589))+(((-16.0)*x1590))+(((-16.0)*x1591)))))+(((0.5)*(IKabs(((24.0)+(((48.0)*x1593))+(((48.0)*x1596))+(((-24.0)*x1577*x1589))+(((-1.0)*x1577*x1581*x1584))+(((-48.0)*x1594))+(((-48.0)*x1592))+(((-1.0)*x1579*x1584))+(((-24.0)*x1590))+(((-24.0)*x1587)))))))+(((0.5)*(IKabs(((4.0)+(((-4.0)*x1587))+(((-1.0)*x1595))+(((-4.0)*x1591))+(((-4.0)*x1590))+(((-1.0)*x1585*x1589))+(((-1.0)*x1585*x1588))+(((-8.0)*x1594))+((x1577*x1595))+(((8.0)*x1593))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x1597=((16.0)*gconst161);
IkReal x1598=((16.0)*gconst164);
IkReal x1599=((16.0)*gconst153);
IkReal x1600=((16.0)*gconst156);
IkReal x1601=(gconst163*gconst166);
IkReal x1602=(gconst152*gconst155);
IkReal x1603=((2.0)*gconst165);
IkReal x1604=((1.0)*gconst164);
IkReal x1605=((2.0)*gconst159);
IkReal x1606=(gconst160*gconst164);
IkReal x1607=(gconst158*gconst161);
IkReal x1608=((4.0)*gconst165);
IkReal x1609=(gconst156*gconst161);
IkReal x1610=(gconst155*gconst160);
IkReal x1611=((2.0)*gconst157);
IkReal x1612=(gconst153*gconst162);
IkReal x1613=(gconst156*gconst159);
IkReal x1614=((4.0)*gconst152);
IkReal x1615=(gconst153*gconst154);
IkReal x1616=((2.0)*gconst164);
IkReal x1617=(gconst152*gconst167);
IkReal x1618=((4.0)*gconst160);
IkReal x1619=(gconst158*gconst163);
IkReal x1620=(gconst152*gconst157);
IkReal x1621=(gconst160*gconst165);
IkReal x1622=(gconst152*gconst163);
IkReal x1623=((8.0)*gconst156);
IkReal x1624=(gconst161*gconst162);
IkReal x1625=(gconst159*gconst164);
IkReal x1626=(gconst152*gconst166);
IkReal x1627=(gconst165*gconst166);
IkReal x1628=(gconst153*gconst158);
IkReal x1629=((1.0)*gconst165);
IkReal x1630=(gconst157*gconst160);
IkReal x1631=((16.0)*gconst155);
IkReal x1632=(gconst160*gconst163);
IkReal x1633=(gconst157*gconst158);
IkReal x1634=(gconst158*gconst160);
IkReal x1635=(gconst154*gconst161);
IkReal x1636=((2.0)*gconst156);
IkReal x1637=(gconst153*gconst164);
IkReal x1638=(gconst153*gconst167);
IkReal x1639=((1.0)*gconst156);
IkReal x1640=(gconst152*gconst165);
IkReal x1641=(gconst157*gconst166);
IkReal x1642=(gconst156*gconst167);
IkReal x1643=((8.0)*gconst164);
IkReal x1644=(gconst161*gconst164);
IkReal x1645=(gconst153*gconst166);
IkReal x1646=((4.0)*gconst157);
IkReal x1647=(gconst161*gconst166);
IkReal x1648=(gconst158*gconst165);
IkReal x1649=((1.0)*gconst157);
IkReal x1650=(gconst164*gconst167);
IkReal x1651=((4.0)*x1644);
IkReal x1652=((4.0)*x1609);
IkReal x1653=((4.0)*x1637);
IkReal x1654=((8.0)*x1607);
IkReal x1655=((8.0)*x1645);
IkReal x1656=(gconst163*x1623);
IkReal x1657=(gconst155*x1643);
IkReal x1658=((4.0)*gconst153*gconst156);
IkReal x1659=(gconst160*x1636);
IkReal x1660=(x1658+x1599);
IkReal x1661=(x1651+x1598);
IkReal x1662=(x1652+x1653);
IkReal x1663=(x1656+x1657+x1654+x1655);
op[0]=((((-1.0)*gconst167*x1604*x1632))+((x1624*x1650))+((x1601*x1621))+(((-1.0)*x1624*x1627))+(((-1.0)*x1651)));
op[1]=0;
op[2]=((((-1.0)*x1597))+(((-1.0)*gconst159*x1604*x1632))+(((-1.0)*gconst162*x1607*x1629))+(((-1.0)*gconst161*x1608))+((x1601*x1640))+((x1601*x1630))+x1661+(((-1.0)*gconst167*x1632*x1639))+(((-1.0)*x1627*x1635))+(((-1.0)*x1612*x1627))+(((-4.0)*x1606))+((gconst162*gconst167*x1609))+(((-1.0)*gconst163*x1604*x1617))+(((-1.0)*x1662))+((x1619*x1621))+((x1635*x1650))+(((-1.0)*x1624*x1641))+((x1624*x1625))+(((-1.0)*gconst167*x1604*x1610))+((x1610*x1627))+(((-16.0)*x1601))+((x1612*x1650))+(((-1.0)*gconst160*x1608)));
op[3]=((((-1.0)*x1603*x1645))+((gconst163*x1643))+((x1605*x1644))+(((-1.0)*x1603*x1635))+(((-1.0)*x1603*x1634))+((x1616*x1638))+(((-1.0)*x1611*x1624))+(((2.0)*gconst155*x1606))+(((-32.0)*gconst163))+(((-1.0)*gconst160*gconst166*x1611))+(((8.0)*x1647))+((gconst167*x1659))+(((-1.0)*x1603*x1626))+(((32.0)*gconst166))+(((-1.0)*x1663))+(((-1.0)*x1611*x1647))+(((-1.0)*x1603*x1612))+((x1632*x1636))+((x1616*x1622))+((x1611*x1632))+(((-1.0)*x1603*x1607))+(((-1.0)*x1616*x1635))+((x1616*x1617))+(((-2.0)*gconst162*x1609))+((x1605*x1606))+((x1603*x1622))+(((-1.0)*x1612*x1616))+((x1603*x1610))+(((2.0)*gconst167*x1609)));
op[4]=((64.0)+((gconst154*gconst167*x1609))+(((-1.0)*gconst167*x1602*x1604))+(((-1.0)*x1615*x1627))+((x1615*x1650))+((gconst159*gconst162*x1609))+x1600+x1662+((x1619*x1630))+(((-1.0)*gconst162*x1607*x1649))+((x1601*x1620))+(((-1.0)*gconst166*x1631))+((x1619*x1640))+(((-1.0)*x1635*x1641))+(((-1.0)*gconst153*x1608))+(((-1.0)*gconst163*x1617*x1639))+((x1625*x1635))+(((-1.0)*gconst159*x1604*x1622))+(((-1.0)*gconst152*x1608))+(((-1.0)*gconst159*x1604*x1610))+(((-1.0)*gconst157*x1618))+x1597+(((-1.0)*x1612*x1641))+(((-1.0)*x1613*x1632))+(((-1.0)*gconst158*x1612*x1629))+(((-1.0)*x1660))+(((-1.0)*x1661))+(((-1.0)*gconst167*x1610*x1639))+((x1612*x1625))+((x1610*x1648))+((x1610*x1641))+(((-1.0)*gconst156*x1618))+(((-1.0)*gconst164*x1614))+(((-1.0)*gconst154*x1607*x1629))+(((-16.0)*x1619))+(((-1.0)*gconst161*x1646))+((x1612*x1642))+((x1602*x1627)));
op[5]=(((gconst152*gconst164*x1605))+(((-2.0)*gconst154*x1609))+(((-32.0)*gconst155))+(((-1.0)*x1611*x1612))+((x1636*x1638))+((x1605*x1637))+(((-1.0)*x1611*x1626))+x1663+(((-1.0)*x1612*x1636))+(((32.0)*gconst158))+(((-8.0)*x1628))+((gconst156*gconst160*x1605))+(((-1.0)*x1603*x1628))+(((-1.0)*x1611*x1635))+(((-1.0)*x1611*x1634))+((x1622*x1636))+(((-1.0)*x1611*x1645))+(((-1.0)*x1603*x1615))+((x1617*x1636))+(((-1.0)*gconst152*gconst158*x1603))+((x1610*x1636))+(((-1.0)*gconst155*x1623))+((x1602*x1603))+((x1605*x1609))+(((-1.0)*x1607*x1611))+((x1602*x1616))+((x1610*x1611))+(((-1.0)*x1615*x1616))+((x1611*x1622)));
op[6]=((((-1.0)*gconst154*x1607*x1649))+(((-1.0)*gconst153*x1646))+(((-1.0)*x1600))+x1660+(((-1.0)*x1610*x1613))+(((-1.0)*gconst159*x1602*x1604))+((x1615*x1642))+(((-1.0)*gconst158*x1631))+(((-1.0)*x1613*x1622))+((x1602*x1648))+((x1602*x1641))+(((-1.0)*gconst157*x1614))+(((-1.0)*gconst158*x1615*x1629))+((x1615*x1625))+(((-1.0)*x1662))+(((-1.0)*x1612*x1633))+((x1612*x1613))+((x1610*x1633))+((x1619*x1620))+(((-1.0)*x1615*x1641))+(((-1.0)*gconst156*x1614))+(((-1.0)*gconst167*x1602*x1639))+((gconst154*gconst159*x1609)));
op[7]=0;
op[8]=(((x1602*x1633))+(((-1.0)*x1602*x1613))+(((-1.0)*x1658))+(((-1.0)*x1615*x1633))+((x1613*x1615)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1664=(cj1*gconst148);
IkReal x1665=(r20*sj4);
IkReal x1666=((1.0)*sj1);
IkReal x1667=(gconst147*r20);
IkReal x1668=((1.0)*cj4*r22);
IkReal x1669=(gconst147*r21*sj4);
if( IKabs(((((-1.0)*cj1*x1668))+(((-1.0)*gconst148*r21*x1666))+(((-1.0)*cj1*x1669))+(((-1.0)*x1666*x1667))+((x1664*x1665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1667))+((gconst148*sj1*x1665))+(((-1.0)*cj4*r22*x1666))+(((-1.0)*x1666*x1669))+((r21*x1664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1668))+(((-1.0)*gconst148*r21*x1666))+(((-1.0)*cj1*x1669))+(((-1.0)*x1666*x1667))+((x1664*x1665))))+IKsqr((((cj1*x1667))+((gconst148*sj1*x1665))+(((-1.0)*cj4*r22*x1666))+(((-1.0)*x1666*x1669))+((r21*x1664))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1668))+(((-1.0)*gconst148*r21*x1666))+(((-1.0)*cj1*x1669))+(((-1.0)*x1666*x1667))+((x1664*x1665))), (((cj1*x1667))+((gconst148*sj1*x1665))+(((-1.0)*cj4*r22*x1666))+(((-1.0)*x1666*x1669))+((r21*x1664))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1670=IKcos(j2);
IkReal x1671=IKsin(j2);
IkReal x1672=(cj0*r00);
IkReal x1673=((1.0)*gconst147);
IkReal x1674=((0.08)*gconst148);
IkReal x1675=(cj0*r01);
IkReal x1676=((0.08)*gconst147);
IkReal x1677=((1.0)*gconst148);
IkReal x1678=(r10*sj0);
IkReal x1679=(gconst148*sj4);
IkReal x1680=((1.0)*cj0);
IkReal x1681=(r11*sj0);
IkReal x1682=((1.0)*sj0);
IkReal x1683=(sj1*x1670);
IkReal x1684=(cj1*x1671);
IkReal x1685=(cj1*x1670);
IkReal x1686=(sj1*x1671);
IkReal x1687=(x1683+x1684);
evalcond[0]=(((gconst147*r20))+x1686+(((-1.0)*x1685))+((gconst148*r21)));
evalcond[1]=(((cj4*r22))+x1687+((gconst147*r21*sj4))+(((-1.0)*r20*sj4*x1677)));
evalcond[2]=((((-1.0)*x1672*x1673))+(((-1.0)*x1677*x1681))+(((-1.0)*x1673*x1678))+x1687+(((-1.0)*x1675*x1677)));
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(cj4,-1);
if(!x1688.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x1684))+(((0.47)*x1683))+pz+(((-0.08)*r22*sj4*(x1688.value)))+(((-0.11)*x1685))+(((0.11)*x1686)));
evalcond[4]=((((-1.0)*cj4*r12*x1682))+((x1678*x1679))+x1685+(((-1.0)*sj4*x1673*x1675))+(((-1.0)*x1686))+(((-1.0)*cj4*r02*x1680))+(((-1.0)*sj4*x1673*x1681))+((x1672*x1679)));
evalcond[5]=((((-1.0)*x1672*x1674))+(((-1.0)*py*x1682))+((x1675*x1676))+(((0.47)*x1685))+((x1676*x1681))+(((0.11)*x1684))+(((0.11)*x1683))+(((-1.0)*x1674*x1678))+(((-1.0)*px*x1680))+(((0.444)*sj1))+(((-0.47)*x1686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1689=((0.08)*gconst147);
IkReal x1690=((0.08)*gconst148);
CheckValue<IkReal> x1691=IKPowWithIntegerCheck(IKsign((((cj4*gconst148*rxp0_2))+((r21*sj4*x1690))+((r20*sj4*x1689))+(((-1.0)*cj4*gconst147*rxp1_2))+((rxp2_2*sj4)))),-1);
if(!x1691.valid){
continue;
}
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal((((r11*x1689))+(((-1.0)*py))+(((-1.0)*r10*x1690)))),IkReal((((r01*x1689))+(((-1.0)*px))+(((-1.0)*r00*x1690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1691.value)))+(x1692.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1693=IKsin(j0);
IkReal x1694=IKcos(j0);
IkReal x1695=((1.0)*r10);
IkReal x1696=((1.0)*sj4);
IkReal x1697=(cj4*gconst148);
IkReal x1698=(cj4*r11);
IkReal x1699=((1.0)*cj4);
IkReal x1700=(gconst147*x1694);
IkReal x1701=(r00*x1693);
IkReal x1702=(r01*x1693);
IkReal x1703=(r12*x1694);
IkReal x1704=(r02*x1693);
IkReal x1705=((1.0)*x1694);
IkReal x1706=(gconst148*r10*x1694);
evalcond[0]=(((gconst147*x1701))+(((-1.0)*gconst148*r11*x1705))+(((-1.0)*x1695*x1700))+((gconst148*x1702)));
evalcond[1]=((((-1.0)*py*x1705))+(((0.08)*r11*x1700))+((px*x1693))+(((0.08)*gconst148*x1701))+(((-0.08)*gconst147*x1702))+(((-0.08)*x1706)));
evalcond[2]=(((sj4*x1706))+(((-1.0)*r11*x1696*x1700))+(((-1.0)*x1699*x1703))+(((-1.0)*gconst148*x1696*x1701))+((cj4*x1704))+((gconst147*sj4*x1702)));
evalcond[3]=((1.0)+((x1697*x1701))+(((-1.0)*x1694*x1695*x1697))+((sj4*x1704))+(((-1.0)*x1696*x1703))+(((-1.0)*gconst147*x1699*x1702))+((x1698*x1700)));
evalcond[4]=(((cj4*r01*x1700))+(((-1.0)*r12*x1693*x1696))+((gconst147*x1693*x1698))+(((-1.0)*x1693*x1695*x1697))+(((-1.0)*r02*x1694*x1696))+(((-1.0)*r00*x1697*x1705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1707=(gconst147*r20);
IkReal x1708=(gconst148*r21);
IkReal x1709=((-1.0)*r20);
IkReal x1710=(x1707+x1708);
IkReal x1711=((-1.0)+x1710);
IkReal x1712=((1.0)+x1710);
IkReal x1713=x1504;
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1709),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
IkReal x1714=((-1.0)*(x1716.value));
IkReal x1715=(((cj4*r22))+((gconst147*r21*sj4))+(((-1.0)*gconst148*r20*sj4)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1714;
IkReal gconst146=x1714;
IkReal gconst147=(r21*x1713);
IkReal gconst148=(x1709*x1713);
IkReal gconst152=x1711;
IkReal gconst153=x1712;
IkReal gconst154=x1715;
IkReal gconst155=x1715;
IkReal gconst156=x1711;
IkReal gconst157=x1712;
IkReal gconst158=x1715;
IkReal gconst159=x1715;
IkReal gconst160=x1712;
IkReal gconst161=x1711;
IkReal gconst162=x1715;
IkReal gconst163=x1715;
IkReal gconst164=x1712;
IkReal gconst165=x1711;
IkReal gconst166=x1715;
IkReal gconst167=x1715;
IkReal x1717=sj4*sj4;
IkReal x1718=gconst147*gconst147;
IkReal x1719=r20*r20;
IkReal x1720=gconst148*gconst148;
IkReal x1721=r21*r21;
IkReal x1722=cj4*cj4;
IkReal x1723=r22*r22;
IkReal x1724=((24.0)*x1718);
IkReal x1725=((4.0)*x1717);
IkReal x1726=((16.0)*x1717);
IkReal x1727=(x1720*x1721);
IkReal x1728=(x1718*x1721);
IkReal x1729=(x1719*x1720);
IkReal x1730=(x1722*x1723);
IkReal x1731=(x1718*x1719);
IkReal x1732=(gconst147*gconst148*r20*r21);
IkReal x1733=(cj4*gconst148*r20*r22*sj4);
IkReal x1734=(cj4*gconst147*r21*r22*sj4);
IkReal x1735=((8.0)*x1732);
IkReal x1736=(x1717*x1732);
j1eval[0]=((((0.5)*(IKabs(((4.0)+(((-8.0)*x1734))+((x1717*x1735))+(((-1.0)*x1725*x1728))+(((-1.0)*x1725*x1729))+(((8.0)*x1733))+(((-1.0)*x1735))+(((-4.0)*x1727))+(((-4.0)*x1731))+(((-4.0)*x1730)))))))+(((0.5)*(IKabs(((24.0)+(((-1.0)*x1717*x1721*x1724))+(((48.0)*x1736))+(((48.0)*x1733))+(((-48.0)*x1732))+(((-48.0)*x1734))+(((-24.0)*x1730))+(((-24.0)*x1717*x1729))+(((-24.0)*x1727))+(((-1.0)*x1719*x1724)))))))+(IKabs(((16.0)+(((-1.0)*x1726*x1728))+(((-1.0)*x1726*x1729))+(((-16.0)*x1730))+(((-16.0)*x1731))+(((-16.0)*x1727))+(((32.0)*x1736))+(((32.0)*x1733))+(((-32.0)*x1732))+(((-32.0)*x1734))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x1737=((16.0)*gconst161);
IkReal x1738=((16.0)*gconst164);
IkReal x1739=((16.0)*gconst153);
IkReal x1740=((16.0)*gconst156);
IkReal x1741=(gconst163*gconst166);
IkReal x1742=(gconst152*gconst155);
IkReal x1743=((2.0)*gconst165);
IkReal x1744=((1.0)*gconst164);
IkReal x1745=((2.0)*gconst159);
IkReal x1746=(gconst160*gconst164);
IkReal x1747=(gconst158*gconst161);
IkReal x1748=((4.0)*gconst165);
IkReal x1749=(gconst156*gconst161);
IkReal x1750=(gconst155*gconst160);
IkReal x1751=((2.0)*gconst157);
IkReal x1752=(gconst153*gconst162);
IkReal x1753=(gconst156*gconst159);
IkReal x1754=((4.0)*gconst152);
IkReal x1755=(gconst153*gconst154);
IkReal x1756=((2.0)*gconst164);
IkReal x1757=(gconst152*gconst167);
IkReal x1758=((4.0)*gconst160);
IkReal x1759=(gconst158*gconst163);
IkReal x1760=(gconst152*gconst157);
IkReal x1761=(gconst160*gconst165);
IkReal x1762=(gconst152*gconst163);
IkReal x1763=((8.0)*gconst156);
IkReal x1764=(gconst161*gconst162);
IkReal x1765=(gconst159*gconst164);
IkReal x1766=(gconst152*gconst166);
IkReal x1767=(gconst165*gconst166);
IkReal x1768=(gconst153*gconst158);
IkReal x1769=((1.0)*gconst165);
IkReal x1770=(gconst157*gconst160);
IkReal x1771=((16.0)*gconst155);
IkReal x1772=(gconst160*gconst163);
IkReal x1773=(gconst157*gconst158);
IkReal x1774=(gconst158*gconst160);
IkReal x1775=(gconst154*gconst161);
IkReal x1776=((2.0)*gconst156);
IkReal x1777=(gconst153*gconst164);
IkReal x1778=(gconst153*gconst167);
IkReal x1779=((1.0)*gconst156);
IkReal x1780=(gconst152*gconst165);
IkReal x1781=(gconst157*gconst166);
IkReal x1782=(gconst156*gconst167);
IkReal x1783=((8.0)*gconst164);
IkReal x1784=(gconst161*gconst164);
IkReal x1785=(gconst153*gconst166);
IkReal x1786=((4.0)*gconst157);
IkReal x1787=(gconst161*gconst166);
IkReal x1788=(gconst158*gconst165);
IkReal x1789=((1.0)*gconst157);
IkReal x1790=(gconst164*gconst167);
IkReal x1791=((4.0)*x1784);
IkReal x1792=((4.0)*x1749);
IkReal x1793=((4.0)*x1777);
IkReal x1794=((8.0)*x1747);
IkReal x1795=((8.0)*x1785);
IkReal x1796=(gconst163*x1763);
IkReal x1797=(gconst155*x1783);
IkReal x1798=((4.0)*gconst153*gconst156);
IkReal x1799=(gconst160*x1776);
IkReal x1800=(x1798+x1739);
IkReal x1801=(x1791+x1738);
IkReal x1802=(x1793+x1792);
IkReal x1803=(x1797+x1796+x1795+x1794);
op[0]=((((-1.0)*x1791))+((x1741*x1761))+(((-1.0)*gconst167*x1744*x1772))+((x1764*x1790))+(((-1.0)*x1764*x1767)));
op[1]=0;
op[2]=(((x1775*x1790))+(((-1.0)*gconst163*x1744*x1757))+((x1752*x1790))+(((-1.0)*x1767*x1775))+((x1759*x1761))+(((-1.0)*gconst160*x1748))+((x1741*x1780))+((x1764*x1765))+(((-16.0)*x1741))+(((-1.0)*x1752*x1767))+(((-1.0)*x1802))+(((-1.0)*gconst161*x1748))+(((-1.0)*gconst167*x1772*x1779))+(((-1.0)*gconst159*x1744*x1772))+x1801+((x1741*x1770))+((gconst162*gconst167*x1749))+(((-1.0)*x1764*x1781))+(((-4.0)*x1746))+(((-1.0)*gconst167*x1744*x1750))+(((-1.0)*gconst162*x1747*x1769))+(((-1.0)*x1737))+((x1750*x1767)));
op[3]=((((8.0)*x1787))+(((-1.0)*gconst160*gconst166*x1751))+(((-1.0)*x1751*x1787))+((x1743*x1762))+(((-32.0)*gconst163))+((x1745*x1784))+((x1745*x1746))+(((-1.0)*x1756*x1775))+(((-1.0)*x1743*x1785))+((x1756*x1778))+(((2.0)*gconst167*x1749))+(((-1.0)*x1743*x1766))+((x1756*x1762))+(((-1.0)*x1803))+(((-2.0)*gconst162*x1749))+((gconst167*x1799))+(((32.0)*gconst166))+((x1751*x1772))+((x1743*x1750))+(((-1.0)*x1752*x1756))+(((2.0)*gconst155*x1746))+(((-1.0)*x1743*x1775))+(((-1.0)*x1743*x1774))+(((-1.0)*x1743*x1752))+((gconst163*x1783))+((x1772*x1776))+((x1756*x1757))+(((-1.0)*x1743*x1747))+(((-1.0)*x1751*x1764)));
op[4]=((64.0)+(((-1.0)*x1753*x1772))+((x1755*x1790))+(((-1.0)*gconst153*x1748))+(((-1.0)*gconst167*x1742*x1744))+((x1752*x1782))+((gconst154*gconst167*x1749))+(((-1.0)*x1752*x1781))+x1737+x1740+((x1759*x1780))+(((-1.0)*gconst161*x1786))+(((-1.0)*gconst162*x1747*x1789))+(((-1.0)*gconst152*x1748))+((x1765*x1775))+((gconst159*gconst162*x1749))+((x1742*x1767))+(((-1.0)*gconst159*x1744*x1762))+(((-1.0)*gconst156*x1758))+(((-1.0)*gconst164*x1754))+((x1741*x1760))+(((-1.0)*gconst163*x1757*x1779))+(((-1.0)*x1775*x1781))+(((-16.0)*x1759))+(((-1.0)*gconst154*x1747*x1769))+(((-1.0)*x1800))+(((-1.0)*x1801))+(((-1.0)*gconst167*x1750*x1779))+(((-1.0)*x1755*x1767))+((x1752*x1765))+(((-1.0)*gconst166*x1771))+x1802+((x1750*x1781))+((x1750*x1788))+(((-1.0)*gconst159*x1744*x1750))+((x1759*x1770))+(((-1.0)*gconst158*x1752*x1769))+(((-1.0)*gconst157*x1758)));
op[5]=((((-32.0)*gconst155))+((gconst156*gconst160*x1745))+(((-1.0)*x1751*x1785))+(((-1.0)*gconst152*gconst158*x1743))+((x1776*x1778))+((x1750*x1776))+(((-1.0)*gconst155*x1763))+((x1745*x1749))+((x1757*x1776))+(((-1.0)*x1743*x1768))+((x1750*x1751))+(((32.0)*gconst158))+(((-1.0)*x1747*x1751))+((x1751*x1762))+(((-1.0)*x1751*x1752))+(((-8.0)*x1768))+((x1762*x1776))+x1803+((x1742*x1743))+((x1742*x1756))+(((-1.0)*x1752*x1776))+(((-1.0)*x1751*x1774))+(((-1.0)*x1751*x1775))+(((-2.0)*gconst154*x1749))+((gconst152*gconst164*x1745))+(((-1.0)*x1743*x1755))+((x1745*x1777))+(((-1.0)*x1751*x1766))+(((-1.0)*x1755*x1756)));
op[6]=(((x1752*x1753))+(((-1.0)*gconst159*x1742*x1744))+(((-1.0)*x1755*x1781))+(((-1.0)*gconst158*x1755*x1769))+(((-1.0)*x1753*x1762))+((x1750*x1773))+(((-1.0)*gconst154*x1747*x1789))+((x1759*x1760))+((x1742*x1788))+((x1742*x1781))+(((-1.0)*gconst156*x1754))+((x1755*x1765))+(((-1.0)*x1802))+(((-1.0)*x1750*x1753))+(((-1.0)*gconst158*x1771))+(((-1.0)*x1740))+x1800+(((-1.0)*x1752*x1773))+((gconst154*gconst159*x1749))+(((-1.0)*gconst153*x1786))+((x1755*x1782))+(((-1.0)*gconst167*x1742*x1779))+(((-1.0)*gconst157*x1754)));
op[7]=0;
op[8]=((((-1.0)*x1798))+((x1753*x1755))+(((-1.0)*x1755*x1773))+(((-1.0)*x1742*x1753))+((x1742*x1773)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1804=(cj1*gconst148);
IkReal x1805=(r20*sj4);
IkReal x1806=((1.0)*sj1);
IkReal x1807=(gconst147*r20);
IkReal x1808=((1.0)*cj4*r22);
IkReal x1809=(gconst147*r21*sj4);
if( IKabs(((((-1.0)*cj1*x1809))+(((-1.0)*x1806*x1807))+(((-1.0)*cj1*x1808))+((x1804*x1805))+(((-1.0)*gconst148*r21*x1806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x1806))+((gconst148*sj1*x1805))+((r21*x1804))+(((-1.0)*x1806*x1809))+((cj1*x1807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1809))+(((-1.0)*x1806*x1807))+(((-1.0)*cj1*x1808))+((x1804*x1805))+(((-1.0)*gconst148*r21*x1806))))+IKsqr(((((-1.0)*cj4*r22*x1806))+((gconst148*sj1*x1805))+((r21*x1804))+(((-1.0)*x1806*x1809))+((cj1*x1807))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1809))+(((-1.0)*x1806*x1807))+(((-1.0)*cj1*x1808))+((x1804*x1805))+(((-1.0)*gconst148*r21*x1806))), ((((-1.0)*cj4*r22*x1806))+((gconst148*sj1*x1805))+((r21*x1804))+(((-1.0)*x1806*x1809))+((cj1*x1807))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1810=IKcos(j2);
IkReal x1811=IKsin(j2);
IkReal x1812=(cj0*r00);
IkReal x1813=((1.0)*gconst147);
IkReal x1814=((0.08)*gconst148);
IkReal x1815=(cj0*r01);
IkReal x1816=((0.08)*gconst147);
IkReal x1817=((1.0)*gconst148);
IkReal x1818=(r10*sj0);
IkReal x1819=(gconst148*sj4);
IkReal x1820=((1.0)*cj0);
IkReal x1821=(r11*sj0);
IkReal x1822=((1.0)*sj0);
IkReal x1823=(sj1*x1810);
IkReal x1824=(cj1*x1811);
IkReal x1825=(cj1*x1810);
IkReal x1826=(sj1*x1811);
IkReal x1827=(x1824+x1823);
evalcond[0]=(((gconst147*r20))+(((-1.0)*x1825))+((gconst148*r21))+x1826);
evalcond[1]=(((cj4*r22))+((gconst147*r21*sj4))+(((-1.0)*r20*sj4*x1817))+x1827);
evalcond[2]=((((-1.0)*x1813*x1818))+(((-1.0)*x1812*x1813))+(((-1.0)*x1817*x1821))+x1827+(((-1.0)*x1815*x1817)));
CheckValue<IkReal> x1828=IKPowWithIntegerCheck(cj4,-1);
if(!x1828.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((-0.11)*x1825))+pz+(((-0.08)*r22*sj4*(x1828.value)))+(((0.11)*x1826))+(((0.47)*x1823))+(((0.47)*x1824)));
evalcond[4]=(((x1818*x1819))+(((-1.0)*cj4*r12*x1822))+(((-1.0)*sj4*x1813*x1815))+(((-1.0)*x1826))+((x1812*x1819))+(((-1.0)*cj4*r02*x1820))+x1825+(((-1.0)*sj4*x1813*x1821)));
evalcond[5]=((((-1.0)*x1812*x1814))+(((-0.47)*x1826))+(((-1.0)*py*x1822))+((x1815*x1816))+(((-1.0)*x1814*x1818))+(((0.11)*x1823))+(((0.11)*x1824))+(((0.47)*x1825))+((x1816*x1821))+(((0.444)*sj1))+(((-1.0)*px*x1820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1829=((1.0)*gconst148);
IkReal x1830=((1.0)*gconst147);
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1830))+(((-1.0)*r11*x1829)))),IkReal(((((-1.0)*r00*x1830))+(((-1.0)*r01*x1829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(IKsign((((gconst147*r21*sj4))+(((-1.0)*r20*sj4*x1829))+((r22*((((cj4*(gconst147*gconst147)))+((cj4*(gconst148*gconst148))))))))),-1);
if(!x1832.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1831.value)+(((1.5707963267949)*(x1832.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1833=IKsin(j0);
IkReal x1834=IKcos(j0);
IkReal x1835=((1.0)*r10);
IkReal x1836=((1.0)*sj4);
IkReal x1837=(cj4*gconst148);
IkReal x1838=(cj4*r11);
IkReal x1839=((1.0)*cj4);
IkReal x1840=(gconst147*x1834);
IkReal x1841=(r00*x1833);
IkReal x1842=(r01*x1833);
IkReal x1843=(r12*x1834);
IkReal x1844=(r02*x1833);
IkReal x1845=((1.0)*x1834);
IkReal x1846=(gconst148*r10*x1834);
evalcond[0]=(((gconst147*x1841))+(((-1.0)*gconst148*r11*x1845))+(((-1.0)*x1835*x1840))+((gconst148*x1842)));
evalcond[1]=(((px*x1833))+(((0.08)*gconst148*x1841))+(((-0.08)*x1846))+(((0.08)*r11*x1840))+(((-1.0)*py*x1845))+(((-0.08)*gconst147*x1842)));
evalcond[2]=(((cj4*x1844))+((gconst147*sj4*x1842))+(((-1.0)*x1839*x1843))+(((-1.0)*r11*x1836*x1840))+(((-1.0)*gconst148*x1836*x1841))+((sj4*x1846)));
evalcond[3]=((1.0)+((x1838*x1840))+((x1837*x1841))+(((-1.0)*x1834*x1835*x1837))+(((-1.0)*gconst147*x1839*x1842))+(((-1.0)*x1836*x1843))+((sj4*x1844)));
evalcond[4]=((((-1.0)*r00*x1837*x1845))+(((-1.0)*r12*x1833*x1836))+((cj4*r01*x1840))+(((-1.0)*r02*x1834*x1836))+(((-1.0)*x1833*x1835*x1837))+((gconst147*x1833*x1838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1847=(gconst147*r20);
IkReal x1848=(gconst148*r21);
IkReal x1849=((-1.0)*r20);
IkReal x1850=(x1848+x1847);
IkReal x1851=((-1.0)+x1850);
IkReal x1852=((1.0)+x1850);
IkReal x1853=x1504;
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1849),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal x1854=((-1.0)*(x1856.value));
IkReal x1855=(((cj4*r22))+((gconst147*r21*sj4))+(((-1.0)*gconst148*r20*sj4)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst147;
cj5=gconst148;
j5=x1854;
IkReal gconst146=x1854;
IkReal gconst147=(r21*x1853);
IkReal gconst148=(x1849*x1853);
IkReal gconst152=x1851;
IkReal gconst153=x1852;
IkReal gconst154=x1855;
IkReal gconst155=x1855;
IkReal gconst156=x1851;
IkReal gconst157=x1852;
IkReal gconst158=x1855;
IkReal gconst159=x1855;
IkReal gconst160=x1852;
IkReal gconst161=x1851;
IkReal gconst162=x1855;
IkReal gconst163=x1855;
IkReal gconst164=x1852;
IkReal gconst165=x1851;
IkReal gconst166=x1855;
IkReal gconst167=x1855;
IkReal x1857=sj4*sj4;
IkReal x1858=gconst147*gconst147;
IkReal x1859=r20*r20;
IkReal x1860=gconst148*gconst148;
IkReal x1861=r21*r21;
IkReal x1862=cj4*cj4;
IkReal x1863=r22*r22;
IkReal x1864=((24.0)*x1858);
IkReal x1865=((4.0)*x1857);
IkReal x1866=((16.0)*x1857);
IkReal x1867=(x1860*x1861);
IkReal x1868=(x1858*x1861);
IkReal x1869=(x1859*x1860);
IkReal x1870=(x1862*x1863);
IkReal x1871=(x1858*x1859);
IkReal x1872=(gconst147*gconst148*r20*r21);
IkReal x1873=(cj4*gconst148*r20*r22*sj4);
IkReal x1874=(cj4*gconst147*r21*r22*sj4);
IkReal x1875=((8.0)*x1872);
IkReal x1876=(x1857*x1872);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((-24.0)*x1857*x1869))+(((48.0)*x1876))+(((48.0)*x1873))+(((-24.0)*x1870))+(((-48.0)*x1872))+(((-48.0)*x1874))+(((-1.0)*x1859*x1864))+(((-1.0)*x1857*x1861*x1864))+(((-24.0)*x1867)))))))+(((0.5)*(IKabs(((4.0)+(((-1.0)*x1875))+(((-1.0)*x1865*x1869))+(((-1.0)*x1865*x1868))+(((-4.0)*x1867))+(((-4.0)*x1870))+(((-4.0)*x1871))+((x1857*x1875))+(((8.0)*x1873))+(((-8.0)*x1874)))))))+(IKabs(((16.0)+(((-16.0)*x1867))+(((-32.0)*x1874))+(((-32.0)*x1872))+(((-1.0)*x1866*x1868))+(((-1.0)*x1866*x1869))+(((32.0)*x1873))+(((32.0)*x1876))+(((-16.0)*x1871))+(((-16.0)*x1870))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x1877=((16.0)*gconst161);
IkReal x1878=((16.0)*gconst164);
IkReal x1879=((16.0)*gconst153);
IkReal x1880=((16.0)*gconst156);
IkReal x1881=(gconst163*gconst166);
IkReal x1882=(gconst152*gconst155);
IkReal x1883=((2.0)*gconst165);
IkReal x1884=((1.0)*gconst164);
IkReal x1885=((2.0)*gconst159);
IkReal x1886=(gconst160*gconst164);
IkReal x1887=(gconst158*gconst161);
IkReal x1888=((4.0)*gconst165);
IkReal x1889=(gconst156*gconst161);
IkReal x1890=(gconst155*gconst160);
IkReal x1891=((2.0)*gconst157);
IkReal x1892=(gconst153*gconst162);
IkReal x1893=(gconst156*gconst159);
IkReal x1894=((4.0)*gconst152);
IkReal x1895=(gconst153*gconst154);
IkReal x1896=((2.0)*gconst164);
IkReal x1897=(gconst152*gconst167);
IkReal x1898=((4.0)*gconst160);
IkReal x1899=(gconst158*gconst163);
IkReal x1900=(gconst152*gconst157);
IkReal x1901=(gconst160*gconst165);
IkReal x1902=(gconst152*gconst163);
IkReal x1903=((8.0)*gconst156);
IkReal x1904=(gconst161*gconst162);
IkReal x1905=(gconst159*gconst164);
IkReal x1906=(gconst152*gconst166);
IkReal x1907=(gconst165*gconst166);
IkReal x1908=(gconst153*gconst158);
IkReal x1909=((1.0)*gconst165);
IkReal x1910=(gconst157*gconst160);
IkReal x1911=((16.0)*gconst155);
IkReal x1912=(gconst160*gconst163);
IkReal x1913=(gconst157*gconst158);
IkReal x1914=(gconst158*gconst160);
IkReal x1915=(gconst154*gconst161);
IkReal x1916=((2.0)*gconst156);
IkReal x1917=(gconst153*gconst164);
IkReal x1918=(gconst153*gconst167);
IkReal x1919=((1.0)*gconst156);
IkReal x1920=(gconst152*gconst165);
IkReal x1921=(gconst157*gconst166);
IkReal x1922=(gconst156*gconst167);
IkReal x1923=((8.0)*gconst164);
IkReal x1924=(gconst161*gconst164);
IkReal x1925=(gconst153*gconst166);
IkReal x1926=((4.0)*gconst157);
IkReal x1927=(gconst161*gconst166);
IkReal x1928=(gconst158*gconst165);
IkReal x1929=((1.0)*gconst157);
IkReal x1930=(gconst164*gconst167);
IkReal x1931=((4.0)*x1924);
IkReal x1932=((4.0)*x1889);
IkReal x1933=((4.0)*x1917);
IkReal x1934=((8.0)*x1887);
IkReal x1935=((8.0)*x1925);
IkReal x1936=(gconst163*x1903);
IkReal x1937=(gconst155*x1923);
IkReal x1938=((4.0)*gconst153*gconst156);
IkReal x1939=(gconst160*x1916);
IkReal x1940=(x1938+x1879);
IkReal x1941=(x1931+x1878);
IkReal x1942=(x1933+x1932);
IkReal x1943=(x1937+x1936+x1935+x1934);
op[0]=((((-1.0)*x1904*x1907))+((x1904*x1930))+(((-1.0)*gconst167*x1884*x1912))+((x1881*x1901))+(((-1.0)*x1931)));
op[1]=0;
op[2]=(((x1915*x1930))+(((-1.0)*x1907*x1915))+(((-1.0)*gconst163*x1884*x1897))+(((-1.0)*x1877))+(((-1.0)*x1904*x1921))+(((-1.0)*x1942))+((x1904*x1905))+(((-1.0)*gconst167*x1884*x1890))+(((-1.0)*gconst162*x1887*x1909))+((gconst162*gconst167*x1889))+((x1881*x1920))+(((-1.0)*gconst159*x1884*x1912))+x1941+((x1899*x1901))+(((-1.0)*gconst160*x1888))+(((-16.0)*x1881))+(((-1.0)*gconst167*x1912*x1919))+(((-4.0)*x1886))+((x1881*x1910))+(((-1.0)*gconst161*x1888))+(((-1.0)*x1892*x1907))+((x1890*x1907))+((x1892*x1930)));
op[3]=((((-1.0)*x1892*x1896))+((x1912*x1916))+((x1883*x1890))+(((-1.0)*x1883*x1892))+(((8.0)*x1927))+(((-32.0)*gconst163))+(((-1.0)*x1883*x1887))+(((-1.0)*x1943))+((x1896*x1897))+(((2.0)*gconst167*x1889))+((gconst163*x1923))+((x1891*x1912))+(((2.0)*gconst155*x1886))+(((-1.0)*gconst160*gconst166*x1891))+(((32.0)*gconst166))+((gconst167*x1939))+(((-2.0)*gconst162*x1889))+((x1883*x1902))+((x1896*x1918))+(((-1.0)*x1883*x1925))+((x1885*x1924))+(((-1.0)*x1891*x1904))+((x1885*x1886))+(((-1.0)*x1883*x1906))+(((-1.0)*x1896*x1915))+(((-1.0)*x1891*x1927))+(((-1.0)*x1883*x1914))+(((-1.0)*x1883*x1915))+((x1896*x1902)));
op[4]=((64.0)+(((-1.0)*gconst159*x1884*x1890))+((x1905*x1915))+((x1892*x1905))+(((-1.0)*x1915*x1921))+(((-1.0)*gconst161*x1926))+((gconst159*gconst162*x1889))+(((-1.0)*gconst167*x1890*x1919))+(((-1.0)*gconst157*x1898))+((x1899*x1920))+(((-1.0)*x1941))+(((-1.0)*x1940))+(((-1.0)*x1893*x1912))+(((-1.0)*x1895*x1907))+(((-1.0)*gconst159*x1884*x1902))+(((-1.0)*gconst166*x1911))+((x1899*x1910))+(((-1.0)*gconst153*x1888))+((x1892*x1922))+(((-1.0)*gconst164*x1894))+(((-1.0)*gconst154*x1887*x1909))+(((-1.0)*gconst158*x1892*x1909))+x1942+(((-1.0)*gconst152*x1888))+(((-1.0)*x1892*x1921))+x1877+x1880+(((-16.0)*x1899))+((x1895*x1930))+((x1882*x1907))+(((-1.0)*gconst163*x1897*x1919))+((x1890*x1928))+((x1890*x1921))+(((-1.0)*gconst167*x1882*x1884))+((x1881*x1900))+(((-1.0)*gconst162*x1887*x1929))+(((-1.0)*gconst156*x1898))+((gconst154*gconst167*x1889)));
op[5]=(((x1890*x1916))+((x1882*x1896))+(((-32.0)*gconst155))+((x1916*x1918))+(((-1.0)*x1883*x1895))+(((-8.0)*x1908))+((x1882*x1883))+(((-1.0)*gconst152*gconst158*x1883))+(((-1.0)*x1891*x1892))+((x1891*x1902))+(((32.0)*gconst158))+((x1885*x1917))+(((-1.0)*x1892*x1916))+x1943+(((-1.0)*x1895*x1896))+(((-1.0)*x1887*x1891))+((gconst156*gconst160*x1885))+((gconst152*gconst164*x1885))+(((-1.0)*x1891*x1915))+(((-1.0)*x1891*x1914))+(((-1.0)*x1891*x1906))+((x1897*x1916))+((x1885*x1889))+((x1902*x1916))+(((-1.0)*x1883*x1908))+(((-1.0)*x1891*x1925))+(((-2.0)*gconst154*x1889))+(((-1.0)*gconst155*x1903))+((x1890*x1891)));
op[6]=((((-1.0)*x1893*x1902))+((x1890*x1913))+(((-1.0)*gconst154*x1887*x1929))+((x1892*x1893))+(((-1.0)*gconst157*x1894))+(((-1.0)*x1942))+(((-1.0)*x1890*x1893))+((x1882*x1928))+((x1882*x1921))+((gconst154*gconst159*x1889))+x1940+((x1895*x1905))+((x1899*x1900))+(((-1.0)*gconst167*x1882*x1919))+(((-1.0)*x1895*x1921))+(((-1.0)*x1880))+(((-1.0)*gconst153*x1926))+(((-1.0)*x1892*x1913))+(((-1.0)*gconst159*x1882*x1884))+(((-1.0)*gconst156*x1894))+(((-1.0)*gconst158*x1911))+(((-1.0)*gconst158*x1895*x1909))+((x1895*x1922)));
op[7]=0;
op[8]=(((x1893*x1895))+(((-1.0)*x1895*x1913))+((x1882*x1913))+(((-1.0)*x1882*x1893))+(((-1.0)*x1938)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1944=(cj1*gconst148);
IkReal x1945=(r20*sj4);
IkReal x1946=((1.0)*sj1);
IkReal x1947=(gconst147*r20);
IkReal x1948=((1.0)*cj4*r22);
IkReal x1949=(gconst147*r21*sj4);
if( IKabs((((x1944*x1945))+(((-1.0)*cj1*x1949))+(((-1.0)*x1946*x1947))+(((-1.0)*gconst148*r21*x1946))+(((-1.0)*cj1*x1948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst148*sj1*x1945))+((cj1*x1947))+(((-1.0)*x1946*x1949))+((r21*x1944))+(((-1.0)*cj4*r22*x1946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1944*x1945))+(((-1.0)*cj1*x1949))+(((-1.0)*x1946*x1947))+(((-1.0)*gconst148*r21*x1946))+(((-1.0)*cj1*x1948))))+IKsqr((((gconst148*sj1*x1945))+((cj1*x1947))+(((-1.0)*x1946*x1949))+((r21*x1944))+(((-1.0)*cj4*r22*x1946))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1944*x1945))+(((-1.0)*cj1*x1949))+(((-1.0)*x1946*x1947))+(((-1.0)*gconst148*r21*x1946))+(((-1.0)*cj1*x1948))), (((gconst148*sj1*x1945))+((cj1*x1947))+(((-1.0)*x1946*x1949))+((r21*x1944))+(((-1.0)*cj4*r22*x1946))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1950=IKcos(j2);
IkReal x1951=IKsin(j2);
IkReal x1952=(cj0*r00);
IkReal x1953=((1.0)*gconst147);
IkReal x1954=((0.08)*gconst148);
IkReal x1955=(cj0*r01);
IkReal x1956=((0.08)*gconst147);
IkReal x1957=((1.0)*gconst148);
IkReal x1958=(r10*sj0);
IkReal x1959=(gconst148*sj4);
IkReal x1960=((1.0)*cj0);
IkReal x1961=(r11*sj0);
IkReal x1962=((1.0)*sj0);
IkReal x1963=(sj1*x1950);
IkReal x1964=(cj1*x1951);
IkReal x1965=(cj1*x1950);
IkReal x1966=(sj1*x1951);
IkReal x1967=(x1964+x1963);
evalcond[0]=(((gconst147*r20))+(((-1.0)*x1965))+((gconst148*r21))+x1966);
evalcond[1]=((((-1.0)*r20*sj4*x1957))+((cj4*r22))+((gconst147*r21*sj4))+x1967);
evalcond[2]=((((-1.0)*x1957*x1961))+(((-1.0)*x1952*x1953))+x1967+(((-1.0)*x1953*x1958))+(((-1.0)*x1955*x1957)));
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(cj4,-1);
if(!x1968.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((-0.11)*x1965))+(((0.47)*x1964))+(((0.47)*x1963))+pz+(((-0.08)*r22*sj4*(x1968.value)))+(((0.11)*x1966)));
evalcond[4]=((((-1.0)*cj4*r02*x1960))+((x1952*x1959))+(((-1.0)*cj4*r12*x1962))+((x1958*x1959))+(((-1.0)*x1966))+(((-1.0)*sj4*x1953*x1961))+x1965+(((-1.0)*sj4*x1953*x1955)));
evalcond[5]=(((x1956*x1961))+(((-1.0)*x1952*x1954))+(((-1.0)*x1954*x1958))+(((-0.47)*x1966))+((x1955*x1956))+(((0.47)*x1965))+(((-1.0)*px*x1960))+(((-1.0)*py*x1962))+(((0.11)*x1964))+(((0.11)*x1963))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1969=((-1.0)*r21);
IkReal x1971 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1971)==0){
continue;
}
IkReal x1970=pow(x1971,-0.5);
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal(x1969),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
IkReal gconst149=((3.14159265358979)+(((-1.0)*(x1972.value))));
IkReal gconst150=(x1969*x1970);
IkReal gconst151=((1.0)*r20*x1970);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1973.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x1974=((-1.0)*r21);
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal(x1974),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
IkReal x1975=((1.0)*(x1977.value));
IkReal x1976=x1970;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x1975)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x1975)));
IkReal gconst150=(x1974*x1976);
IkReal gconst151=((1.0)*r20*x1976);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x1978=((-1.0)*r21);
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal(x1978),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
IkReal x1979=((1.0)*(x1981.value));
IkReal x1980=x1970;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x1979)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x1979)));
IkReal gconst150=(x1978*x1980);
IkReal gconst151=((1.0)*r20*x1980);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1982=((-1.0)*r21);
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal(x1982),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
IkReal x1983=((1.0)*(x1985.value));
IkReal x1984=x1970;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x1983)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x1983)));
IkReal gconst150=(x1982*x1984);
IkReal gconst151=((1.0)*r20*x1984);
IkReal x1986=(rxp2_2*sj4);
IkReal x1987=(r21*rxp1_2);
IkReal x1988=(r20*rxp0_2);
IkReal x1989=x1970;
IkReal x1990=((12.5)*cj4*x1989);
IkReal x1991=((1.0)*cj4*x1989);
j0eval[0]=(((x1988*x1990))+(((12.5)*x1986))+((x1987*x1990)));
j0eval[1]=IKsign((((x1988*x1991))+x1986+((x1987*x1991))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1992=((0.08)*gconst151);
IkReal x1993=((0.08)*gconst150);
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1992))+((r11*x1993))+(((-1.0)*py)))),IkReal(((((-1.0)*r00*x1992))+(((-1.0)*px))+((r01*x1993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*gconst150*rxp1_2))+((r21*sj4*x1992))+((cj4*gconst151*rxp0_2))+((r20*sj4*x1993))+((rxp2_2*sj4)))),-1);
if(!x1995.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1994.value)+(((1.5707963267949)*(x1995.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1996=IKsin(j0);
IkReal x1997=IKcos(j0);
IkReal x1998=((1.0)*sj4);
IkReal x1999=((1.0)*gconst151);
IkReal x2000=(gconst151*r00);
IkReal x2001=(gconst150*r01);
IkReal x2002=(gconst150*x1997);
IkReal x2003=(cj4*x1996);
IkReal x2004=((0.08)*x1996);
IkReal x2005=(r12*x1997);
IkReal x2006=(cj4*x1997);
IkReal x2007=(sj4*x1996);
IkReal x2008=(gconst151*r10*x1997);
evalcond[0]=((((-1.0)*r10*x2002))+((gconst150*r00*x1996))+(((-1.0)*r11*x1997*x1999))+((gconst151*r01*x1996)));
evalcond[1]=((((-1.0)*py*x1997))+(((0.08)*r11*x2002))+(((-0.08)*x2008))+((x2000*x2004))+(((-1.0)*x2001*x2004))+((px*x1996)));
evalcond[2]=((((-1.0)*x1996*x1998*x2000))+((r02*x2003))+(((-1.0)*r11*x1998*x2002))+(((-1.0)*cj4*x2005))+((x2001*x2007))+((sj4*x2008)));
evalcond[3]=((1.0)+(((-1.0)*x1998*x2005))+((cj4*r11*x2002))+((x2000*x2003))+((r02*x2007))+(((-1.0)*x2001*x2003))+(((-1.0)*r10*x1999*x2006)));
evalcond[4]=((((-1.0)*r00*x1999*x2006))+(((-1.0)*r02*x1997*x1998))+(((-1.0)*r12*x1996*x1998))+((x2001*x2006))+((gconst150*r11*x2003))+(((-1.0)*r10*x1999*x2003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2009=((-1.0)*r21);
CheckValue<IkReal> x2012 = IKatan2WithCheck(IkReal(x2009),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2012.valid){
continue;
}
IkReal x2010=((1.0)*(x2012.value));
IkReal x2011=x1970;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2010)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2010)));
IkReal gconst150=(x2009*x2011);
IkReal gconst151=((1.0)*r20*x2011);
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(cj4,-1);
if(!x2039.valid){
continue;
}
IkReal x2013=x2039.value;
IkReal x2014=(gconst150*r20);
IkReal x2015=((235.0)*sj4);
IkReal x2016=(gconst150*r21);
IkReal x2017=((0.32)*cj0);
IkReal x2018=(gconst151*r00);
IkReal x2019=(gconst151*r20);
IkReal x2020=(cj0*px);
IkReal x2021=((705.0)*sj4);
IkReal x2022=(py*sj0);
IkReal x2023=((1.32)*sj4);
IkReal x2024=(gconst150*r01);
IkReal x2025=(cj4*r22);
IkReal x2026=((0.44)*sj4);
IkReal x2027=(gconst151*r21);
IkReal x2028=((0.96)*cj0);
IkReal x2029=((165.0)*x2014);
IkReal x2030=((165.0)*x2027);
IkReal x2031=((705.0)*x2025);
IkReal x2032=(r22*sj4*x2013);
IkReal x2033=(gconst150*r11*sj0);
IkReal x2034=(gconst151*r10*sj0);
IkReal x2035=((120.0)*x2032);
IkReal x2036=(x2016*x2021);
IkReal x2037=(((x2019*x2021))+(((1500.0)*pz)));
IkReal x2038=(x2029+x2036+x2035+x2031+x2030);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((-222.0)+((x2015*x2016))+(((40.0)*x2032))+(((-500.0)*pz))+(((55.0)*x2027))+(((-1.0)*x2015*x2019))+(((55.0)*x2014))+(((235.0)*x2025)))))))+(IKabs(((((4.0)*x2022))+(((4.0)*x2020))+(((-1.0)*x2017*x2024))+(((-1.88)*x2027))+(((-1.0)*x2019*x2026))+((x2016*x2026))+(((-0.32)*x2033))+(((0.32)*x2034))+(((-1.88)*x2014))+((x2017*x2018))+(((0.44)*x2025)))))+(((0.008)*(IKabs(((-222.0)+x2038+(((-1.0)*x2037)))))))+(((2.0)*(IKabs(((((12.0)*x2022))+(((12.0)*x2020))+((x2018*x2028))+(((0.96)*x2034))+(((-5.64)*x2027))+(((1.32)*x2025))+(((-1.0)*x2019*x2023))+(((-1.0)*x2024*x2028))+((x2016*x2023))+(((-0.96)*x2033))+(((-5.64)*x2014)))))))+(((0.008)*(IKabs(((222.0)+x2038+(((-1.0)*x2037))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(cj4,-1);
if(!x2069.valid){
continue;
}
IkReal x2040=x2069.value;
IkReal x2041=cj4*cj4;
IkReal x2042=((222.0)*cj4);
IkReal x2043=(cj4*gconst151);
IkReal x2044=(r22*sj4);
IkReal x2045=((0.008)*x2040);
IkReal x2046=((705.0)*sj4);
IkReal x2047=(cj4*gconst150);
IkReal x2048=((235.0)*sj4);
IkReal x2049=(cj4*pz);
IkReal x2050=((120.0)*x2044);
IkReal x2051=((1500.0)*x2049);
IkReal x2052=((40.0)*x2044);
IkReal x2053=((500.0)*x2049);
IkReal x2054=(r22*x2041);
IkReal x2055=((165.0)*r21*x2043);
IkReal x2056=((705.0)*x2054);
IkReal x2057=((165.0)*r20*x2047);
IkReal x2058=((235.0)*x2054);
IkReal x2059=((55.0)*r20*x2047);
IkReal x2060=((55.0)*r21*x2043);
IkReal x2061=(r21*x2046*x2047);
IkReal x2062=(r20*x2043*x2046);
IkReal x2063=(r21*x2047*x2048);
IkReal x2064=(r20*x2043*x2048);
IkReal x2065=(x2064+x2053);
IkReal x2066=(x2062+x2051);
IkReal x2067=(x2061+x2050+x2055+x2057+x2056);
IkReal x2068=(x2060+x2063+x2052+x2059+x2058);
op[0]=(x2045*(((((-1.0)*x2042))+x2068+(((-1.0)*x2065)))));
op[1]=0;
op[2]=(x2045*(((((-1.0)*x2042))+x2067+(((-1.0)*x2066)))));
op[3]=0;
op[4]=(x2045*((x2067+x2042+(((-1.0)*x2066)))));
op[5]=0;
op[6]=(x2045*((x2068+x2042+(((-1.0)*x2065)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2070=(gconst150*r20);
IkReal x2071=((0.32)*cj0);
IkReal x2072=(gconst151*r00);
IkReal x2073=(cj0*px);
IkReal x2074=(py*sj0);
IkReal x2075=((0.32)*sj0);
IkReal x2076=(gconst150*r11);
IkReal x2077=(gconst150*r01);
IkReal x2078=(gconst151*r10);
IkReal x2079=((0.96)*sj0);
IkReal x2080=((0.96)*cj0);
IkReal x2081=(gconst151*r21);
IkReal x2082=(cj4*r22);
IkReal x2083=((4.0)*x2073);
IkReal x2084=((0.44)*x2082);
IkReal x2085=((4.0)*x2074);
IkReal x2086=((1.88)*x2070);
IkReal x2087=((1.88)*x2081);
IkReal x2088=(gconst151*r20*sj4);
IkReal x2089=(gconst150*r21*sj4);
IkReal x2090=((0.44)*x2089);
IkReal x2091=(x2075*x2078);
IkReal x2092=(x2071*x2072);
IkReal x2093=(x2071*x2077);
IkReal x2094=(x2075*x2076);
IkReal x2095=((0.44)*x2088);
IkReal x2096=(x2095+x2094+x2093+x2086+x2087);
IkReal x2097=(x2091+x2090+x2092+x2083+x2084+x2085);
IkReal x2098=((((-5.64)*x2070))+(((-5.64)*x2081))+(((-1.32)*x2088))+(((-1.0)*x2076*x2079))+((x2072*x2080))+(((-1.0)*x2077*x2080))+(((1.32)*x2089))+(((1.32)*x2082))+(((12.0)*x2074))+(((12.0)*x2073))+((x2078*x2079)));
j1evalpoly[0]=((((-1.0)*x2096))+((x2098*(htj1*htj1*htj1*htj1)))+(((-3.552)*(htj1*htj1*htj1*htj1*htj1)))+x2097+((x2098*(htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2096))+x2097))))+(((-7.104)*(htj1*htj1*htj1)))+(((-3.552)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2099=((1.0)*cj1);
IkReal x2100=(cj4*r22);
IkReal x2101=(gconst151*r21);
IkReal x2102=((1.0)*sj1);
IkReal x2103=(gconst150*r20);
IkReal x2104=(gconst150*r21*sj4);
IkReal x2105=(gconst151*r20*sj4);
if( IKabs(((((-1.0)*x2102*x2103))+(((-1.0)*x2101*x2102))+(((-1.0)*x2099*x2104))+(((-1.0)*x2099*x2100))+((cj1*x2105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2100*x2102))+(((-1.0)*x2102*x2104))+((cj1*x2103))+((cj1*x2101))+((sj1*x2105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2102*x2103))+(((-1.0)*x2101*x2102))+(((-1.0)*x2099*x2104))+(((-1.0)*x2099*x2100))+((cj1*x2105))))+IKsqr(((((-1.0)*x2100*x2102))+(((-1.0)*x2102*x2104))+((cj1*x2103))+((cj1*x2101))+((sj1*x2105))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2102*x2103))+(((-1.0)*x2101*x2102))+(((-1.0)*x2099*x2104))+(((-1.0)*x2099*x2100))+((cj1*x2105))), ((((-1.0)*x2100*x2102))+(((-1.0)*x2102*x2104))+((cj1*x2103))+((cj1*x2101))+((sj1*x2105))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2106=IKcos(j2);
IkReal x2107=IKsin(j2);
IkReal x2108=(gconst150*sj4);
IkReal x2109=((1.0)*sj0);
IkReal x2110=((1.0)*cj0);
IkReal x2111=((0.08)*sj0);
IkReal x2112=(gconst151*r10);
IkReal x2113=((0.08)*cj0);
IkReal x2114=(gconst151*r00);
IkReal x2115=(sj1*x2106);
IkReal x2116=(cj1*x2107);
IkReal x2117=(cj1*x2106);
IkReal x2118=(sj1*x2107);
IkReal x2119=(x2115+x2116);
evalcond[0]=(x2118+((gconst150*r20))+((gconst151*r21))+(((-1.0)*x2117)));
evalcond[1]=(((r21*x2108))+((cj4*r22))+x2119+(((-1.0)*gconst151*r20*sj4)));
evalcond[2]=((((-1.0)*gconst150*r00*x2110))+(((-1.0)*gconst151*r01*x2110))+x2119+(((-1.0)*gconst150*r10*x2109))+(((-1.0)*gconst151*r11*x2109)));
CheckValue<IkReal> x2120=IKPowWithIntegerCheck(cj4,-1);
if(!x2120.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x2115))+(((0.47)*x2116))+(((0.11)*x2118))+pz+(((-0.11)*x2117))+(((-0.08)*r22*sj4*(x2120.value))));
evalcond[4]=((((-1.0)*r01*x2108*x2110))+x2117+(((-1.0)*cj4*r02*x2110))+((cj0*sj4*x2114))+(((-1.0)*r11*x2108*x2109))+((sj0*sj4*x2112))+(((-1.0)*x2118))+(((-1.0)*cj4*r12*x2109)));
evalcond[5]=(((gconst150*r11*x2111))+(((0.47)*x2117))+((gconst150*r01*x2113))+(((0.11)*x2115))+(((0.11)*x2116))+(((-0.47)*x2118))+(((-1.0)*x2111*x2112))+(((-1.0)*py*x2109))+(((0.444)*sj1))+(((-1.0)*px*x2110))+(((-1.0)*x2113*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2121=((1.0)*gconst151);
IkReal x2122=((1.0)*gconst150);
CheckValue<IkReal> x2123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x2121))+((r22*((((cj4*(gconst150*gconst150)))+((cj4*(gconst151*gconst151)))))))+((gconst150*r21*sj4)))),-1);
if(!x2123.valid){
continue;
}
CheckValue<IkReal> x2124 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2122))+(((-1.0)*r11*x2121)))),IkReal(((((-1.0)*r01*x2121))+(((-1.0)*r00*x2122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2124.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2123.value)))+(x2124.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2125=IKsin(j0);
IkReal x2126=IKcos(j0);
IkReal x2127=((1.0)*sj4);
IkReal x2128=((1.0)*gconst151);
IkReal x2129=(gconst151*r00);
IkReal x2130=(gconst150*r01);
IkReal x2131=(gconst150*x2126);
IkReal x2132=(cj4*x2125);
IkReal x2133=((0.08)*x2125);
IkReal x2134=(r12*x2126);
IkReal x2135=(cj4*x2126);
IkReal x2136=(sj4*x2125);
IkReal x2137=(gconst151*r10*x2126);
evalcond[0]=(((gconst150*r00*x2125))+(((-1.0)*r11*x2126*x2128))+((gconst151*r01*x2125))+(((-1.0)*r10*x2131)));
evalcond[1]=((((-0.08)*x2137))+(((0.08)*r11*x2131))+((px*x2125))+(((-1.0)*x2130*x2133))+((x2129*x2133))+(((-1.0)*py*x2126)));
evalcond[2]=(((r02*x2132))+((sj4*x2137))+(((-1.0)*x2125*x2127*x2129))+(((-1.0)*r11*x2127*x2131))+(((-1.0)*cj4*x2134))+((x2130*x2136)));
evalcond[3]=((1.0)+((r02*x2136))+(((-1.0)*r10*x2128*x2135))+(((-1.0)*x2127*x2134))+(((-1.0)*x2130*x2132))+((x2129*x2132))+((cj4*r11*x2131)));
evalcond[4]=(((gconst150*r11*x2132))+(((-1.0)*r10*x2128*x2132))+(((-1.0)*r02*x2126*x2127))+(((-1.0)*r00*x2128*x2135))+(((-1.0)*r12*x2125*x2127))+((x2130*x2135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2138=((-1.0)*r21);
CheckValue<IkReal> x2141 = IKatan2WithCheck(IkReal(x2138),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2141.valid){
continue;
}
IkReal x2139=((1.0)*(x2141.value));
IkReal x2140=x1970;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2139)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2139)));
IkReal gconst150=(x2138*x2140);
IkReal gconst151=((1.0)*r20*x2140);
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(cj4,-1);
if(!x2168.valid){
continue;
}
IkReal x2142=x2168.value;
IkReal x2143=(gconst150*r20);
IkReal x2144=((235.0)*sj4);
IkReal x2145=(gconst150*r21);
IkReal x2146=((0.32)*cj0);
IkReal x2147=(gconst151*r00);
IkReal x2148=(gconst151*r20);
IkReal x2149=(cj0*px);
IkReal x2150=((705.0)*sj4);
IkReal x2151=(py*sj0);
IkReal x2152=((1.32)*sj4);
IkReal x2153=(gconst150*r01);
IkReal x2154=(cj4*r22);
IkReal x2155=((0.44)*sj4);
IkReal x2156=(gconst151*r21);
IkReal x2157=((0.96)*cj0);
IkReal x2158=((165.0)*x2143);
IkReal x2159=((165.0)*x2156);
IkReal x2160=((705.0)*x2154);
IkReal x2161=(r22*sj4*x2142);
IkReal x2162=(gconst150*r11*sj0);
IkReal x2163=(gconst151*r10*sj0);
IkReal x2164=((120.0)*x2161);
IkReal x2165=(x2145*x2150);
IkReal x2166=(((x2148*x2150))+(((1500.0)*pz)));
IkReal x2167=(x2165+x2164+x2160+x2158+x2159);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((222.0)+x2167+(((-1.0)*x2166)))))))+(((0.008)*(IKabs(((-222.0)+(((-1.0)*x2144*x2148))+(((55.0)*x2143))+(((-500.0)*pz))+(((55.0)*x2156))+(((235.0)*x2154))+((x2144*x2145))+(((40.0)*x2161)))))))+(((0.008)*(IKabs(((-222.0)+x2167+(((-1.0)*x2166)))))))+(((2.0)*(IKabs(((((0.96)*x2163))+((x2147*x2157))+((x2145*x2152))+(((-1.0)*x2148*x2152))+(((-1.0)*x2153*x2157))+(((12.0)*x2149))+(((12.0)*x2151))+(((-5.64)*x2143))+(((-5.64)*x2156))+(((1.32)*x2154))+(((-0.96)*x2162)))))))+(IKabs((((x2146*x2147))+((x2145*x2155))+(((-1.0)*x2148*x2155))+(((-1.88)*x2156))+(((-0.32)*x2162))+(((-1.88)*x2143))+(((0.44)*x2154))+(((4.0)*x2151))+(((0.32)*x2163))+(((4.0)*x2149))+(((-1.0)*x2146*x2153))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(cj4,-1);
if(!x2198.valid){
continue;
}
IkReal x2169=x2198.value;
IkReal x2170=cj4*cj4;
IkReal x2171=((222.0)*cj4);
IkReal x2172=(cj4*gconst151);
IkReal x2173=(r22*sj4);
IkReal x2174=((0.008)*x2169);
IkReal x2175=((705.0)*sj4);
IkReal x2176=(cj4*gconst150);
IkReal x2177=((235.0)*sj4);
IkReal x2178=(cj4*pz);
IkReal x2179=((120.0)*x2173);
IkReal x2180=((1500.0)*x2178);
IkReal x2181=((40.0)*x2173);
IkReal x2182=((500.0)*x2178);
IkReal x2183=(r22*x2170);
IkReal x2184=((165.0)*r21*x2172);
IkReal x2185=((705.0)*x2183);
IkReal x2186=((165.0)*r20*x2176);
IkReal x2187=((235.0)*x2183);
IkReal x2188=((55.0)*r20*x2176);
IkReal x2189=((55.0)*r21*x2172);
IkReal x2190=(r21*x2175*x2176);
IkReal x2191=(r20*x2172*x2175);
IkReal x2192=(r21*x2176*x2177);
IkReal x2193=(r20*x2172*x2177);
IkReal x2194=(x2193+x2182);
IkReal x2195=(x2191+x2180);
IkReal x2196=(x2179+x2190+x2186+x2185+x2184);
IkReal x2197=(x2192+x2181+x2187+x2189+x2188);
op[0]=(x2174*((x2197+(((-1.0)*x2194))+(((-1.0)*x2171)))));
op[1]=0;
op[2]=(x2174*((x2196+(((-1.0)*x2195))+(((-1.0)*x2171)))));
op[3]=0;
op[4]=(x2174*((x2171+x2196+(((-1.0)*x2195)))));
op[5]=0;
op[6]=(x2174*((x2171+x2197+(((-1.0)*x2194)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2199=(gconst150*r20);
IkReal x2200=((0.32)*cj0);
IkReal x2201=(gconst151*r00);
IkReal x2202=(cj0*px);
IkReal x2203=(py*sj0);
IkReal x2204=((0.32)*sj0);
IkReal x2205=(gconst150*r11);
IkReal x2206=(gconst150*r01);
IkReal x2207=(gconst151*r10);
IkReal x2208=((0.96)*sj0);
IkReal x2209=((0.96)*cj0);
IkReal x2210=(gconst151*r21);
IkReal x2211=(cj4*r22);
IkReal x2212=((4.0)*x2202);
IkReal x2213=((0.44)*x2211);
IkReal x2214=((4.0)*x2203);
IkReal x2215=((1.88)*x2199);
IkReal x2216=((1.88)*x2210);
IkReal x2217=(gconst151*r20*sj4);
IkReal x2218=(gconst150*r21*sj4);
IkReal x2219=((0.44)*x2218);
IkReal x2220=(x2204*x2207);
IkReal x2221=(x2200*x2201);
IkReal x2222=(x2200*x2206);
IkReal x2223=(x2204*x2205);
IkReal x2224=((0.44)*x2217);
IkReal x2225=(x2224+x2222+x2223+x2216+x2215);
IkReal x2226=(x2220+x2221+x2213+x2212+x2214+x2219);
IkReal x2227=((((-5.64)*x2210))+(((1.32)*x2211))+(((1.32)*x2218))+(((-1.0)*x2205*x2208))+(((-1.32)*x2217))+((x2201*x2209))+(((12.0)*x2203))+(((12.0)*x2202))+(((-1.0)*x2206*x2209))+((x2207*x2208))+(((-5.64)*x2199)));
j1evalpoly[0]=(x2226+((x2227*(htj1*htj1*htj1*htj1)))+(((-3.552)*(htj1*htj1*htj1*htj1*htj1)))+((x2227*(htj1*htj1)))+(((-1.0)*x2225))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2226+(((-1.0)*x2225))))))+(((-7.104)*(htj1*htj1*htj1)))+(((-3.552)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2228=((1.0)*cj1);
IkReal x2229=(cj4*r22);
IkReal x2230=(gconst151*r21);
IkReal x2231=((1.0)*sj1);
IkReal x2232=(gconst150*r20);
IkReal x2233=(gconst150*r21*sj4);
IkReal x2234=(gconst151*r20*sj4);
if( IKabs(((((-1.0)*x2228*x2229))+(((-1.0)*x2228*x2233))+(((-1.0)*x2230*x2231))+(((-1.0)*x2231*x2232))+((cj1*x2234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2234))+(((-1.0)*x2229*x2231))+(((-1.0)*x2231*x2233))+((cj1*x2230))+((cj1*x2232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2228*x2229))+(((-1.0)*x2228*x2233))+(((-1.0)*x2230*x2231))+(((-1.0)*x2231*x2232))+((cj1*x2234))))+IKsqr((((sj1*x2234))+(((-1.0)*x2229*x2231))+(((-1.0)*x2231*x2233))+((cj1*x2230))+((cj1*x2232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2228*x2229))+(((-1.0)*x2228*x2233))+(((-1.0)*x2230*x2231))+(((-1.0)*x2231*x2232))+((cj1*x2234))), (((sj1*x2234))+(((-1.0)*x2229*x2231))+(((-1.0)*x2231*x2233))+((cj1*x2230))+((cj1*x2232))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2235=IKcos(j2);
IkReal x2236=IKsin(j2);
IkReal x2237=(gconst150*sj4);
IkReal x2238=((1.0)*sj0);
IkReal x2239=((1.0)*cj0);
IkReal x2240=((0.08)*sj0);
IkReal x2241=(gconst151*r10);
IkReal x2242=((0.08)*cj0);
IkReal x2243=(gconst151*r00);
IkReal x2244=(sj1*x2235);
IkReal x2245=(cj1*x2236);
IkReal x2246=(cj1*x2235);
IkReal x2247=(sj1*x2236);
IkReal x2248=(x2244+x2245);
evalcond[0]=(x2247+(((-1.0)*x2246))+((gconst150*r20))+((gconst151*r21)));
evalcond[1]=(x2248+((cj4*r22))+((r21*x2237))+(((-1.0)*gconst151*r20*sj4)));
evalcond[2]=(x2248+(((-1.0)*gconst150*r10*x2238))+(((-1.0)*gconst150*r00*x2239))+(((-1.0)*gconst151*r01*x2239))+(((-1.0)*gconst151*r11*x2238)));
CheckValue<IkReal> x2249=IKPowWithIntegerCheck(cj4,-1);
if(!x2249.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x2245))+(((0.47)*x2244))+(((0.11)*x2247))+(((-0.11)*x2246))+pz+(((-0.08)*r22*sj4*(x2249.value))));
evalcond[4]=((((-1.0)*r11*x2237*x2238))+x2246+(((-1.0)*x2247))+(((-1.0)*r01*x2237*x2239))+(((-1.0)*cj4*r12*x2238))+(((-1.0)*cj4*r02*x2239))+((sj0*sj4*x2241))+((cj0*sj4*x2243)));
evalcond[5]=((((-1.0)*py*x2238))+(((0.47)*x2246))+(((0.11)*x2245))+(((0.11)*x2244))+((gconst150*r01*x2242))+(((-1.0)*x2240*x2241))+(((-1.0)*x2242*x2243))+(((-1.0)*px*x2239))+((gconst150*r11*x2240))+(((0.444)*sj1))+(((-0.47)*x2247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2250=((1.0)*gconst150);
IkReal x2251=(gconst151*sj4);
IkReal x2252=((1.0)*cj4);
CheckValue<IkReal> x2253 = IKatan2WithCheck(IkReal((((r10*x2251))+(((-1.0)*r12*x2252))+(((-1.0)*r11*sj4*x2250)))),IkReal(((((-1.0)*r02*x2252))+((r00*x2251))+(((-1.0)*r01*sj4*x2250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2253.valid){
continue;
}
CheckValue<IkReal> x2254=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2250))+(((-1.0)*gconst151*r21)))),-1);
if(!x2254.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2253.value)+(((1.5707963267949)*(x2254.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2255=IKsin(j0);
IkReal x2256=IKcos(j0);
IkReal x2257=((1.0)*sj4);
IkReal x2258=((1.0)*gconst151);
IkReal x2259=(gconst151*r00);
IkReal x2260=(gconst150*r01);
IkReal x2261=(gconst150*x2256);
IkReal x2262=(cj4*x2255);
IkReal x2263=((0.08)*x2255);
IkReal x2264=(r12*x2256);
IkReal x2265=(cj4*x2256);
IkReal x2266=(sj4*x2255);
IkReal x2267=(gconst151*r10*x2256);
evalcond[0]=((((-1.0)*r11*x2256*x2258))+(((-1.0)*r10*x2261))+((gconst150*r00*x2255))+((gconst151*r01*x2255)));
evalcond[1]=(((x2259*x2263))+(((-1.0)*x2260*x2263))+(((-0.08)*x2267))+((px*x2255))+(((0.08)*r11*x2261))+(((-1.0)*py*x2256)));
evalcond[2]=((((-1.0)*x2255*x2257*x2259))+((x2260*x2266))+((sj4*x2267))+(((-1.0)*r11*x2257*x2261))+((r02*x2262))+(((-1.0)*cj4*x2264)));
evalcond[3]=((1.0)+((x2259*x2262))+(((-1.0)*r10*x2258*x2265))+(((-1.0)*x2257*x2264))+((r02*x2266))+(((-1.0)*x2260*x2262))+((cj4*r11*x2261)));
evalcond[4]=(((x2260*x2265))+(((-1.0)*r12*x2255*x2257))+(((-1.0)*r10*x2258*x2262))+((gconst150*r11*x2262))+(((-1.0)*r02*x2256*x2257))+(((-1.0)*r00*x2258*x2265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2268=((-1.0)*r21);
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(x2268),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
IkReal x2269=((1.0)*(x2271.value));
IkReal x2270=x1970;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst150;
cj5=gconst151;
j5=((3.14159265)+(((-1.0)*x2269)));
IkReal gconst149=((3.14159265358979)+(((-1.0)*x2269)));
IkReal gconst150=(x2268*x2270);
IkReal gconst151=((1.0)*r20*x2270);
CheckValue<IkReal> x2298=IKPowWithIntegerCheck(cj4,-1);
if(!x2298.valid){
continue;
}
IkReal x2272=x2298.value;
IkReal x2273=(gconst150*r20);
IkReal x2274=((235.0)*sj4);
IkReal x2275=(gconst150*r21);
IkReal x2276=((0.32)*cj0);
IkReal x2277=(gconst151*r00);
IkReal x2278=(gconst151*r20);
IkReal x2279=(cj0*px);
IkReal x2280=((705.0)*sj4);
IkReal x2281=(py*sj0);
IkReal x2282=((1.32)*sj4);
IkReal x2283=(gconst150*r01);
IkReal x2284=(cj4*r22);
IkReal x2285=((0.44)*sj4);
IkReal x2286=(gconst151*r21);
IkReal x2287=((0.96)*cj0);
IkReal x2288=((165.0)*x2273);
IkReal x2289=((165.0)*x2286);
IkReal x2290=((705.0)*x2284);
IkReal x2291=(r22*sj4*x2272);
IkReal x2292=(gconst150*r11*sj0);
IkReal x2293=(gconst151*r10*sj0);
IkReal x2294=((120.0)*x2291);
IkReal x2295=(x2275*x2280);
IkReal x2296=(((x2278*x2280))+(((1500.0)*pz)));
IkReal x2297=(x2288+x2289+x2290+x2295+x2294);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((222.0)+x2297+(((-1.0)*x2296)))))))+(((0.008)*(IKabs(((-222.0)+x2297+(((-1.0)*x2296)))))))+(((0.008)*(IKabs(((-222.0)+(((55.0)*x2286))+(((-1.0)*x2274*x2278))+(((-500.0)*pz))+(((55.0)*x2273))+(((235.0)*x2284))+((x2274*x2275))+(((40.0)*x2291)))))))+(((2.0)*(IKabs(((((1.32)*x2284))+(((0.96)*x2293))+(((-0.96)*x2292))+(((12.0)*x2279))+((x2277*x2287))+((x2275*x2282))+(((-5.64)*x2286))+(((-1.0)*x2278*x2282))+(((12.0)*x2281))+(((-5.64)*x2273))+(((-1.0)*x2283*x2287)))))))+(IKabs(((((-1.0)*x2276*x2283))+(((0.44)*x2284))+(((0.32)*x2293))+(((4.0)*x2281))+(((-1.88)*x2286))+((x2276*x2277))+((x2275*x2285))+(((-1.0)*x2278*x2285))+(((4.0)*x2279))+(((-0.32)*x2292))+(((-1.88)*x2273))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2328=IKPowWithIntegerCheck(cj4,-1);
if(!x2328.valid){
continue;
}
IkReal x2299=x2328.value;
IkReal x2300=cj4*cj4;
IkReal x2301=((222.0)*cj4);
IkReal x2302=(cj4*gconst151);
IkReal x2303=(r22*sj4);
IkReal x2304=((0.008)*x2299);
IkReal x2305=((705.0)*sj4);
IkReal x2306=(cj4*gconst150);
IkReal x2307=((235.0)*sj4);
IkReal x2308=(cj4*pz);
IkReal x2309=((120.0)*x2303);
IkReal x2310=((1500.0)*x2308);
IkReal x2311=((40.0)*x2303);
IkReal x2312=((500.0)*x2308);
IkReal x2313=(r22*x2300);
IkReal x2314=((165.0)*r21*x2302);
IkReal x2315=((705.0)*x2313);
IkReal x2316=((165.0)*r20*x2306);
IkReal x2317=((235.0)*x2313);
IkReal x2318=((55.0)*r20*x2306);
IkReal x2319=((55.0)*r21*x2302);
IkReal x2320=(r21*x2305*x2306);
IkReal x2321=(r20*x2302*x2305);
IkReal x2322=(r21*x2306*x2307);
IkReal x2323=(r20*x2302*x2307);
IkReal x2324=(x2323+x2312);
IkReal x2325=(x2321+x2310);
IkReal x2326=(x2320+x2316+x2314+x2315+x2309);
IkReal x2327=(x2322+x2318+x2319+x2317+x2311);
op[0]=(x2304*((x2327+(((-1.0)*x2301))+(((-1.0)*x2324)))));
op[1]=0;
op[2]=(x2304*((x2326+(((-1.0)*x2301))+(((-1.0)*x2325)))));
op[3]=0;
op[4]=(x2304*((x2326+x2301+(((-1.0)*x2325)))));
op[5]=0;
op[6]=(x2304*((x2327+x2301+(((-1.0)*x2324)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2329=(gconst150*r20);
IkReal x2330=((0.32)*cj0);
IkReal x2331=(gconst151*r00);
IkReal x2332=(cj0*px);
IkReal x2333=(py*sj0);
IkReal x2334=((0.32)*sj0);
IkReal x2335=(gconst150*r11);
IkReal x2336=(gconst150*r01);
IkReal x2337=(gconst151*r10);
IkReal x2338=((0.96)*sj0);
IkReal x2339=((0.96)*cj0);
IkReal x2340=(gconst151*r21);
IkReal x2341=(cj4*r22);
IkReal x2342=((4.0)*x2332);
IkReal x2343=((0.44)*x2341);
IkReal x2344=((4.0)*x2333);
IkReal x2345=((1.88)*x2329);
IkReal x2346=((1.88)*x2340);
IkReal x2347=(gconst151*r20*sj4);
IkReal x2348=(gconst150*r21*sj4);
IkReal x2349=((0.44)*x2348);
IkReal x2350=(x2334*x2337);
IkReal x2351=(x2330*x2331);
IkReal x2352=(x2330*x2336);
IkReal x2353=(x2334*x2335);
IkReal x2354=((0.44)*x2347);
IkReal x2355=(x2352+x2353+x2354+x2345+x2346);
IkReal x2356=(x2350+x2351+x2344+x2343+x2342+x2349);
IkReal x2357=(((x2331*x2339))+((x2337*x2338))+(((-5.64)*x2329))+(((1.32)*x2348))+(((1.32)*x2341))+(((-1.0)*x2335*x2338))+(((-5.64)*x2340))+(((-1.32)*x2347))+(((-1.0)*x2336*x2339))+(((12.0)*x2333))+(((12.0)*x2332)));
j1evalpoly[0]=(((x2357*(htj1*htj1)))+(((-3.552)*(htj1*htj1*htj1*htj1*htj1)))+x2356+((x2357*(htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2356+(((-1.0)*x2355))))))+(((-7.104)*(htj1*htj1*htj1)))+(((-1.0)*x2355))+(((-3.552)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2358=((1.0)*cj1);
IkReal x2359=(cj4*r22);
IkReal x2360=(gconst151*r21);
IkReal x2361=((1.0)*sj1);
IkReal x2362=(gconst150*r20);
IkReal x2363=(gconst150*r21*sj4);
IkReal x2364=(gconst151*r20*sj4);
if( IKabs(((((-1.0)*x2358*x2359))+(((-1.0)*x2358*x2363))+((cj1*x2364))+(((-1.0)*x2360*x2361))+(((-1.0)*x2361*x2362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2364))+(((-1.0)*x2359*x2361))+((cj1*x2362))+((cj1*x2360))+(((-1.0)*x2361*x2363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2358*x2359))+(((-1.0)*x2358*x2363))+((cj1*x2364))+(((-1.0)*x2360*x2361))+(((-1.0)*x2361*x2362))))+IKsqr((((sj1*x2364))+(((-1.0)*x2359*x2361))+((cj1*x2362))+((cj1*x2360))+(((-1.0)*x2361*x2363))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2358*x2359))+(((-1.0)*x2358*x2363))+((cj1*x2364))+(((-1.0)*x2360*x2361))+(((-1.0)*x2361*x2362))), (((sj1*x2364))+(((-1.0)*x2359*x2361))+((cj1*x2362))+((cj1*x2360))+(((-1.0)*x2361*x2363))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2365=IKcos(j2);
IkReal x2366=IKsin(j2);
IkReal x2367=(gconst150*sj4);
IkReal x2368=((1.0)*sj0);
IkReal x2369=((1.0)*cj0);
IkReal x2370=((0.08)*sj0);
IkReal x2371=(gconst151*r10);
IkReal x2372=((0.08)*cj0);
IkReal x2373=(gconst151*r00);
IkReal x2374=(sj1*x2365);
IkReal x2375=(cj1*x2366);
IkReal x2376=(cj1*x2365);
IkReal x2377=(sj1*x2366);
IkReal x2378=(x2374+x2375);
evalcond[0]=(x2377+(((-1.0)*x2376))+((gconst150*r20))+((gconst151*r21)));
evalcond[1]=(((cj4*r22))+x2378+(((-1.0)*gconst151*r20*sj4))+((r21*x2367)));
evalcond[2]=((((-1.0)*gconst151*r01*x2369))+(((-1.0)*gconst150*r10*x2368))+x2378+(((-1.0)*gconst150*r00*x2369))+(((-1.0)*gconst151*r11*x2368)));
CheckValue<IkReal> x2379=IKPowWithIntegerCheck(cj4,-1);
if(!x2379.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x2374))+(((0.47)*x2375))+(((-0.11)*x2376))+pz+(((0.11)*x2377))+(((-0.08)*r22*sj4*(x2379.value))));
evalcond[4]=((((-1.0)*cj4*r12*x2368))+(((-1.0)*r01*x2367*x2369))+x2376+(((-1.0)*x2377))+((sj0*sj4*x2371))+((cj0*sj4*x2373))+(((-1.0)*cj4*r02*x2369))+(((-1.0)*r11*x2367*x2368)));
evalcond[5]=((((-1.0)*px*x2369))+(((-0.47)*x2377))+(((0.47)*x2376))+((gconst150*r11*x2370))+(((0.11)*x2374))+(((0.11)*x2375))+(((-1.0)*x2372*x2373))+(((-1.0)*x2370*x2371))+(((-1.0)*py*x2368))+(((0.444)*sj1))+((gconst150*r01*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2380=((0.08)*sj5);
IkReal x2381=((0.08)*cj5);
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2381))+(((-1.0)*py))+((r11*x2380)))),IkReal(((((-1.0)*r00*x2381))+((r01*x2380))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(IKsign((((r20*sj4*x2380))+((r21*sj4*x2381))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x2383.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2382.value)+(((1.5707963267949)*(x2383.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2384=IKsin(j0);
IkReal x2385=IKcos(j0);
IkReal x2386=(r11*sj5);
IkReal x2387=(cj5*r10);
IkReal x2388=(r02*sj4);
IkReal x2389=(r12*sj4);
IkReal x2390=(cj4*r00);
IkReal x2391=(cj4*r01);
IkReal x2392=(sj5*x2384);
IkReal x2393=((1.0)*x2385);
IkReal x2394=((0.08)*x2385);
IkReal x2395=(cj5*x2384);
IkReal x2396=((1.0)*x2384);
evalcond[0]=((((-1.0)*cj5*r11*x2393))+((r00*x2392))+((r01*x2395))+(((-1.0)*r10*sj5*x2393)));
evalcond[1]=((((0.08)*r00*x2395))+((px*x2384))+(((-0.08)*r01*x2392))+(((-1.0)*py*x2393))+((x2386*x2394))+(((-1.0)*x2387*x2394)));
evalcond[2]=((((-1.0)*r00*sj4*x2395))+(((-1.0)*cj4*r12*x2393))+((cj4*r02*x2384))+(((-1.0)*sj4*x2386*x2393))+((sj4*x2385*x2387))+((r01*sj4*x2392)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x2387*x2393))+((cj4*x2385*x2386))+((x2384*x2388))+(((-1.0)*x2391*x2392))+(((-1.0)*x2389*x2393))+((x2390*x2395)));
evalcond[4]=((((-1.0)*cj4*x2387*x2396))+(((-1.0)*cj5*x2390*x2393))+(((-1.0)*x2389*x2396))+((cj4*x2384*x2386))+((sj5*x2385*x2391))+(((-1.0)*x2388*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2417=IKPowWithIntegerCheck(cj4,-1);
if(!x2417.valid){
continue;
}
IkReal x2397=x2417.value;
IkReal x2398=(r20*sj5);
IkReal x2399=(cj0*px);
IkReal x2400=(cj5*r21);
IkReal x2401=(py*sj0);
IkReal x2402=(cj4*r22);
IkReal x2403=((165.0)*x2398);
IkReal x2404=((705.0)*x2402);
IkReal x2405=((165.0)*x2400);
IkReal x2406=(cj0*r01*sj5);
IkReal x2407=(cj5*r20*sj4);
IkReal x2408=(cj5*r10*sj0);
IkReal x2409=(r22*sj4*x2397);
IkReal x2410=(r21*sj4*sj5);
IkReal x2411=(cj0*cj5*r00);
IkReal x2412=(r11*sj0*sj5);
IkReal x2413=((705.0)*x2410);
IkReal x2414=((120.0)*x2409);
IkReal x2415=((((705.0)*x2407))+(((1500.0)*pz)));
IkReal x2416=(x2404+x2405+x2403+x2413+x2414);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((222.0)+x2416+(((-1.0)*x2415)))))))+(IKabs(((((-0.44)*x2407))+(((0.32)*x2408))+(((0.44)*x2402))+(((-1.88)*x2398))+(((-0.32)*x2412))+(((0.44)*x2410))+(((-1.88)*x2400))+(((4.0)*x2401))+(((0.32)*x2411))+(((-0.32)*x2406))+(((4.0)*x2399)))))+(((0.008)*(IKabs(((-222.0)+(((-500.0)*pz))+(((-235.0)*x2407))+(((40.0)*x2409))+(((55.0)*x2398))+(((235.0)*x2402))+(((235.0)*x2410))+(((55.0)*x2400)))))))+(((0.008)*(IKabs(((-222.0)+x2416+(((-1.0)*x2415)))))))+(((2.0)*(IKabs(((((-0.96)*x2412))+(((1.32)*x2410))+(((-1.32)*x2407))+(((1.32)*x2402))+(((12.0)*x2401))+(((0.96)*x2408))+(((-0.96)*x2406))+(((12.0)*x2399))+(((0.96)*x2411))+(((-5.64)*x2398))+(((-5.64)*x2400))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2447=IKPowWithIntegerCheck(cj4,-1);
if(!x2447.valid){
continue;
}
IkReal x2418=x2447.value;
IkReal x2419=cj4*cj4;
IkReal x2420=((222.0)*cj4);
IkReal x2421=(cj4*r21);
IkReal x2422=((705.0)*sj4);
IkReal x2423=((0.008)*x2418);
IkReal x2424=(r22*sj4);
IkReal x2425=(cj4*r20);
IkReal x2426=((235.0)*sj4);
IkReal x2427=(cj4*pz);
IkReal x2428=((120.0)*x2424);
IkReal x2429=((1500.0)*x2427);
IkReal x2430=((40.0)*x2424);
IkReal x2431=((500.0)*x2427);
IkReal x2432=(r22*x2419);
IkReal x2433=((165.0)*sj5*x2425);
IkReal x2434=((165.0)*cj5*x2421);
IkReal x2435=((705.0)*x2432);
IkReal x2436=((55.0)*sj5*x2425);
IkReal x2437=((55.0)*cj5*x2421);
IkReal x2438=((235.0)*x2432);
IkReal x2439=(sj5*x2421*x2422);
IkReal x2440=(cj5*x2422*x2425);
IkReal x2441=(sj5*x2421*x2426);
IkReal x2442=(cj5*x2425*x2426);
IkReal x2443=(x2431+x2442);
IkReal x2444=(x2440+x2429);
IkReal x2445=(x2439+x2433+x2435+x2434+x2428);
IkReal x2446=(x2438+x2430+x2437+x2436+x2441);
op[0]=(x2423*((x2446+(((-1.0)*x2420))+(((-1.0)*x2443)))));
op[1]=0;
op[2]=(x2423*((x2445+(((-1.0)*x2420))+(((-1.0)*x2444)))));
op[3]=0;
op[4]=(x2423*((x2445+x2420+(((-1.0)*x2444)))));
op[5]=0;
op[6]=(x2423*((x2446+x2420+(((-1.0)*x2443)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2448=((0.32)*cj5);
IkReal x2449=(cj0*r00);
IkReal x2450=(cj0*px);
IkReal x2451=(cj5*r21);
IkReal x2452=(r10*sj0);
IkReal x2453=((0.96)*cj5);
IkReal x2454=(py*sj0);
IkReal x2455=(r20*sj5);
IkReal x2456=(cj4*r22);
IkReal x2457=((4.0)*x2450);
IkReal x2458=((0.44)*x2456);
IkReal x2459=((4.0)*x2454);
IkReal x2460=((1.88)*x2451);
IkReal x2461=((1.88)*x2455);
IkReal x2462=(cj0*r01*sj5);
IkReal x2463=(r21*sj4*sj5);
IkReal x2464=(cj5*r20*sj4);
IkReal x2465=(r11*sj0*sj5);
IkReal x2466=(x2448*x2452);
IkReal x2467=((0.44)*x2463);
IkReal x2468=(x2448*x2449);
IkReal x2469=((0.44)*x2464);
IkReal x2470=((0.32)*x2462);
IkReal x2471=((0.32)*x2465);
IkReal x2472=(x2460+x2461+x2469+x2471+x2470);
IkReal x2473=(x2466+x2467+x2468+x2459+x2458+x2457);
IkReal x2474=((((-1.32)*x2464))+(((1.32)*x2463))+(((-5.64)*x2451))+(((-5.64)*x2455))+(((-0.96)*x2462))+(((-0.96)*x2465))+((x2452*x2453))+((x2449*x2453))+(((1.32)*x2456))+(((12.0)*x2450))+(((12.0)*x2454)));
j1evalpoly[0]=(x2473+(((-3.552)*(htj1*htj1*htj1*htj1*htj1)))+((x2474*(htj1*htj1)))+((x2474*(htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2473+(((-1.0)*x2472))))))+(((-1.0)*x2472))+(((-7.104)*(htj1*htj1*htj1)))+(((-3.552)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2475=((1.0)*sj1);
IkReal x2476=(r20*sj5);
IkReal x2477=(cj1*sj4);
IkReal x2478=(cj5*r20);
IkReal x2479=(cj5*r21);
IkReal x2480=(r21*sj5);
IkReal x2481=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*x2477*x2480))+(((-1.0)*cj1*x2481))+(((-1.0)*x2475*x2476))+(((-1.0)*x2475*x2479))+((x2477*x2478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2475*x2480))+((sj1*sj4*x2478))+(((-1.0)*cj4*r22*x2475))+((cj1*x2476))+((cj1*x2479)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2477*x2480))+(((-1.0)*cj1*x2481))+(((-1.0)*x2475*x2476))+(((-1.0)*x2475*x2479))+((x2477*x2478))))+IKsqr(((((-1.0)*sj4*x2475*x2480))+((sj1*sj4*x2478))+(((-1.0)*cj4*r22*x2475))+((cj1*x2476))+((cj1*x2479))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2477*x2480))+(((-1.0)*cj1*x2481))+(((-1.0)*x2475*x2476))+(((-1.0)*x2475*x2479))+((x2477*x2478))), ((((-1.0)*sj4*x2475*x2480))+((sj1*sj4*x2478))+(((-1.0)*cj4*r22*x2475))+((cj1*x2476))+((cj1*x2479))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2482=IKcos(j2);
IkReal x2483=IKsin(j2);
IkReal x2484=(cj5*sj4);
IkReal x2485=((1.0)*cj0);
IkReal x2486=(cj0*r00);
IkReal x2487=((0.08)*cj5);
IkReal x2488=(r10*sj0);
IkReal x2489=(r01*sj5);
IkReal x2490=((1.0)*sj0);
IkReal x2491=(sj1*x2482);
IkReal x2492=(cj1*x2483);
IkReal x2493=(cj1*x2482);
IkReal x2494=(sj5*x2490);
IkReal x2495=(sj1*x2483);
IkReal x2496=(x2491+x2492);
evalcond[0]=(((cj5*r21))+x2495+(((-1.0)*x2493))+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+x2496+((cj4*r22))+(((-1.0)*r20*x2484)));
evalcond[2]=(x2496+(((-1.0)*r00*sj5*x2485))+(((-1.0)*cj5*r01*x2485))+(((-1.0)*cj5*r11*x2490))+(((-1.0)*sj5*x2488)));
CheckValue<IkReal> x2497=IKPowWithIntegerCheck(cj4,-1);
if(!x2497.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x2492))+(((0.47)*x2491))+(((0.11)*x2495))+pz+(((-0.08)*r22*sj4*(x2497.value)))+(((-0.11)*x2493)));
evalcond[4]=((((-1.0)*r11*sj4*x2494))+x2493+(((-1.0)*cj4*r12*x2490))+(((-1.0)*cj4*r02*x2485))+(((-1.0)*x2495))+((x2484*x2488))+((x2484*x2486))+(((-1.0)*sj4*x2485*x2489)));
evalcond[5]=((((-1.0)*px*x2485))+(((0.08)*cj0*x2489))+(((0.08)*r11*sj0*sj5))+(((-0.47)*x2495))+(((-1.0)*py*x2490))+(((0.47)*x2493))+(((0.11)*x2492))+(((0.11)*x2491))+(((-1.0)*x2486*x2487))+(((-1.0)*x2487*x2488))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2498=(cj5*sj4);
IkReal x2499=((1.0)*sj5);
IkReal x2500=((1.0)*cj4);
CheckValue<IkReal> x2501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2499))+(((-1.0)*cj5*r21)))),-1);
if(!x2501.valid){
continue;
}
CheckValue<IkReal> x2502 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj4*x2499))+(((-1.0)*r12*x2500))+((r10*x2498)))),IkReal((((r00*x2498))+(((-1.0)*r02*x2500))+(((-1.0)*r01*sj4*x2499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2502.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2501.value)))+(x2502.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2503=IKsin(j0);
IkReal x2504=IKcos(j0);
IkReal x2505=(r11*sj5);
IkReal x2506=(cj5*r10);
IkReal x2507=(r02*sj4);
IkReal x2508=(r12*sj4);
IkReal x2509=(cj4*r00);
IkReal x2510=(cj4*r01);
IkReal x2511=(sj5*x2503);
IkReal x2512=((1.0)*x2504);
IkReal x2513=((0.08)*x2504);
IkReal x2514=(cj5*x2503);
IkReal x2515=((1.0)*x2503);
evalcond[0]=((((-1.0)*cj5*r11*x2512))+(((-1.0)*r10*sj5*x2512))+((r01*x2514))+((r00*x2511)));
evalcond[1]=((((-1.0)*x2506*x2513))+((x2505*x2513))+((px*x2503))+(((-0.08)*r01*x2511))+(((0.08)*r00*x2514))+(((-1.0)*py*x2512)));
evalcond[2]=((((-1.0)*r00*sj4*x2514))+(((-1.0)*sj4*x2505*x2512))+((cj4*r02*x2503))+((r01*sj4*x2511))+((sj4*x2504*x2506))+(((-1.0)*cj4*r12*x2512)));
evalcond[3]=((1.0)+(((-1.0)*x2508*x2512))+(((-1.0)*x2510*x2511))+(((-1.0)*cj4*x2506*x2512))+((cj4*x2504*x2505))+((x2509*x2514))+((x2503*x2507)));
evalcond[4]=((((-1.0)*x2508*x2515))+(((-1.0)*cj4*x2506*x2515))+(((-1.0)*cj5*x2509*x2512))+((cj4*x2503*x2505))+((sj5*x2504*x2510))+(((-1.0)*x2507*x2512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2536=IKPowWithIntegerCheck(cj4,-1);
if(!x2536.valid){
continue;
}
IkReal x2516=x2536.value;
IkReal x2517=(r20*sj5);
IkReal x2518=(cj0*px);
IkReal x2519=(cj5*r21);
IkReal x2520=(py*sj0);
IkReal x2521=(cj4*r22);
IkReal x2522=((165.0)*x2517);
IkReal x2523=((705.0)*x2521);
IkReal x2524=((165.0)*x2519);
IkReal x2525=(cj0*r01*sj5);
IkReal x2526=(cj5*r20*sj4);
IkReal x2527=(cj5*r10*sj0);
IkReal x2528=(r22*sj4*x2516);
IkReal x2529=(r21*sj4*sj5);
IkReal x2530=(cj0*cj5*r00);
IkReal x2531=(r11*sj0*sj5);
IkReal x2532=((705.0)*x2529);
IkReal x2533=((120.0)*x2528);
IkReal x2534=((((705.0)*x2526))+(((1500.0)*pz)));
IkReal x2535=(x2524+x2523+x2522+x2532+x2533);
j1eval[0]=((14.208)+(IKabs(((((-0.32)*x2531))+(((0.32)*x2530))+(((4.0)*x2518))+(((-1.88)*x2519))+(((-1.88)*x2517))+(((-0.44)*x2526))+(((0.32)*x2527))+(((-0.32)*x2525))+(((4.0)*x2520))+(((0.44)*x2529))+(((0.44)*x2521)))))+(((0.008)*(IKabs(((-222.0)+(((40.0)*x2528))+(((-235.0)*x2526))+(((-500.0)*pz))+(((235.0)*x2521))+(((235.0)*x2529))+(((55.0)*x2517))+(((55.0)*x2519)))))))+(((0.008)*(IKabs(((-222.0)+x2535+(((-1.0)*x2534)))))))+(((2.0)*(IKabs(((((12.0)*x2520))+(((1.32)*x2521))+(((1.32)*x2529))+(((12.0)*x2518))+(((-0.96)*x2531))+(((0.96)*x2530))+(((-5.64)*x2517))+(((-5.64)*x2519))+(((-0.96)*x2525))+(((-1.32)*x2526))+(((0.96)*x2527)))))))+(((0.008)*(IKabs(((222.0)+x2535+(((-1.0)*x2534))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(cj4,-1);
if(!x2566.valid){
continue;
}
IkReal x2537=x2566.value;
IkReal x2538=cj4*cj4;
IkReal x2539=((222.0)*cj4);
IkReal x2540=(cj4*r21);
IkReal x2541=((705.0)*sj4);
IkReal x2542=((0.008)*x2537);
IkReal x2543=(r22*sj4);
IkReal x2544=(cj4*r20);
IkReal x2545=((235.0)*sj4);
IkReal x2546=(cj4*pz);
IkReal x2547=((120.0)*x2543);
IkReal x2548=((1500.0)*x2546);
IkReal x2549=((40.0)*x2543);
IkReal x2550=((500.0)*x2546);
IkReal x2551=(r22*x2538);
IkReal x2552=((165.0)*sj5*x2544);
IkReal x2553=((165.0)*cj5*x2540);
IkReal x2554=((705.0)*x2551);
IkReal x2555=((55.0)*sj5*x2544);
IkReal x2556=((55.0)*cj5*x2540);
IkReal x2557=((235.0)*x2551);
IkReal x2558=(sj5*x2540*x2541);
IkReal x2559=(cj5*x2541*x2544);
IkReal x2560=(sj5*x2540*x2545);
IkReal x2561=(cj5*x2544*x2545);
IkReal x2562=(x2561+x2550);
IkReal x2563=(x2559+x2548);
IkReal x2564=(x2552+x2553+x2554+x2558+x2547);
IkReal x2565=(x2560+x2555+x2556+x2557+x2549);
op[0]=(x2542*((x2565+(((-1.0)*x2539))+(((-1.0)*x2562)))));
op[1]=0;
op[2]=(x2542*((x2564+(((-1.0)*x2539))+(((-1.0)*x2563)))));
op[3]=0;
op[4]=(x2542*((x2564+x2539+(((-1.0)*x2563)))));
op[5]=0;
op[6]=(x2542*((x2565+x2539+(((-1.0)*x2562)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2567=((0.32)*cj5);
IkReal x2568=(cj0*r00);
IkReal x2569=(cj0*px);
IkReal x2570=(cj5*r21);
IkReal x2571=(r10*sj0);
IkReal x2572=((0.96)*cj5);
IkReal x2573=(py*sj0);
IkReal x2574=(r20*sj5);
IkReal x2575=(cj4*r22);
IkReal x2576=((4.0)*x2569);
IkReal x2577=((0.44)*x2575);
IkReal x2578=((4.0)*x2573);
IkReal x2579=((1.88)*x2570);
IkReal x2580=((1.88)*x2574);
IkReal x2581=(cj0*r01*sj5);
IkReal x2582=(r21*sj4*sj5);
IkReal x2583=(cj5*r20*sj4);
IkReal x2584=(r11*sj0*sj5);
IkReal x2585=(x2567*x2571);
IkReal x2586=((0.44)*x2582);
IkReal x2587=(x2567*x2568);
IkReal x2588=((0.44)*x2583);
IkReal x2589=((0.32)*x2581);
IkReal x2590=((0.32)*x2584);
IkReal x2591=(x2590+x2580+x2589+x2588+x2579);
IkReal x2592=(x2587+x2586+x2585+x2578+x2576+x2577);
IkReal x2593=(((x2571*x2572))+(((12.0)*x2573))+((x2568*x2572))+(((-5.64)*x2570))+(((-5.64)*x2574))+(((-1.32)*x2583))+(((1.32)*x2575))+(((1.32)*x2582))+(((-0.96)*x2584))+(((-0.96)*x2581))+(((12.0)*x2569)));
j1evalpoly[0]=(x2592+(((-3.552)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2592+(((-1.0)*x2591))))))+((x2593*(htj1*htj1)))+(((-1.0)*x2591))+((x2593*(htj1*htj1*htj1*htj1)))+(((-7.104)*(htj1*htj1*htj1)))+(((-3.552)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2594=((1.0)*sj1);
IkReal x2595=(r20*sj5);
IkReal x2596=(cj1*sj4);
IkReal x2597=(cj5*r20);
IkReal x2598=(cj5*r21);
IkReal x2599=(r21*sj5);
IkReal x2600=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*x2594*x2598))+(((-1.0)*x2594*x2595))+(((-1.0)*cj1*x2600))+(((-1.0)*x2596*x2599))+((x2596*x2597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2595))+((cj1*x2598))+((sj1*sj4*x2597))+(((-1.0)*sj4*x2594*x2599))+(((-1.0)*cj4*r22*x2594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2594*x2598))+(((-1.0)*x2594*x2595))+(((-1.0)*cj1*x2600))+(((-1.0)*x2596*x2599))+((x2596*x2597))))+IKsqr((((cj1*x2595))+((cj1*x2598))+((sj1*sj4*x2597))+(((-1.0)*sj4*x2594*x2599))+(((-1.0)*cj4*r22*x2594))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2594*x2598))+(((-1.0)*x2594*x2595))+(((-1.0)*cj1*x2600))+(((-1.0)*x2596*x2599))+((x2596*x2597))), (((cj1*x2595))+((cj1*x2598))+((sj1*sj4*x2597))+(((-1.0)*sj4*x2594*x2599))+(((-1.0)*cj4*r22*x2594))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2601=IKcos(j2);
IkReal x2602=IKsin(j2);
IkReal x2603=(cj5*sj4);
IkReal x2604=((1.0)*cj0);
IkReal x2605=(cj0*r00);
IkReal x2606=((0.08)*cj5);
IkReal x2607=(r10*sj0);
IkReal x2608=(r01*sj5);
IkReal x2609=((1.0)*sj0);
IkReal x2610=(sj1*x2601);
IkReal x2611=(cj1*x2602);
IkReal x2612=(cj1*x2601);
IkReal x2613=(sj5*x2609);
IkReal x2614=(sj1*x2602);
IkReal x2615=(x2611+x2610);
evalcond[0]=(((cj5*r21))+(((-1.0)*x2612))+((r20*sj5))+x2614);
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*x2603))+x2615);
evalcond[2]=((((-1.0)*r00*sj5*x2604))+(((-1.0)*cj5*r11*x2609))+(((-1.0)*sj5*x2607))+(((-1.0)*cj5*r01*x2604))+x2615);
CheckValue<IkReal> x2616=IKPowWithIntegerCheck(cj4,-1);
if(!x2616.valid){
continue;
}
evalcond[3]=((((0.11)*x2614))+(((-0.444)*cj1))+(((-0.11)*x2612))+pz+(((-0.08)*r22*sj4*(x2616.value)))+(((0.47)*x2610))+(((0.47)*x2611)));
evalcond[4]=(((x2603*x2607))+((x2603*x2605))+(((-1.0)*r11*sj4*x2613))+(((-1.0)*x2614))+(((-1.0)*cj4*r02*x2604))+(((-1.0)*cj4*r12*x2609))+(((-1.0)*sj4*x2604*x2608))+x2612);
evalcond[5]=((((0.11)*x2611))+(((0.11)*x2610))+(((0.08)*r11*sj0*sj5))+(((0.08)*cj0*x2608))+(((-1.0)*py*x2609))+(((-1.0)*x2605*x2606))+(((-1.0)*x2606*x2607))+(((-0.47)*x2614))+(((0.444)*sj1))+(((0.47)*x2612))+(((-1.0)*px*x2604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2617=((1.0)*cj5);
IkReal x2618=((1.0)*sj5);
CheckValue<IkReal> x2619 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2617))+(((-1.0)*r10*x2618)))),IkReal(((((-1.0)*r00*x2618))+(((-1.0)*r01*x2617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2619.valid){
continue;
}
CheckValue<IkReal> x2620=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x2617)))),-1);
if(!x2620.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2619.value)+(((1.5707963267949)*(x2620.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2621=IKsin(j0);
IkReal x2622=IKcos(j0);
IkReal x2623=(r11*sj5);
IkReal x2624=(cj5*r10);
IkReal x2625=(r02*sj4);
IkReal x2626=(r12*sj4);
IkReal x2627=(cj4*r00);
IkReal x2628=(cj4*r01);
IkReal x2629=(sj5*x2621);
IkReal x2630=((1.0)*x2622);
IkReal x2631=((0.08)*x2622);
IkReal x2632=(cj5*x2621);
IkReal x2633=((1.0)*x2621);
evalcond[0]=(((r00*x2629))+(((-1.0)*r10*sj5*x2630))+((r01*x2632))+(((-1.0)*cj5*r11*x2630)));
evalcond[1]=(((x2623*x2631))+((px*x2621))+(((-0.08)*r01*x2629))+(((0.08)*r00*x2632))+(((-1.0)*x2624*x2631))+(((-1.0)*py*x2630)));
evalcond[2]=((((-1.0)*sj4*x2623*x2630))+(((-1.0)*cj4*r12*x2630))+((sj4*x2622*x2624))+(((-1.0)*r00*sj4*x2632))+((r01*sj4*x2629))+((cj4*r02*x2621)));
evalcond[3]=((1.0)+(((-1.0)*x2628*x2629))+((cj4*x2622*x2623))+(((-1.0)*cj4*x2624*x2630))+((x2621*x2625))+((x2627*x2632))+(((-1.0)*x2626*x2630)));
evalcond[4]=(((sj5*x2622*x2628))+(((-1.0)*cj4*x2624*x2633))+((cj4*x2621*x2623))+(((-1.0)*cj5*x2627*x2630))+(((-1.0)*x2625*x2630))+(((-1.0)*x2626*x2633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(cj4,-1);
if(!x2654.valid){
continue;
}
IkReal x2634=x2654.value;
IkReal x2635=(r20*sj5);
IkReal x2636=(cj0*px);
IkReal x2637=(cj5*r21);
IkReal x2638=(py*sj0);
IkReal x2639=(cj4*r22);
IkReal x2640=((165.0)*x2635);
IkReal x2641=((705.0)*x2639);
IkReal x2642=((165.0)*x2637);
IkReal x2643=(cj0*r01*sj5);
IkReal x2644=(cj5*r20*sj4);
IkReal x2645=(cj5*r10*sj0);
IkReal x2646=(r22*sj4*x2634);
IkReal x2647=(r21*sj4*sj5);
IkReal x2648=(cj0*cj5*r00);
IkReal x2649=(r11*sj0*sj5);
IkReal x2650=((705.0)*x2647);
IkReal x2651=((120.0)*x2646);
IkReal x2652=((((1500.0)*pz))+(((705.0)*x2644)));
IkReal x2653=(x2640+x2641+x2642+x2651+x2650);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((-222.0)+(((-1.0)*x2652))+x2653)))))+(((0.008)*(IKabs(((222.0)+(((-1.0)*x2652))+x2653)))))+(((2.0)*(IKabs(((((-0.96)*x2649))+(((-0.96)*x2643))+(((1.32)*x2639))+(((0.96)*x2648))+(((0.96)*x2645))+(((-5.64)*x2637))+(((-5.64)*x2635))+(((-1.32)*x2644))+(((1.32)*x2647))+(((12.0)*x2636))+(((12.0)*x2638)))))))+(IKabs(((((0.32)*x2648))+(((0.32)*x2645))+(((4.0)*x2636))+(((4.0)*x2638))+(((-0.32)*x2649))+(((-0.32)*x2643))+(((0.44)*x2639))+(((-1.88)*x2637))+(((-1.88)*x2635))+(((0.44)*x2647))+(((-0.44)*x2644)))))+(((0.008)*(IKabs(((-222.0)+(((-500.0)*pz))+(((40.0)*x2646))+(((-235.0)*x2644))+(((235.0)*x2639))+(((55.0)*x2635))+(((55.0)*x2637))+(((235.0)*x2647))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(cj4,-1);
if(!x2684.valid){
continue;
}
IkReal x2655=x2684.value;
IkReal x2656=cj4*cj4;
IkReal x2657=((222.0)*cj4);
IkReal x2658=(cj4*r21);
IkReal x2659=((705.0)*sj4);
IkReal x2660=((0.008)*x2655);
IkReal x2661=(r22*sj4);
IkReal x2662=(cj4*r20);
IkReal x2663=((235.0)*sj4);
IkReal x2664=(cj4*pz);
IkReal x2665=((120.0)*x2661);
IkReal x2666=((1500.0)*x2664);
IkReal x2667=((40.0)*x2661);
IkReal x2668=((500.0)*x2664);
IkReal x2669=(r22*x2656);
IkReal x2670=((165.0)*sj5*x2662);
IkReal x2671=((165.0)*cj5*x2658);
IkReal x2672=((705.0)*x2669);
IkReal x2673=((55.0)*sj5*x2662);
IkReal x2674=((55.0)*cj5*x2658);
IkReal x2675=((235.0)*x2669);
IkReal x2676=(sj5*x2658*x2659);
IkReal x2677=(cj5*x2659*x2662);
IkReal x2678=(sj5*x2658*x2663);
IkReal x2679=(cj5*x2662*x2663);
IkReal x2680=(x2668+x2679);
IkReal x2681=(x2666+x2677);
IkReal x2682=(x2665+x2671+x2670+x2672+x2676);
IkReal x2683=(x2667+x2673+x2675+x2674+x2678);
op[0]=(x2660*(((((-1.0)*x2680))+(((-1.0)*x2657))+x2683)));
op[1]=0;
op[2]=(x2660*(((((-1.0)*x2681))+(((-1.0)*x2657))+x2682)));
op[3]=0;
op[4]=(x2660*(((((-1.0)*x2681))+x2657+x2682)));
op[5]=0;
op[6]=(x2660*(((((-1.0)*x2680))+x2657+x2683)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2685=((0.32)*cj5);
IkReal x2686=(cj0*r00);
IkReal x2687=(cj0*px);
IkReal x2688=(cj5*r21);
IkReal x2689=(r10*sj0);
IkReal x2690=((0.96)*cj5);
IkReal x2691=(py*sj0);
IkReal x2692=(r20*sj5);
IkReal x2693=(cj4*r22);
IkReal x2694=((4.0)*x2687);
IkReal x2695=((0.44)*x2693);
IkReal x2696=((4.0)*x2691);
IkReal x2697=((1.88)*x2688);
IkReal x2698=((1.88)*x2692);
IkReal x2699=(cj0*r01*sj5);
IkReal x2700=(r21*sj4*sj5);
IkReal x2701=(cj5*r20*sj4);
IkReal x2702=(r11*sj0*sj5);
IkReal x2703=(x2685*x2689);
IkReal x2704=((0.44)*x2700);
IkReal x2705=(x2685*x2686);
IkReal x2706=((0.44)*x2701);
IkReal x2707=((0.32)*x2699);
IkReal x2708=((0.32)*x2702);
IkReal x2709=(x2708+x2707+x2706+x2698+x2697);
IkReal x2710=(x2705+x2704+x2703+x2696+x2695+x2694);
IkReal x2711=((((-5.64)*x2688))+(((12.0)*x2687))+(((-0.96)*x2702))+(((-1.32)*x2701))+(((-5.64)*x2692))+(((12.0)*x2691))+(((1.32)*x2693))+((x2689*x2690))+(((-0.96)*x2699))+((x2686*x2690))+(((1.32)*x2700)));
j1evalpoly[0]=(x2710+((x2711*(htj1*htj1)))+((x2711*(htj1*htj1*htj1*htj1)))+(((-3.552)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x2709))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2710+(((-1.0)*x2709))))))+(((-7.104)*(htj1*htj1*htj1)))+(((-3.552)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2712=((1.0)*sj1);
IkReal x2713=(r20*sj5);
IkReal x2714=(cj1*sj4);
IkReal x2715=(cj5*r20);
IkReal x2716=(cj5*r21);
IkReal x2717=(r21*sj5);
IkReal x2718=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*x2712*x2713))+(((-1.0)*x2712*x2716))+(((-1.0)*x2714*x2717))+((x2714*x2715))+(((-1.0)*cj1*x2718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2712*x2717))+((sj1*sj4*x2715))+(((-1.0)*cj4*r22*x2712))+((cj1*x2713))+((cj1*x2716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2712*x2713))+(((-1.0)*x2712*x2716))+(((-1.0)*x2714*x2717))+((x2714*x2715))+(((-1.0)*cj1*x2718))))+IKsqr(((((-1.0)*sj4*x2712*x2717))+((sj1*sj4*x2715))+(((-1.0)*cj4*r22*x2712))+((cj1*x2713))+((cj1*x2716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2712*x2713))+(((-1.0)*x2712*x2716))+(((-1.0)*x2714*x2717))+((x2714*x2715))+(((-1.0)*cj1*x2718))), ((((-1.0)*sj4*x2712*x2717))+((sj1*sj4*x2715))+(((-1.0)*cj4*r22*x2712))+((cj1*x2713))+((cj1*x2716))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2719=IKcos(j2);
IkReal x2720=IKsin(j2);
IkReal x2721=(cj5*sj4);
IkReal x2722=((1.0)*cj0);
IkReal x2723=(cj0*r00);
IkReal x2724=((0.08)*cj5);
IkReal x2725=(r10*sj0);
IkReal x2726=(r01*sj5);
IkReal x2727=((1.0)*sj0);
IkReal x2728=(sj1*x2719);
IkReal x2729=(cj1*x2720);
IkReal x2730=(cj1*x2719);
IkReal x2731=(sj5*x2727);
IkReal x2732=(sj1*x2720);
IkReal x2733=(x2729+x2728);
evalcond[0]=(x2732+((cj5*r21))+(((-1.0)*x2730))+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+x2733+((cj4*r22))+(((-1.0)*r20*x2721)));
evalcond[2]=(x2733+(((-1.0)*r00*sj5*x2722))+(((-1.0)*sj5*x2725))+(((-1.0)*cj5*r11*x2727))+(((-1.0)*cj5*r01*x2722)));
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(cj4,-1);
if(!x2734.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((-0.11)*x2730))+(((0.11)*x2732))+(((0.47)*x2728))+(((0.47)*x2729))+pz+(((-0.08)*r22*sj4*(x2734.value))));
evalcond[4]=(x2730+(((-1.0)*cj4*r12*x2727))+(((-1.0)*x2732))+((x2721*x2723))+((x2721*x2725))+(((-1.0)*sj4*x2722*x2726))+(((-1.0)*r11*sj4*x2731))+(((-1.0)*cj4*r02*x2722)));
evalcond[5]=((((-1.0)*x2724*x2725))+(((0.08)*r11*sj0*sj5))+(((-1.0)*px*x2722))+(((0.08)*cj0*x2726))+(((0.47)*x2730))+(((-1.0)*x2723*x2724))+(((-0.47)*x2732))+(((0.11)*x2728))+(((0.11)*x2729))+(((0.444)*sj1))+(((-1.0)*py*x2727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2735=((1.0)*cj5);
IkReal x2736=((1.0)*sj5);
IkReal x2737=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x2736)));
j0eval[0]=x2737;
j0eval[1]=((IKabs(((((-1.0)*r11*x2735))+(((-1.0)*r10*x2736)))))+(IKabs(((((-1.0)*r01*x2735))+(((-1.0)*r00*x2736))))));
j0eval[2]=IKsign(x2737);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2738=(cj5*sj4);
IkReal x2739=((1.0)*cj4);
IkReal x2740=((1.0)*sj4*sj5);
IkReal x2741=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x2741;
j0eval[1]=((IKabs(((((-1.0)*r01*x2740))+((r00*x2738))+(((-1.0)*r02*x2739)))))+(IKabs(((((-1.0)*r11*x2740))+(((-1.0)*r12*x2739))+((r10*x2738))))));
j0eval[2]=IKsign(x2741);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2742=((0.08)*sj5);
IkReal x2743=(rxp2_2*sj4);
IkReal x2744=((12.5)*cj4);
IkReal x2745=(cj5*rxp0_2);
IkReal x2746=(rxp1_2*sj5);
IkReal x2747=(r20*sj4);
IkReal x2748=((0.08)*cj5);
IkReal x2749=(cj5*r21*sj4);
j0eval[0]=((((-1.0)*x2744*x2745))+((x2744*x2746))+(((-12.5)*x2743))+(((-1.0)*sj5*x2747))+(((-1.0)*x2749)));
j0eval[1]=IKsign(((((-1.0)*cj4*x2745))+((cj4*x2746))+(((-1.0)*x2743))+(((-1.0)*x2742*x2747))+(((-1.0)*r21*sj4*x2748))));
j0eval[2]=((IKabs(((((-1.0)*r00*x2748))+(((-1.0)*px))+((r01*x2742)))))+(IKabs((((r11*x2742))+(((-1.0)*r10*x2748))+(((-1.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2751 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2751)==0){
continue;
}
IkReal x2750=pow(x2751,-0.5);
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
IkReal gconst184=((-1.0)*(x2752.value));
IkReal gconst185=((-1.0)*r21*x2750);
IkReal gconst186=(r20*x2750);
CheckValue<IkReal> x2753 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2753.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2753.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x2756 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2756.valid){
continue;
}
IkReal x2754=((-1.0)*(x2756.value));
IkReal x2755=x2750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2754;
IkReal gconst184=x2754;
IkReal gconst185=((-1.0)*r21*x2755);
IkReal gconst186=(r20*x2755);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2759 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
IkReal x2757=((-1.0)*(x2759.value));
IkReal x2758=x2750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2757;
IkReal gconst184=x2757;
IkReal gconst185=((-1.0)*r21*x2758);
IkReal gconst186=(r20*x2758);
IkReal x2760=(rxp2_2*sj4);
IkReal x2761=(r21*rxp1_2);
IkReal x2762=(r20*rxp0_2);
IkReal x2763=x2750;
IkReal x2764=((12.5)*cj4*x2763);
IkReal x2765=((1.0)*cj4*x2763);
j0eval[0]=((((-1.0)*x2761*x2764))+(((-1.0)*x2762*x2764))+(((-12.5)*x2760)));
j0eval[1]=IKsign(((((-1.0)*x2760))+(((-1.0)*x2761*x2765))+(((-1.0)*x2762*x2765))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2768 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2768.valid){
continue;
}
IkReal x2766=((-1.0)*(x2768.value));
IkReal x2767=x2750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2766;
IkReal gconst184=x2766;
IkReal gconst185=((-1.0)*r21*x2767);
IkReal gconst186=(r20*x2767);
IkReal x2769=r22*r22;
IkReal x2770=cj4*cj4;
IkReal x2771=r21*r21;
IkReal x2772=r20*r20;
IkReal x2773=((1.0)+(((-1.0)*x2769)));
IkReal x2774=((1.0)*x2770);
CheckValue<IkReal> x2783=IKPowWithIntegerCheck(x2773,-1);
if(!x2783.valid){
continue;
}
IkReal x2775=x2783.value;
IkReal x2776=(x2770*x2775);
IkReal x2777=(x2774*x2775);
IkReal x2784 = x2773;
if(IKabs(x2784)==0){
continue;
}
IkReal x2778=pow(x2784,-0.5);
IkReal x2779=(x2771*x2776);
IkReal x2780=(x2772*x2776);
IkReal x2781=((2.0)*cj4*r22*sj4*x2778);
IkReal x2782=((-1.0)+x2770+x2769+(((-1.0)*x2769*x2774))+((x2771*x2779))+(((2.0)*x2772*x2779))+(((-1.0)*x2772*x2777))+(((-1.0)*x2771*x2777))+((x2772*x2781))+((x2772*x2780))+((x2771*x2781)));
j0eval[0]=x2782;
j0eval[1]=IKsign(x2782);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2785=cj4*cj4;
IkReal x2786=gconst185*gconst185;
IkReal x2787=gconst186*gconst186;
IkReal x2788=(cj4*gconst186);
IkReal x2789=(cj4*gconst185);
IkReal x2790=((2.0)*r20);
IkReal x2791=(r22*sj4);
IkReal x2792=((1.0)*x2785);
IkReal x2793=(x2785*x2786);
CheckValue<IkReal> x2794=IKPowWithIntegerCheck(IKsign(((-1.0)+x2785+(((-1.0)*x2787*x2792))+(((-1.0)*x2786*x2792))+((x2793*(r21*r21)))+(((-1.0)*gconst185*gconst186*r21*x2785*x2790))+((x2785*x2787*(r20*r20)))+(((r22*r22)*(((1.0)+(((-1.0)*x2792))))))+(((-2.0)*r21*x2789*x2791))+((x2788*x2790*x2791)))),-1);
if(!x2794.valid){
continue;
}
CheckValue<IkReal> x2795 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj4))+((r01*x2789))+(((-1.0)*r00*x2788)))),IkReal((((r12*sj4))+((r10*x2788))+(((-1.0)*r11*x2789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2795.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2794.value)))+(x2795.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2796=IKsin(j0);
IkReal x2797=IKcos(j0);
IkReal x2798=((1.0)*r11);
IkReal x2799=((1.0)*r12);
IkReal x2800=(gconst185*r01);
IkReal x2801=((1.0)*r10);
IkReal x2802=(cj4*r00);
IkReal x2803=(gconst186*x2796);
IkReal x2804=(gconst186*x2797);
IkReal x2805=(sj4*x2796);
IkReal x2806=(cj4*gconst185*r11);
IkReal x2807=(sj4*x2797);
IkReal x2808=(gconst185*x2797);
IkReal x2809=(cj4*x2796);
IkReal x2810=(cj4*x2797);
evalcond[0]=((((-1.0)*x2798*x2804))+((gconst185*r00*x2796))+((r01*x2803))+(((-1.0)*x2801*x2808)));
evalcond[1]=((((-0.08)*x2796*x2800))+(((0.08)*r11*x2808))+(((-1.0)*py*x2797))+(((-0.08)*r10*x2804))+((px*x2796))+(((0.08)*r00*x2803)));
evalcond[2]=(((r02*x2809))+(((-1.0)*x2799*x2810))+((r10*sj4*x2804))+(((-1.0)*gconst185*x2798*x2807))+((x2800*x2805))+(((-1.0)*r00*sj4*x2803)));
evalcond[3]=((-1.0)+((x2797*x2806))+((r02*x2805))+(((-1.0)*x2800*x2809))+(((-1.0)*cj4*x2801*x2804))+(((-1.0)*x2799*x2807))+((x2802*x2803)));
evalcond[4]=(((x2796*x2806))+(((-1.0)*r02*x2807))+(((-1.0)*cj4*x2801*x2803))+(((-1.0)*x2799*x2805))+(((-1.0)*x2802*x2804))+((x2800*x2810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2813 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2813.valid){
continue;
}
IkReal x2811=((-1.0)*(x2813.value));
IkReal x2812=x2750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2811;
IkReal gconst184=x2811;
IkReal gconst185=((-1.0)*r21*x2812);
IkReal gconst186=(r20*x2812);
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(cj4,-1);
if(!x2833.valid){
continue;
}
IkReal x2814=x2833.value;
IkReal x2815=((1500.0)*pz);
IkReal x2816=(cj0*px);
IkReal x2817=(gconst185*r20);
IkReal x2818=(py*sj0);
IkReal x2819=(cj4*r22);
IkReal x2820=(gconst186*r21);
IkReal x2821=((165.0)*x2817);
IkReal x2822=((165.0)*x2820);
IkReal x2823=(gconst185*r21*sj4);
IkReal x2824=(gconst186*r10*sj0);
IkReal x2825=(r22*sj4*x2814);
IkReal x2826=(gconst186*r20*sj4);
IkReal x2827=(cj0*gconst185*r01);
IkReal x2828=(cj0*gconst186*r00);
IkReal x2829=(gconst185*r11*sj0);
IkReal x2830=((705.0)*x2826);
IkReal x2831=((((705.0)*x2823))+(((705.0)*x2819))+(((120.0)*x2825)));
IkReal x2832=(x2830+x2815+x2821+x2822);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((-222.0)+(((-1.0)*x2831))+x2832)))))+(IKabs(((((-1.88)*x2817))+(((-0.32)*x2828))+(((-0.32)*x2824))+(((0.44)*x2826))+(((-4.0)*x2816))+(((-4.0)*x2818))+(((-0.44)*x2819))+(((0.32)*x2829))+(((0.32)*x2827))+(((-1.88)*x2820))+(((-0.44)*x2823)))))+(((0.008)*(IKabs(((222.0)+(((-1.0)*x2831))+x2832)))))+(((0.008)*(IKabs(((222.0)+(((500.0)*pz))+(((-235.0)*x2819))+(((55.0)*x2820))+(((55.0)*x2817))+(((-40.0)*x2825))+(((-235.0)*x2823))+(((235.0)*x2826)))))))+(((2.0)*(IKabs(((((-0.96)*x2828))+(((-0.96)*x2824))+(((-1.32)*x2819))+(((-1.32)*x2823))+(((-5.64)*x2820))+(((0.96)*x2827))+(((0.96)*x2829))+(((-5.64)*x2817))+(((-12.0)*x2816))+(((-12.0)*x2818))+(((1.32)*x2826))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(cj4,-1);
if(!x2863.valid){
continue;
}
IkReal x2834=x2863.value;
IkReal x2835=((222.0)*cj4);
IkReal x2836=cj4*cj4;
IkReal x2837=(cj4*gconst185);
IkReal x2838=((705.0)*sj4);
IkReal x2839=((0.008)*x2834);
IkReal x2840=(cj4*gconst186);
IkReal x2841=(r22*sj4);
IkReal x2842=((235.0)*sj4);
IkReal x2843=(cj4*pz);
IkReal x2844=((1500.0)*x2843);
IkReal x2845=((120.0)*x2841);
IkReal x2846=((500.0)*x2843);
IkReal x2847=((40.0)*x2841);
IkReal x2848=(r22*x2836);
IkReal x2849=((165.0)*r20*x2837);
IkReal x2850=((165.0)*r21*x2840);
IkReal x2851=((705.0)*x2848);
IkReal x2852=((55.0)*r21*x2840);
IkReal x2853=((55.0)*r20*x2837);
IkReal x2854=((235.0)*x2848);
IkReal x2855=(r20*x2838*x2840);
IkReal x2856=(r21*x2837*x2838);
IkReal x2857=(r20*x2840*x2842);
IkReal x2858=(r21*x2837*x2842);
IkReal x2859=(x2847+x2858+x2854);
IkReal x2860=(x2845+x2851+x2856);
IkReal x2861=(x2846+x2853+x2852+x2857);
IkReal x2862=(x2849+x2844+x2850+x2855);
op[0]=(x2839*((x2835+x2861+(((-1.0)*x2859)))));
op[1]=0;
op[2]=(x2839*(((((-1.0)*x2860))+x2835+x2862)));
op[3]=0;
op[4]=(x2839*(((((-1.0)*x2835))+(((-1.0)*x2860))+x2862)));
op[5]=0;
op[6]=(x2839*(((((-1.0)*x2835))+x2861+(((-1.0)*x2859)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2864=(cj0*px);
IkReal x2865=((0.44)*sj4);
IkReal x2866=(gconst185*r21);
IkReal x2867=(gconst185*r20);
IkReal x2868=(gconst186*r20);
IkReal x2869=(py*sj0);
IkReal x2870=(gconst186*r21);
IkReal x2871=((1.32)*sj4);
IkReal x2872=(cj4*r22);
IkReal x2873=(gconst186*r10*sj0);
IkReal x2874=(cj0*gconst185*r01);
IkReal x2875=(cj0*gconst186*r00);
IkReal x2876=(gconst185*r11*sj0);
IkReal x2877=(x2865*x2868);
IkReal x2878=((0.32)*x2876);
IkReal x2879=((0.32)*x2874);
IkReal x2880=(x2877+x2879+x2878);
IkReal x2881=((((4.0)*x2864))+(((4.0)*x2869))+(((0.32)*x2873))+(((0.32)*x2875))+((x2865*x2866))+(((1.88)*x2870))+(((0.44)*x2872))+(((1.88)*x2867)));
IkReal x2882=((((-0.96)*x2873))+(((-0.96)*x2875))+((x2868*x2871))+(((-1.32)*x2872))+(((0.96)*x2874))+(((0.96)*x2876))+(((-5.64)*x2867))+(((-12.0)*x2864))+(((-12.0)*x2869))+(((-1.0)*x2866*x2871))+(((-5.64)*x2870)));
j1evalpoly[0]=(((x2882*(htj1*htj1*htj1*htj1)))+(((3.552)*(htj1*htj1*htj1*htj1*htj1)))+(((7.104)*(htj1*htj1*htj1)))+((x2882*(htj1*htj1)))+(((3.552)*htj1))+(((-1.0)*x2881))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2881))+x2880))))+x2880);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2883=(cj1*gconst186);
IkReal x2884=(r20*sj4);
IkReal x2885=(gconst185*r20);
IkReal x2886=((1.0)*r21);
IkReal x2887=(gconst185*sj4);
IkReal x2888=(gconst186*sj1);
IkReal x2889=((1.0)*cj4*r22);
if( IKabs((((r21*x2888))+((sj1*x2885))+(((-1.0)*cj1*x2886*x2887))+(((-1.0)*cj1*x2889))+((x2883*x2884)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2884*x2888))+(((-1.0)*x2883*x2886))+(((-1.0)*sj1*x2889))+(((-1.0)*cj1*x2885))+(((-1.0)*sj1*x2886*x2887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2888))+((sj1*x2885))+(((-1.0)*cj1*x2886*x2887))+(((-1.0)*cj1*x2889))+((x2883*x2884))))+IKsqr((((x2884*x2888))+(((-1.0)*x2883*x2886))+(((-1.0)*sj1*x2889))+(((-1.0)*cj1*x2885))+(((-1.0)*sj1*x2886*x2887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2888))+((sj1*x2885))+(((-1.0)*cj1*x2886*x2887))+(((-1.0)*cj1*x2889))+((x2883*x2884))), (((x2884*x2888))+(((-1.0)*x2883*x2886))+(((-1.0)*sj1*x2889))+(((-1.0)*cj1*x2885))+(((-1.0)*sj1*x2886*x2887))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2890=IKcos(j2);
IkReal x2891=IKsin(j2);
IkReal x2892=(r10*sj0);
IkReal x2893=(gconst186*sj4);
IkReal x2894=((1.0)*gconst185);
IkReal x2895=((0.08)*cj0);
IkReal x2896=((1.0)*cj0);
IkReal x2897=(r11*sj0);
IkReal x2898=(cj0*r00);
IkReal x2899=((1.0)*sj0);
IkReal x2900=(cj1*x2890);
IkReal x2901=(cj1*x2891);
IkReal x2902=(sj1*x2890);
IkReal x2903=(sj1*x2891);
IkReal x2904=((1.0)*x2903);
evalcond[0]=(((gconst186*r21))+(((-1.0)*x2904))+((gconst185*r20))+x2900);
evalcond[1]=((((-1.0)*r20*x2893))+((cj4*r22))+((gconst185*r21*sj4))+x2902+x2901);
evalcond[2]=((((-1.0)*x2892*x2894))+(((-1.0)*gconst186*r01*x2896))+(((-1.0)*x2902))+(((-1.0)*x2901))+(((-1.0)*x2894*x2898))+(((-1.0)*gconst186*x2897)));
CheckValue<IkReal> x2905=IKPowWithIntegerCheck(cj4,-1);
if(!x2905.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((-0.11)*x2900))+pz+(((0.47)*x2901))+(((0.47)*x2902))+(((-0.08)*r22*sj4*(x2905.value)))+(((0.11)*x2903)));
evalcond[4]=((((-1.0)*cj0*r01*sj4*x2894))+(((-1.0)*cj4*r12*x2899))+((x2892*x2893))+(((-1.0)*x2904))+((x2893*x2898))+x2900+(((-1.0)*sj4*x2894*x2897))+(((-1.0)*cj4*r02*x2896)));
evalcond[5]=((((0.08)*gconst185*x2897))+(((-1.0)*gconst186*r00*x2895))+((gconst185*r01*x2895))+(((-1.0)*px*x2896))+(((-0.47)*x2903))+(((0.47)*x2900))+(((-1.0)*py*x2899))+(((-0.08)*gconst186*x2892))+(((0.444)*sj1))+(((0.11)*x2901))+(((0.11)*x2902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2906=((0.08)*gconst186);
IkReal x2907=((0.08)*gconst185);
CheckValue<IkReal> x2908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x2906))+((cj4*gconst185*rxp1_2))+(((-1.0)*rxp2_2*sj4))+(((-1.0)*r20*sj4*x2907))+(((-1.0)*cj4*gconst186*rxp0_2)))),-1);
if(!x2908.valid){
continue;
}
CheckValue<IkReal> x2909 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2906))+(((-1.0)*py))+((r11*x2907)))),IkReal((((r01*x2907))+(((-1.0)*r00*x2906))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2909.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2908.value)))+(x2909.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2910=IKsin(j0);
IkReal x2911=IKcos(j0);
IkReal x2912=((1.0)*r11);
IkReal x2913=((1.0)*r12);
IkReal x2914=(gconst185*r01);
IkReal x2915=((1.0)*r10);
IkReal x2916=(cj4*r00);
IkReal x2917=(gconst186*x2910);
IkReal x2918=(gconst186*x2911);
IkReal x2919=(sj4*x2910);
IkReal x2920=(cj4*gconst185*r11);
IkReal x2921=(sj4*x2911);
IkReal x2922=(gconst185*x2911);
IkReal x2923=(cj4*x2910);
IkReal x2924=(cj4*x2911);
evalcond[0]=(((gconst185*r00*x2910))+((r01*x2917))+(((-1.0)*x2912*x2918))+(((-1.0)*x2915*x2922)));
evalcond[1]=((((-1.0)*py*x2911))+(((0.08)*r00*x2917))+(((-0.08)*x2910*x2914))+(((0.08)*r11*x2922))+(((-0.08)*r10*x2918))+((px*x2910)));
evalcond[2]=(((x2914*x2919))+(((-1.0)*r00*sj4*x2917))+(((-1.0)*gconst185*x2912*x2921))+(((-1.0)*x2913*x2924))+((r10*sj4*x2918))+((r02*x2923)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x2915*x2918))+((x2916*x2917))+((r02*x2919))+(((-1.0)*x2913*x2921))+((x2911*x2920))+(((-1.0)*x2914*x2923)));
evalcond[4]=((((-1.0)*x2913*x2919))+((x2910*x2920))+(((-1.0)*cj4*x2915*x2917))+((x2914*x2924))+(((-1.0)*x2916*x2918))+(((-1.0)*r02*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2927 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2927.valid){
continue;
}
IkReal x2925=((-1.0)*(x2927.value));
IkReal x2926=x2750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x2925;
IkReal gconst184=x2925;
IkReal gconst185=((-1.0)*r21*x2926);
IkReal gconst186=(r20*x2926);
CheckValue<IkReal> x2947=IKPowWithIntegerCheck(cj4,-1);
if(!x2947.valid){
continue;
}
IkReal x2928=x2947.value;
IkReal x2929=((1500.0)*pz);
IkReal x2930=(cj0*px);
IkReal x2931=(gconst185*r20);
IkReal x2932=(py*sj0);
IkReal x2933=(cj4*r22);
IkReal x2934=(gconst186*r21);
IkReal x2935=((165.0)*x2931);
IkReal x2936=((165.0)*x2934);
IkReal x2937=(gconst185*r21*sj4);
IkReal x2938=(gconst186*r10*sj0);
IkReal x2939=(r22*sj4*x2928);
IkReal x2940=(gconst186*r20*sj4);
IkReal x2941=(cj0*gconst185*r01);
IkReal x2942=(cj0*gconst186*r00);
IkReal x2943=(gconst185*r11*sj0);
IkReal x2944=((705.0)*x2940);
IkReal x2945=((((120.0)*x2939))+(((705.0)*x2937))+(((705.0)*x2933)));
IkReal x2946=(x2936+x2935+x2929+x2944);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((222.0)+(((-1.0)*x2945))+x2946)))))+(IKabs(((((0.32)*x2943))+(((0.32)*x2941))+(((-4.0)*x2932))+(((-4.0)*x2930))+(((-0.32)*x2942))+(((0.44)*x2940))+(((-0.44)*x2933))+(((-0.44)*x2937))+(((-1.88)*x2931))+(((-1.88)*x2934))+(((-0.32)*x2938)))))+(((0.008)*(IKabs(((-222.0)+(((-1.0)*x2945))+x2946)))))+(((2.0)*(IKabs(((((-1.32)*x2933))+(((-1.32)*x2937))+(((0.96)*x2941))+(((0.96)*x2943))+(((1.32)*x2940))+(((-0.96)*x2942))+(((-5.64)*x2931))+(((-5.64)*x2934))+(((-12.0)*x2932))+(((-12.0)*x2930))+(((-0.96)*x2938)))))))+(((0.008)*(IKabs(((222.0)+(((55.0)*x2934))+(((55.0)*x2931))+(((500.0)*pz))+(((235.0)*x2940))+(((-40.0)*x2939))+(((-235.0)*x2933))+(((-235.0)*x2937))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(cj4,-1);
if(!x2977.valid){
continue;
}
IkReal x2948=x2977.value;
IkReal x2949=((222.0)*cj4);
IkReal x2950=cj4*cj4;
IkReal x2951=(cj4*gconst185);
IkReal x2952=((705.0)*sj4);
IkReal x2953=((0.008)*x2948);
IkReal x2954=(cj4*gconst186);
IkReal x2955=(r22*sj4);
IkReal x2956=((235.0)*sj4);
IkReal x2957=(cj4*pz);
IkReal x2958=((1500.0)*x2957);
IkReal x2959=((120.0)*x2955);
IkReal x2960=((500.0)*x2957);
IkReal x2961=((40.0)*x2955);
IkReal x2962=(r22*x2950);
IkReal x2963=((165.0)*r20*x2951);
IkReal x2964=((165.0)*r21*x2954);
IkReal x2965=((705.0)*x2962);
IkReal x2966=((55.0)*r21*x2954);
IkReal x2967=((55.0)*r20*x2951);
IkReal x2968=((235.0)*x2962);
IkReal x2969=(r20*x2952*x2954);
IkReal x2970=(r21*x2951*x2952);
IkReal x2971=(r20*x2954*x2956);
IkReal x2972=(r21*x2951*x2956);
IkReal x2973=(x2972+x2961+x2968);
IkReal x2974=(x2959+x2970+x2965);
IkReal x2975=(x2971+x2967+x2966+x2960);
IkReal x2976=(x2958+x2964+x2963+x2969);
op[0]=(x2953*(((((-1.0)*x2973))+x2949+x2975)));
op[1]=0;
op[2]=(x2953*(((((-1.0)*x2974))+x2949+x2976)));
op[3]=0;
op[4]=(x2953*(((((-1.0)*x2974))+(((-1.0)*x2949))+x2976)));
op[5]=0;
op[6]=(x2953*(((((-1.0)*x2973))+(((-1.0)*x2949))+x2975)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2978=(cj0*px);
IkReal x2979=((0.44)*sj4);
IkReal x2980=(gconst185*r21);
IkReal x2981=(gconst185*r20);
IkReal x2982=(gconst186*r20);
IkReal x2983=(py*sj0);
IkReal x2984=(gconst186*r21);
IkReal x2985=((1.32)*sj4);
IkReal x2986=(cj4*r22);
IkReal x2987=(gconst186*r10*sj0);
IkReal x2988=(cj0*gconst185*r01);
IkReal x2989=(cj0*gconst186*r00);
IkReal x2990=(gconst185*r11*sj0);
IkReal x2991=(x2979*x2982);
IkReal x2992=((0.32)*x2990);
IkReal x2993=((0.32)*x2988);
IkReal x2994=(x2991+x2992+x2993);
IkReal x2995=((((4.0)*x2983))+(((0.32)*x2989))+(((0.32)*x2987))+(((1.88)*x2981))+(((1.88)*x2984))+(((0.44)*x2986))+((x2979*x2980))+(((4.0)*x2978)));
IkReal x2996=((((-5.64)*x2984))+(((-5.64)*x2981))+(((-0.96)*x2989))+(((-0.96)*x2987))+(((-12.0)*x2978))+(((-1.32)*x2986))+(((-1.0)*x2980*x2985))+((x2982*x2985))+(((0.96)*x2990))+(((-12.0)*x2983))+(((0.96)*x2988)));
j1evalpoly[0]=((((-1.0)*x2995))+(((3.552)*(htj1*htj1*htj1*htj1*htj1)))+(((7.104)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2995))+x2994))))+((x2996*(htj1*htj1)))+((x2996*(htj1*htj1*htj1*htj1)))+(((3.552)*htj1))+x2994);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2997=(cj1*gconst186);
IkReal x2998=(r20*sj4);
IkReal x2999=(gconst185*r20);
IkReal x3000=((1.0)*r21);
IkReal x3001=(gconst185*sj4);
IkReal x3002=(gconst186*sj1);
IkReal x3003=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*cj1*x3000*x3001))+((sj1*x2999))+(((-1.0)*cj1*x3003))+((x2997*x2998))+((r21*x3002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2997*x3000))+((x2998*x3002))+(((-1.0)*sj1*x3000*x3001))+(((-1.0)*cj1*x2999))+(((-1.0)*sj1*x3003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x3000*x3001))+((sj1*x2999))+(((-1.0)*cj1*x3003))+((x2997*x2998))+((r21*x3002))))+IKsqr(((((-1.0)*x2997*x3000))+((x2998*x3002))+(((-1.0)*sj1*x3000*x3001))+(((-1.0)*cj1*x2999))+(((-1.0)*sj1*x3003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x3000*x3001))+((sj1*x2999))+(((-1.0)*cj1*x3003))+((x2997*x2998))+((r21*x3002))), ((((-1.0)*x2997*x3000))+((x2998*x3002))+(((-1.0)*sj1*x3000*x3001))+(((-1.0)*cj1*x2999))+(((-1.0)*sj1*x3003))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3004=IKcos(j2);
IkReal x3005=IKsin(j2);
IkReal x3006=(r10*sj0);
IkReal x3007=(gconst186*sj4);
IkReal x3008=((1.0)*gconst185);
IkReal x3009=((0.08)*cj0);
IkReal x3010=((1.0)*cj0);
IkReal x3011=(r11*sj0);
IkReal x3012=(cj0*r00);
IkReal x3013=((1.0)*sj0);
IkReal x3014=(cj1*x3004);
IkReal x3015=(cj1*x3005);
IkReal x3016=(sj1*x3004);
IkReal x3017=(sj1*x3005);
IkReal x3018=((1.0)*x3017);
evalcond[0]=(((gconst186*r21))+x3014+(((-1.0)*x3018))+((gconst185*r20)));
evalcond[1]=(((cj4*r22))+x3016+x3015+(((-1.0)*r20*x3007))+((gconst185*r21*sj4)));
evalcond[2]=((((-1.0)*gconst186*x3011))+(((-1.0)*gconst186*r01*x3010))+(((-1.0)*x3006*x3008))+(((-1.0)*x3008*x3012))+(((-1.0)*x3015))+(((-1.0)*x3016)));
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(cj4,-1);
if(!x3019.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((-0.11)*x3014))+pz+(((0.11)*x3017))+(((-0.08)*r22*sj4*(x3019.value)))+(((0.47)*x3016))+(((0.47)*x3015)));
evalcond[4]=(x3014+(((-1.0)*cj0*r01*sj4*x3008))+(((-1.0)*sj4*x3008*x3011))+(((-1.0)*cj4*r12*x3013))+(((-1.0)*x3018))+((x3007*x3012))+((x3006*x3007))+(((-1.0)*cj4*r02*x3010)));
evalcond[5]=((((-1.0)*px*x3010))+((gconst185*r01*x3009))+(((-0.08)*gconst186*x3006))+(((0.08)*gconst185*x3011))+(((-1.0)*gconst186*r00*x3009))+(((0.11)*x3016))+(((0.11)*x3015))+(((0.47)*x3014))+(((0.444)*sj1))+(((-1.0)*py*x3013))+(((-0.47)*x3017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3020=((1.0)*cj4);
IkReal x3021=((1.0)*gconst186);
IkReal x3022=((1.0)*gconst185);
CheckValue<IkReal> x3023 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3021))+(((-1.0)*r10*x3022)))),IkReal(((((-1.0)*r00*x3022))+(((-1.0)*r01*x3021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3023.valid){
continue;
}
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x3020*(gconst186*gconst186)))+(((-1.0)*x3020*(gconst185*gconst185)))))))+((gconst186*r20*sj4))+(((-1.0)*r21*sj4*x3022)))),-1);
if(!x3024.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3023.value)+(((1.5707963267949)*(x3024.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3025=IKsin(j0);
IkReal x3026=IKcos(j0);
IkReal x3027=((1.0)*r11);
IkReal x3028=((1.0)*r12);
IkReal x3029=(gconst185*r01);
IkReal x3030=((1.0)*r10);
IkReal x3031=(cj4*r00);
IkReal x3032=(gconst186*x3025);
IkReal x3033=(gconst186*x3026);
IkReal x3034=(sj4*x3025);
IkReal x3035=(cj4*gconst185*r11);
IkReal x3036=(sj4*x3026);
IkReal x3037=(gconst185*x3026);
IkReal x3038=(cj4*x3025);
IkReal x3039=(cj4*x3026);
evalcond[0]=((((-1.0)*x3030*x3037))+((gconst185*r00*x3025))+((r01*x3032))+(((-1.0)*x3027*x3033)));
evalcond[1]=((((0.08)*r00*x3032))+((px*x3025))+(((-0.08)*r10*x3033))+(((0.08)*r11*x3037))+(((-0.08)*x3025*x3029))+(((-1.0)*py*x3026)));
evalcond[2]=(((r02*x3038))+((r10*sj4*x3033))+(((-1.0)*r00*sj4*x3032))+(((-1.0)*gconst185*x3027*x3036))+(((-1.0)*x3028*x3039))+((x3029*x3034)));
evalcond[3]=((-1.0)+((r02*x3034))+((x3026*x3035))+(((-1.0)*cj4*x3030*x3033))+(((-1.0)*x3029*x3038))+(((-1.0)*x3028*x3036))+((x3031*x3032)));
evalcond[4]=((((-1.0)*cj4*x3030*x3032))+((x3025*x3035))+(((-1.0)*x3028*x3034))+(((-1.0)*x3031*x3033))+(((-1.0)*r02*x3036))+((x3029*x3039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x3042 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3042.valid){
continue;
}
IkReal x3040=((-1.0)*(x3042.value));
IkReal x3041=x2750;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst185;
cj5=gconst186;
j5=x3040;
IkReal gconst184=x3040;
IkReal gconst185=((-1.0)*r21*x3041);
IkReal gconst186=(r20*x3041);
CheckValue<IkReal> x3062=IKPowWithIntegerCheck(cj4,-1);
if(!x3062.valid){
continue;
}
IkReal x3043=x3062.value;
IkReal x3044=((1500.0)*pz);
IkReal x3045=(cj0*px);
IkReal x3046=(gconst185*r20);
IkReal x3047=(py*sj0);
IkReal x3048=(cj4*r22);
IkReal x3049=(gconst186*r21);
IkReal x3050=((165.0)*x3046);
IkReal x3051=((165.0)*x3049);
IkReal x3052=(gconst185*r21*sj4);
IkReal x3053=(gconst186*r10*sj0);
IkReal x3054=(r22*sj4*x3043);
IkReal x3055=(gconst186*r20*sj4);
IkReal x3056=(cj0*gconst185*r01);
IkReal x3057=(cj0*gconst186*r00);
IkReal x3058=(gconst185*r11*sj0);
IkReal x3059=((705.0)*x3055);
IkReal x3060=((((705.0)*x3048))+(((120.0)*x3054))+(((705.0)*x3052)));
IkReal x3061=(x3044+x3059+x3050+x3051);
j1eval[0]=((14.208)+(((2.0)*(IKabs(((((-1.32)*x3048))+(((-5.64)*x3046))+(((-5.64)*x3049))+(((1.32)*x3055))+(((-0.96)*x3053))+(((-0.96)*x3057))+(((-1.32)*x3052))+(((0.96)*x3056))+(((0.96)*x3058))+(((-12.0)*x3045))+(((-12.0)*x3047)))))))+(((0.008)*(IKabs(((-222.0)+x3061+(((-1.0)*x3060)))))))+(((0.008)*(IKabs(((222.0)+(((-235.0)*x3052))+(((235.0)*x3055))+(((500.0)*pz))+(((-40.0)*x3054))+(((55.0)*x3046))+(((55.0)*x3049))+(((-235.0)*x3048)))))))+(((0.008)*(IKabs(((222.0)+x3061+(((-1.0)*x3060)))))))+(IKabs(((((0.32)*x3058))+(((0.32)*x3056))+(((0.44)*x3055))+(((-0.44)*x3048))+(((-4.0)*x3045))+(((-4.0)*x3047))+(((-0.32)*x3053))+(((-0.32)*x3057))+(((-0.44)*x3052))+(((-1.88)*x3046))+(((-1.88)*x3049))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3092=IKPowWithIntegerCheck(cj4,-1);
if(!x3092.valid){
continue;
}
IkReal x3063=x3092.value;
IkReal x3064=((222.0)*cj4);
IkReal x3065=cj4*cj4;
IkReal x3066=(cj4*gconst185);
IkReal x3067=((705.0)*sj4);
IkReal x3068=((0.008)*x3063);
IkReal x3069=(cj4*gconst186);
IkReal x3070=(r22*sj4);
IkReal x3071=((235.0)*sj4);
IkReal x3072=(cj4*pz);
IkReal x3073=((1500.0)*x3072);
IkReal x3074=((120.0)*x3070);
IkReal x3075=((500.0)*x3072);
IkReal x3076=((40.0)*x3070);
IkReal x3077=(r22*x3065);
IkReal x3078=((165.0)*r20*x3066);
IkReal x3079=((165.0)*r21*x3069);
IkReal x3080=((705.0)*x3077);
IkReal x3081=((55.0)*r21*x3069);
IkReal x3082=((55.0)*r20*x3066);
IkReal x3083=((235.0)*x3077);
IkReal x3084=(r20*x3067*x3069);
IkReal x3085=(r21*x3066*x3067);
IkReal x3086=(r20*x3069*x3071);
IkReal x3087=(r21*x3066*x3071);
IkReal x3088=(x3087+x3083+x3076);
IkReal x3089=(x3085+x3080+x3074);
IkReal x3090=(x3086+x3081+x3082+x3075);
IkReal x3091=(x3084+x3073+x3078+x3079);
op[0]=(x3068*(((((-1.0)*x3088))+x3090+x3064)));
op[1]=0;
op[2]=(x3068*(((((-1.0)*x3089))+x3091+x3064)));
op[3]=0;
op[4]=(x3068*(((((-1.0)*x3089))+x3091+(((-1.0)*x3064)))));
op[5]=0;
op[6]=(x3068*(((((-1.0)*x3088))+x3090+(((-1.0)*x3064)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3093=(cj0*px);
IkReal x3094=((0.44)*sj4);
IkReal x3095=(gconst185*r21);
IkReal x3096=(gconst185*r20);
IkReal x3097=(gconst186*r20);
IkReal x3098=(py*sj0);
IkReal x3099=(gconst186*r21);
IkReal x3100=((1.32)*sj4);
IkReal x3101=(cj4*r22);
IkReal x3102=(gconst186*r10*sj0);
IkReal x3103=(cj0*gconst185*r01);
IkReal x3104=(cj0*gconst186*r00);
IkReal x3105=(gconst185*r11*sj0);
IkReal x3106=(x3094*x3097);
IkReal x3107=((0.32)*x3105);
IkReal x3108=((0.32)*x3103);
IkReal x3109=(x3108+x3106+x3107);
IkReal x3110=((((4.0)*x3098))+(((4.0)*x3093))+(((0.44)*x3101))+(((1.88)*x3099))+(((1.88)*x3096))+((x3094*x3095))+(((0.32)*x3104))+(((0.32)*x3102)));
IkReal x3111=((((-5.64)*x3099))+(((-5.64)*x3096))+(((0.96)*x3103))+(((0.96)*x3105))+((x3097*x3100))+(((-0.96)*x3104))+(((-0.96)*x3102))+(((-1.0)*x3095*x3100))+(((-12.0)*x3093))+(((-12.0)*x3098))+(((-1.32)*x3101)));
j1evalpoly[0]=(x3109+(((3.552)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x3110))+(((7.104)*(htj1*htj1*htj1)))+((x3111*(htj1*htj1)))+(((3.552)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x3109+(((-1.0)*x3110))))))+((x3111*(htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3112=(cj1*gconst186);
IkReal x3113=(r20*sj4);
IkReal x3114=(gconst185*r20);
IkReal x3115=((1.0)*r21);
IkReal x3116=(gconst185*sj4);
IkReal x3117=(gconst186*sj1);
IkReal x3118=((1.0)*cj4*r22);
if( IKabs((((sj1*x3114))+((x3112*x3113))+(((-1.0)*cj1*x3118))+(((-1.0)*cj1*x3115*x3116))+((r21*x3117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x3118))+(((-1.0)*sj1*x3115*x3116))+((x3113*x3117))+(((-1.0)*cj1*x3114))+(((-1.0)*x3112*x3115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3114))+((x3112*x3113))+(((-1.0)*cj1*x3118))+(((-1.0)*cj1*x3115*x3116))+((r21*x3117))))+IKsqr(((((-1.0)*sj1*x3118))+(((-1.0)*sj1*x3115*x3116))+((x3113*x3117))+(((-1.0)*cj1*x3114))+(((-1.0)*x3112*x3115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3114))+((x3112*x3113))+(((-1.0)*cj1*x3118))+(((-1.0)*cj1*x3115*x3116))+((r21*x3117))), ((((-1.0)*sj1*x3118))+(((-1.0)*sj1*x3115*x3116))+((x3113*x3117))+(((-1.0)*cj1*x3114))+(((-1.0)*x3112*x3115))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3119=IKcos(j2);
IkReal x3120=IKsin(j2);
IkReal x3121=(r10*sj0);
IkReal x3122=(gconst186*sj4);
IkReal x3123=((1.0)*gconst185);
IkReal x3124=((0.08)*cj0);
IkReal x3125=((1.0)*cj0);
IkReal x3126=(r11*sj0);
IkReal x3127=(cj0*r00);
IkReal x3128=((1.0)*sj0);
IkReal x3129=(cj1*x3119);
IkReal x3130=(cj1*x3120);
IkReal x3131=(sj1*x3119);
IkReal x3132=(sj1*x3120);
IkReal x3133=((1.0)*x3132);
evalcond[0]=(x3129+((gconst186*r21))+((gconst185*r20))+(((-1.0)*x3133)));
evalcond[1]=(x3131+x3130+(((-1.0)*r20*x3122))+((cj4*r22))+((gconst185*r21*sj4)));
evalcond[2]=((((-1.0)*x3131))+(((-1.0)*x3130))+(((-1.0)*gconst186*r01*x3125))+(((-1.0)*x3123*x3127))+(((-1.0)*gconst186*x3126))+(((-1.0)*x3121*x3123)));
CheckValue<IkReal> x3134=IKPowWithIntegerCheck(cj4,-1);
if(!x3134.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x3130))+(((0.47)*x3131))+pz+(((-0.08)*r22*sj4*(x3134.value)))+(((0.11)*x3132))+(((-0.11)*x3129)));
evalcond[4]=(x3129+(((-1.0)*cj4*r12*x3128))+(((-1.0)*cj4*r02*x3125))+((x3121*x3122))+(((-1.0)*sj4*x3123*x3126))+(((-1.0)*x3133))+(((-1.0)*cj0*r01*sj4*x3123))+((x3122*x3127)));
evalcond[5]=((((-1.0)*py*x3128))+(((-0.08)*gconst186*x3121))+(((-0.47)*x3132))+(((0.47)*x3129))+(((-1.0)*gconst186*r00*x3124))+(((0.08)*gconst185*x3126))+((gconst185*r01*x3124))+(((0.11)*x3130))+(((0.11)*x3131))+(((-1.0)*px*x3125))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3136 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3136)==0){
continue;
}
IkReal x3135=pow(x3136,-0.5);
CheckValue<IkReal> x3137 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3137.valid){
continue;
}
IkReal gconst187=((3.14159265358979)+(((-1.0)*(x3137.value))));
IkReal gconst188=((1.0)*r21*x3135);
IkReal gconst189=((-1.0)*r20*x3135);
CheckValue<IkReal> x3138 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3138.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3138.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x3141 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3141.valid){
continue;
}
IkReal x3139=((1.0)*(x3141.value));
IkReal x3140=x3135;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3139)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3139)));
IkReal gconst188=((1.0)*r21*x3140);
IkReal gconst189=((-1.0)*r20*x3140);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x3144 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3144.valid){
continue;
}
IkReal x3142=((1.0)*(x3144.value));
IkReal x3143=x3135;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3142)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3142)));
IkReal gconst188=((1.0)*r21*x3143);
IkReal gconst189=((-1.0)*r20*x3143);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
IkReal x3145=((1.0)*(x3147.value));
IkReal x3146=x3135;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3145)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3145)));
IkReal gconst188=((1.0)*r21*x3146);
IkReal gconst189=((-1.0)*r20*x3146);
IkReal x3148=(rxp2_2*sj4);
IkReal x3149=(r21*rxp1_2);
IkReal x3150=(r20*rxp0_2);
IkReal x3151=x3135;
IkReal x3152=((12.5)*cj4*x3151);
IkReal x3153=((1.0)*cj4*x3151);
j0eval[0]=((((-12.5)*x3148))+((x3149*x3152))+((x3150*x3152)));
j0eval[1]=IKsign(((((-1.0)*x3148))+((x3149*x3153))+((x3150*x3153))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3154=((0.08)*gconst189);
IkReal x3155=((0.08)*gconst188);
CheckValue<IkReal> x3156 = IKatan2WithCheck(IkReal((((r11*x3155))+(((-1.0)*py))+(((-1.0)*r10*x3154)))),IkReal(((((-1.0)*px))+((r01*x3155))+(((-1.0)*r00*x3154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3156.valid){
continue;
}
CheckValue<IkReal> x3157=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*gconst189*rxp0_2))+(((-1.0)*r20*sj4*x3155))+(((-1.0)*r21*sj4*x3154))+(((-1.0)*rxp2_2*sj4))+((cj4*gconst188*rxp1_2)))),-1);
if(!x3157.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3156.value)+(((1.5707963267949)*(x3157.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3158=IKsin(j0);
IkReal x3159=IKcos(j0);
IkReal x3160=((1.0)*sj4);
IkReal x3161=(gconst188*r01);
IkReal x3162=(gconst189*r00);
IkReal x3163=((1.0)*gconst189);
IkReal x3164=((1.0)*cj4);
IkReal x3165=((0.08)*x3158);
IkReal x3166=(cj4*x3158);
IkReal x3167=(r10*x3159);
IkReal x3168=(r12*x3159);
IkReal x3169=(sj4*x3158);
IkReal x3170=(gconst188*r11*x3159);
evalcond[0]=(((gconst188*r00*x3158))+(((-1.0)*gconst188*x3167))+((gconst189*r01*x3158))+(((-1.0)*r11*x3159*x3163)));
evalcond[1]=((((-1.0)*x3161*x3165))+(((-0.08)*gconst189*x3167))+((px*x3158))+(((-1.0)*py*x3159))+((x3162*x3165))+(((0.08)*x3170)));
evalcond[2]=(((r02*x3166))+(((-1.0)*x3158*x3160*x3162))+((gconst189*sj4*x3167))+(((-1.0)*x3164*x3168))+(((-1.0)*x3160*x3170))+((x3161*x3169)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x3163*x3167))+((r02*x3169))+((cj4*x3170))+(((-1.0)*x3160*x3168))+(((-1.0)*x3158*x3161*x3164))+((x3162*x3166)));
evalcond[4]=((((-1.0)*x3159*x3162*x3164))+(((-1.0)*r02*x3159*x3160))+((gconst188*r11*x3166))+((cj4*x3159*x3161))+(((-1.0)*r12*x3158*x3160))+(((-1.0)*r10*x3163*x3166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3171=(gconst188*r20);
IkReal x3172=(gconst189*r21);
CheckValue<IkReal> x3179 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3179.valid){
continue;
}
IkReal x3173=((1.0)*(x3179.value));
IkReal x3174=(x3171+x3172);
IkReal x3175=((1.0)+x3174);
IkReal x3176=((-1.0)+x3174);
IkReal x3177=x3135;
IkReal x3178=(((cj4*r22))+((gconst188*r21*sj4))+(((-1.0)*gconst189*r20*sj4)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3173)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3173)));
IkReal gconst188=((1.0)*r21*x3177);
IkReal gconst189=((-1.0)*r20*x3177);
IkReal gconst190=x3175;
IkReal gconst191=x3176;
IkReal gconst192=x3178;
IkReal gconst193=x3178;
IkReal gconst194=x3175;
IkReal gconst195=x3176;
IkReal gconst196=x3178;
IkReal gconst197=x3178;
IkReal gconst198=x3176;
IkReal gconst199=x3175;
IkReal gconst200=x3178;
IkReal gconst201=x3178;
IkReal gconst202=x3176;
IkReal gconst203=x3175;
IkReal gconst204=x3178;
IkReal gconst205=x3178;
IkReal x3180=gconst189*gconst189;
IkReal x3181=r20*r20;
IkReal x3182=sj4*sj4;
IkReal x3183=gconst188*gconst188;
IkReal x3184=r21*r21;
IkReal x3185=cj4*cj4;
IkReal x3186=r22*r22;
IkReal x3187=(gconst189*r20);
IkReal x3188=(gconst188*r21);
IkReal x3189=((8.0)*x3188);
IkReal x3190=((24.0)*x3181);
IkReal x3191=(cj4*r22*sj4);
IkReal x3192=((4.0)*x3184);
IkReal x3193=((16.0)*x3184);
IkReal x3194=((24.0)*x3184);
IkReal x3195=(x3180*x3182);
IkReal x3196=(x3181*x3183);
IkReal x3197=(x3182*x3183);
IkReal x3198=(x3185*x3186);
j1eval[0]=((((0.5)*(IKabs(((4.0)+(((-1.0)*x3187*x3189))+(((-1.0)*x3180*x3192))+(((-1.0)*x3192*x3197))+(((-4.0)*x3198))+(((-4.0)*x3196))+((x3182*x3187*x3189))+(((8.0)*x3187*x3191))+(((-1.0)*x3189*x3191))+(((-4.0)*x3181*x3195)))))))+(((0.5)*(IKabs(((24.0)+(((-1.0)*x3190*x3195))+(((48.0)*x3187*x3191))+(((-48.0)*x3188*x3191))+(((-1.0)*x3183*x3190))+(((-1.0)*x3180*x3194))+(((48.0)*x3182*x3187*x3188))+(((-48.0)*x3187*x3188))+(((-24.0)*x3198))+(((-1.0)*x3194*x3197)))))))+(IKabs(((16.0)+(((-16.0)*x3196))+(((-16.0)*x3198))+(((-1.0)*x3180*x3193))+(((-1.0)*x3193*x3197))+(((32.0)*x3182*x3187*x3188))+(((-16.0)*x3181*x3195))+(((32.0)*x3187*x3191))+(((-32.0)*x3187*x3188))+(((-32.0)*x3188*x3191))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x3199=((16.0)*gconst202);
IkReal x3200=((16.0)*gconst199);
IkReal x3201=((16.0)*gconst194);
IkReal x3202=((16.0)*gconst191);
IkReal x3203=(gconst195*gconst196);
IkReal x3204=(gconst191*gconst192);
IkReal x3205=(gconst194*gconst197);
IkReal x3206=(gconst199*gconst200);
IkReal x3207=(gconst190*gconst193);
IkReal x3208=(gconst198*gconst201);
IkReal x3209=(gconst191*gconst203);
IkReal x3210=((2.0)*gconst195);
IkReal x3211=(gconst202*gconst205);
IkReal x3212=(gconst192*gconst199);
IkReal x3213=(gconst191*gconst200);
IkReal x3214=(gconst197*gconst202);
IkReal x3215=((2.0)*gconst194);
IkReal x3216=(gconst190*gconst201);
IkReal x3217=(gconst203*gconst204);
IkReal x3218=((2.0)*gconst202);
IkReal x3219=(gconst193*gconst198);
IkReal x3220=((4.0)*gconst199);
IkReal x3221=(gconst194*gconst205);
IkReal x3222=((8.0)*gconst201);
IkReal x3223=((2.0)*gconst190);
IkReal x3224=((2.0)*gconst203);
IkReal x3225=((2.0)*gconst191);
IkReal x3226=((2.0)*gconst198);
IkReal x3227=((8.0)*gconst191);
IkReal x3228=((1.0)*gconst204);
IkReal x3229=((2.0)*gconst199);
IkReal x3230=((4.0)*gconst202);
IkReal x3231=(gconst196*gconst199);
IkReal x3232=(gconst196*gconst203);
IkReal x3233=(gconst195*gconst204);
IkReal x3234=((16.0)*gconst193);
IkReal x3235=((4.0)*gconst195);
IkReal x3236=((8.0)*gconst193);
IkReal x3237=((16.0)*gconst201);
IkReal x3238=((4.0)*gconst194);
IkReal x3239=((4.0)*gconst203);
IkReal x3240=(gconst199*gconst204);
IkReal x3241=(gconst202*x3220);
IkReal x3242=(gconst194*x3220);
IkReal x3243=(gconst191*x3230);
IkReal x3244=(gconst194*x3222);
IkReal x3245=(gconst204*x3227);
IkReal x3246=(gconst202*x3236);
IkReal x3247=((8.0)*x3231);
IkReal x3248=(gconst191*x3238);
IkReal x3249=(gconst190*x3232);
IkReal x3250=(x3241+x3200);
IkReal x3251=(x3248+x3201);
IkReal x3252=(x3243+x3242);
IkReal x3253=(x3247+x3246+x3245+x3244);
op[0]=((((-1.0)*x3208*x3211))+((x3208*x3217))+((x3206*x3211))+(((-1.0)*x3241))+(((-1.0)*x3206*x3217)));
op[1]=0;
op[2]=((((-1.0)*x3206*x3232))+((x3208*x3232))+((x3208*x3233))+((x3206*x3221))+((x3211*x3212))+((x3211*x3213))+(((-1.0)*x3208*x3214))+(((-1.0)*gconst200*x3209*x3228))+x3250+((x3206*x3214))+(((-1.0)*x3212*x3217))+((x3216*x3217))+(((-1.0)*gconst198*x3239))+(((-1.0)*gconst198*x3230))+(((-1.0)*gconst195*x3206*x3228))+(((-1.0)*gconst203*x3220))+(((-1.0)*x3211*x3216))+(((-1.0)*x3211*x3219))+(((-1.0)*x3199))+(((-1.0)*gconst204*x3237))+(((-1.0)*x3208*x3221))+(((-1.0)*x3252))+((x3217*x3219)));
op[3]=((((-1.0)*x3206*x3210))+(((-1.0)*x3206*x3215))+((x3216*x3224))+((x3208*x3215))+((x3208*x3210))+x3253+(((32.0)*gconst204))+((x3211*x3223))+((x3211*x3225))+(((-2.0)*gconst204*x3209))+(((-1.0)*gconst196*gconst198*x3224))+((x3216*x3218))+(((-2.0)*gconst200*x3209))+(((-1.0)*x3224*x3231))+(((-1.0)*gconst198*gconst204*x3210))+(((-32.0)*gconst201))+(((-1.0)*x3212*x3218))+(((-1.0)*gconst202*x3222))+(((-1.0)*x3210*x3240))+((x3219*x3224))+(((-1.0)*x3213*x3218))+((gconst198*gconst205*x3215))+(((-8.0)*x3240))+((x3218*x3219))+((gconst199*gconst205*x3215))+(((-1.0)*x3212*x3224))+(((-1.0)*x3217*x3223))+((x3214*x3229))+((x3214*x3226)));
op[4]=((64.0)+(((-1.0)*x3207*x3211))+((x3212*x3214))+x3199+(((-1.0)*x3219*x3221))+(((-1.0)*x3204*x3217))+(((-1.0)*gconst196*x3237))+(((-1.0)*x3216*x3221))+((x3213*x3214))+(((-1.0)*gconst190*x3239))+(((-1.0)*gconst190*x3230))+(((-1.0)*x3212*x3232))+((x3205*x3206))+(((-1.0)*gconst195*x3220))+x3202+x3252+((x3216*x3233))+((x3216*x3232))+((x3219*x3233))+((x3219*x3232))+((x3212*x3221))+(((-1.0)*gconst195*x3213*x3228))+(((-1.0)*x3203*x3206))+((x3207*x3217))+(((-1.0)*gconst198*x3238))+(((-1.0)*gconst198*x3235))+(((-4.0)*x3209))+(((-1.0)*x3214*x3219))+(((-1.0)*x3214*x3216))+(((-1.0)*gconst195*x3212*x3228))+(((-1.0)*gconst204*x3234))+(((-1.0)*x3205*x3208))+((x3213*x3221))+((x3203*x3208))+((x3204*x3211))+(((-1.0)*x3251))+(((-1.0)*x3250))+(((-1.0)*gconst196*gconst200*x3209)));
op[5]=((((-1.0)*x3223*x3232))+((gconst191*gconst205*x3215))+((x3207*x3224))+(((-1.0)*x3203*x3226))+(((-1.0)*x3203*x3229))+(((-1.0)*x3204*x3218))+(((32.0)*gconst196))+((x3215*x3219))+((x3215*x3216))+(((-1.0)*gconst190*gconst204*x3210))+(((-1.0)*gconst191*gconst204*x3210))+((gconst190*gconst205*x3215))+(((-32.0)*gconst193))+(((-1.0)*x3210*x3213))+(((-1.0)*x3210*x3212))+((x3207*x3218))+(((-2.0)*gconst196*x3209))+(((-1.0)*x3204*x3224))+((x3205*x3229))+((x3205*x3226))+((gconst194*x3236))+(((-1.0)*x3212*x3215))+(((-1.0)*x3213*x3215))+(((-1.0)*x3253))+((gconst196*x3227))+((x3210*x3219))+((x3210*x3216))+((x3214*x3223))+((x3214*x3225)));
op[6]=((((-1.0)*x3207*x3214))+(((-1.0)*x3205*x3216))+(((-1.0)*x3205*x3219))+(((-1.0)*gconst196*x3234))+(((-1.0)*gconst191*x3235))+((x3203*x3219))+((x3203*x3216))+((x3205*x3213))+((x3205*x3212))+(((-1.0)*gconst190*x3238))+(((-1.0)*gconst190*x3235))+((x3204*x3221))+((x3207*x3232))+((x3207*x3233))+(((-1.0)*x3203*x3212))+(((-1.0)*x3203*x3213))+x3251+(((-1.0)*x3207*x3221))+(((-1.0)*x3202))+((x3204*x3214))+(((-1.0)*gconst195*x3204*x3228))+(((-1.0)*x3252))+(((-1.0)*x3204*x3232)));
op[7]=0;
op[8]=(((x3204*x3205))+(((-1.0)*x3203*x3204))+(((-1.0)*x3248))+(((-1.0)*x3205*x3207))+((x3203*x3207)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3254=(gconst188*r20);
IkReal x3255=((1.0)*cj1);
IkReal x3256=(gconst189*r21);
IkReal x3257=((1.0)*cj4*r22);
IkReal x3258=(gconst189*r20*sj4);
IkReal x3259=(gconst188*r21*sj4);
if( IKabs((((cj1*x3258))+(((-1.0)*cj4*r22*x3255))+((sj1*x3256))+((sj1*x3254))+(((-1.0)*x3255*x3259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3254*x3255))+(((-1.0)*sj1*x3259))+((sj1*x3258))+(((-1.0)*x3255*x3256))+(((-1.0)*sj1*x3257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3258))+(((-1.0)*cj4*r22*x3255))+((sj1*x3256))+((sj1*x3254))+(((-1.0)*x3255*x3259))))+IKsqr(((((-1.0)*x3254*x3255))+(((-1.0)*sj1*x3259))+((sj1*x3258))+(((-1.0)*x3255*x3256))+(((-1.0)*sj1*x3257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3258))+(((-1.0)*cj4*r22*x3255))+((sj1*x3256))+((sj1*x3254))+(((-1.0)*x3255*x3259))), ((((-1.0)*x3254*x3255))+(((-1.0)*sj1*x3259))+((sj1*x3258))+(((-1.0)*x3255*x3256))+(((-1.0)*sj1*x3257))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3260=IKcos(j2);
IkReal x3261=IKsin(j2);
IkReal x3262=((0.08)*cj0);
IkReal x3263=(gconst189*r00);
IkReal x3264=(cj0*r01);
IkReal x3265=(r11*sj0);
IkReal x3266=((1.0)*cj0);
IkReal x3267=((1.0)*gconst189);
IkReal x3268=(r10*sj0);
IkReal x3269=((1.0)*sj0);
IkReal x3270=(cj1*x3260);
IkReal x3271=(cj1*x3261);
IkReal x3272=((1.0)*gconst188*sj4);
IkReal x3273=(sj1*x3260);
IkReal x3274=(sj1*x3261);
IkReal x3275=((1.0)*x3274);
evalcond[0]=(x3270+((gconst188*r20))+(((-1.0)*x3275))+((gconst189*r21)));
evalcond[1]=(((cj4*r22))+x3273+x3271+(((-1.0)*r20*sj4*x3267))+((gconst188*r21*sj4)));
evalcond[2]=((((-1.0)*x3273))+(((-1.0)*x3271))+(((-1.0)*gconst188*x3268))+(((-1.0)*x3264*x3267))+(((-1.0)*x3265*x3267))+(((-1.0)*gconst188*r00*x3266)));
CheckValue<IkReal> x3276=IKPowWithIntegerCheck(cj4,-1);
if(!x3276.valid){
continue;
}
evalcond[3]=((((0.47)*x3273))+(((0.47)*x3271))+(((-0.444)*cj1))+pz+(((-0.08)*r22*sj4*(x3276.value)))+(((-0.11)*x3270))+(((0.11)*x3274)));
evalcond[4]=(x3270+((gconst189*sj4*x3268))+(((-1.0)*x3275))+(((-1.0)*x3265*x3272))+(((-1.0)*x3264*x3272))+(((-1.0)*cj4*r12*x3269))+((cj0*sj4*x3263))+(((-1.0)*cj4*r02*x3266)));
evalcond[5]=((((0.47)*x3270))+(((-1.0)*px*x3266))+((gconst188*r01*x3262))+(((0.08)*gconst188*x3265))+(((-1.0)*x3262*x3263))+(((-0.08)*gconst189*x3268))+(((-1.0)*py*x3269))+(((0.11)*x3273))+(((0.11)*x3271))+(((0.444)*sj1))+(((-0.47)*x3274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3277=((1.0)*gconst189);
IkReal x3278=((1.0)*cj4);
IkReal x3279=((1.0)*gconst188);
CheckValue<IkReal> x3280=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x3278*(gconst188*gconst188)))+(((-1.0)*cj4*gconst189*x3277))))))+(((-1.0)*r21*sj4*x3279))+((gconst189*r20*sj4)))),-1);
if(!x3280.valid){
continue;
}
CheckValue<IkReal> x3281 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3277))+(((-1.0)*r10*x3279)))),IkReal(((((-1.0)*r00*x3279))+(((-1.0)*r01*x3277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3281.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3280.value)))+(x3281.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3282=IKsin(j0);
IkReal x3283=IKcos(j0);
IkReal x3284=((1.0)*sj4);
IkReal x3285=(gconst188*r01);
IkReal x3286=(gconst189*r00);
IkReal x3287=((1.0)*gconst189);
IkReal x3288=((1.0)*cj4);
IkReal x3289=((0.08)*x3282);
IkReal x3290=(cj4*x3282);
IkReal x3291=(r10*x3283);
IkReal x3292=(r12*x3283);
IkReal x3293=(sj4*x3282);
IkReal x3294=(gconst188*r11*x3283);
evalcond[0]=(((gconst189*r01*x3282))+(((-1.0)*gconst188*x3291))+(((-1.0)*r11*x3283*x3287))+((gconst188*r00*x3282)));
evalcond[1]=(((x3286*x3289))+(((0.08)*x3294))+(((-0.08)*gconst189*x3291))+(((-1.0)*py*x3283))+((px*x3282))+(((-1.0)*x3285*x3289)));
evalcond[2]=(((r02*x3290))+(((-1.0)*x3288*x3292))+(((-1.0)*x3284*x3294))+(((-1.0)*x3282*x3284*x3286))+((gconst189*sj4*x3291))+((x3285*x3293)));
evalcond[3]=((-1.0)+((r02*x3293))+((cj4*x3294))+(((-1.0)*cj4*x3287*x3291))+(((-1.0)*x3284*x3292))+(((-1.0)*x3282*x3285*x3288))+((x3286*x3290)));
evalcond[4]=((((-1.0)*r02*x3283*x3284))+(((-1.0)*x3283*x3286*x3288))+((cj4*x3283*x3285))+(((-1.0)*r10*x3287*x3290))+(((-1.0)*r12*x3282*x3284))+((gconst188*r11*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3295=(gconst188*r20);
IkReal x3296=(gconst189*r21);
CheckValue<IkReal> x3303 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3303.valid){
continue;
}
IkReal x3297=((1.0)*(x3303.value));
IkReal x3298=(x3295+x3296);
IkReal x3299=((1.0)+x3298);
IkReal x3300=((-1.0)+x3298);
IkReal x3301=x3135;
IkReal x3302=(((cj4*r22))+((gconst188*r21*sj4))+(((-1.0)*gconst189*r20*sj4)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3297)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3297)));
IkReal gconst188=((1.0)*r21*x3301);
IkReal gconst189=((-1.0)*r20*x3301);
IkReal gconst190=x3299;
IkReal gconst191=x3300;
IkReal gconst192=x3302;
IkReal gconst193=x3302;
IkReal gconst194=x3299;
IkReal gconst195=x3300;
IkReal gconst196=x3302;
IkReal gconst197=x3302;
IkReal gconst198=x3300;
IkReal gconst199=x3299;
IkReal gconst200=x3302;
IkReal gconst201=x3302;
IkReal gconst202=x3300;
IkReal gconst203=x3299;
IkReal gconst204=x3302;
IkReal gconst205=x3302;
IkReal x3304=gconst189*gconst189;
IkReal x3305=r20*r20;
IkReal x3306=sj4*sj4;
IkReal x3307=gconst188*gconst188;
IkReal x3308=r21*r21;
IkReal x3309=cj4*cj4;
IkReal x3310=r22*r22;
IkReal x3311=(gconst189*r20);
IkReal x3312=(gconst188*r21);
IkReal x3313=((8.0)*x3312);
IkReal x3314=((24.0)*x3305);
IkReal x3315=(cj4*r22*sj4);
IkReal x3316=((4.0)*x3308);
IkReal x3317=((16.0)*x3308);
IkReal x3318=((24.0)*x3308);
IkReal x3319=(x3304*x3306);
IkReal x3320=(x3305*x3307);
IkReal x3321=(x3306*x3307);
IkReal x3322=(x3309*x3310);
j1eval[0]=((IKabs(((16.0)+(((-32.0)*x3311*x3312))+(((-1.0)*x3304*x3317))+(((-32.0)*x3312*x3315))+(((-16.0)*x3305*x3319))+(((-1.0)*x3317*x3321))+(((32.0)*x3306*x3311*x3312))+(((-16.0)*x3320))+(((-16.0)*x3322))+(((32.0)*x3311*x3315)))))+(((0.5)*(IKabs(((24.0)+(((48.0)*x3306*x3311*x3312))+(((-24.0)*x3322))+(((-1.0)*x3304*x3318))+(((-48.0)*x3311*x3312))+(((-1.0)*x3314*x3319))+(((48.0)*x3311*x3315))+(((-1.0)*x3318*x3321))+(((-48.0)*x3312*x3315))+(((-1.0)*x3307*x3314)))))))+(((0.5)*(IKabs(((4.0)+(((-4.0)*x3305*x3319))+(((-1.0)*x3304*x3316))+(((-4.0)*x3320))+(((-4.0)*x3322))+(((-1.0)*x3313*x3315))+(((8.0)*x3311*x3315))+(((-1.0)*x3311*x3313))+(((-1.0)*x3316*x3321))+((x3306*x3311*x3313))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x3323=((16.0)*gconst202);
IkReal x3324=((16.0)*gconst199);
IkReal x3325=((16.0)*gconst194);
IkReal x3326=((16.0)*gconst191);
IkReal x3327=(gconst195*gconst196);
IkReal x3328=(gconst191*gconst192);
IkReal x3329=(gconst194*gconst197);
IkReal x3330=(gconst199*gconst200);
IkReal x3331=(gconst190*gconst193);
IkReal x3332=(gconst198*gconst201);
IkReal x3333=(gconst191*gconst203);
IkReal x3334=((2.0)*gconst195);
IkReal x3335=(gconst202*gconst205);
IkReal x3336=(gconst192*gconst199);
IkReal x3337=(gconst191*gconst200);
IkReal x3338=(gconst197*gconst202);
IkReal x3339=((2.0)*gconst194);
IkReal x3340=(gconst190*gconst201);
IkReal x3341=(gconst203*gconst204);
IkReal x3342=((2.0)*gconst202);
IkReal x3343=(gconst193*gconst198);
IkReal x3344=((4.0)*gconst199);
IkReal x3345=(gconst194*gconst205);
IkReal x3346=((8.0)*gconst201);
IkReal x3347=((2.0)*gconst190);
IkReal x3348=((2.0)*gconst203);
IkReal x3349=((2.0)*gconst191);
IkReal x3350=((2.0)*gconst198);
IkReal x3351=((8.0)*gconst191);
IkReal x3352=((1.0)*gconst204);
IkReal x3353=((2.0)*gconst199);
IkReal x3354=((4.0)*gconst202);
IkReal x3355=(gconst196*gconst199);
IkReal x3356=(gconst196*gconst203);
IkReal x3357=(gconst195*gconst204);
IkReal x3358=((16.0)*gconst193);
IkReal x3359=((4.0)*gconst195);
IkReal x3360=((8.0)*gconst193);
IkReal x3361=((16.0)*gconst201);
IkReal x3362=((4.0)*gconst194);
IkReal x3363=((4.0)*gconst203);
IkReal x3364=(gconst199*gconst204);
IkReal x3365=(gconst202*x3344);
IkReal x3366=(gconst194*x3344);
IkReal x3367=(gconst191*x3354);
IkReal x3368=(gconst194*x3346);
IkReal x3369=(gconst204*x3351);
IkReal x3370=(gconst202*x3360);
IkReal x3371=((8.0)*x3355);
IkReal x3372=(gconst191*x3362);
IkReal x3373=(gconst190*x3356);
IkReal x3374=(x3324+x3365);
IkReal x3375=(x3372+x3325);
IkReal x3376=(x3366+x3367);
IkReal x3377=(x3371+x3370+x3368+x3369);
op[0]=(((x3330*x3335))+(((-1.0)*x3365))+((x3332*x3341))+(((-1.0)*x3332*x3335))+(((-1.0)*x3330*x3341)));
op[1]=0;
op[2]=((((-1.0)*x3323))+(((-1.0)*x3330*x3356))+((x3340*x3341))+x3374+(((-1.0)*gconst200*x3333*x3352))+(((-1.0)*gconst203*x3344))+(((-1.0)*gconst195*x3330*x3352))+((x3330*x3338))+((x3330*x3345))+(((-1.0)*gconst198*x3363))+(((-1.0)*x3376))+(((-1.0)*x3336*x3341))+((x3341*x3343))+(((-1.0)*x3332*x3338))+((x3332*x3356))+((x3332*x3357))+(((-1.0)*gconst204*x3361))+(((-1.0)*x3332*x3345))+(((-1.0)*gconst198*x3354))+(((-1.0)*x3335*x3343))+(((-1.0)*x3335*x3340))+((x3335*x3336))+((x3335*x3337)));
op[3]=((((-8.0)*x3364))+((x3332*x3339))+((x3332*x3334))+((x3340*x3342))+((x3340*x3348))+(((-1.0)*x3348*x3355))+(((-1.0)*x3334*x3364))+((x3343*x3348))+(((-1.0)*x3330*x3339))+(((-1.0)*x3330*x3334))+(((-1.0)*x3337*x3342))+(((-2.0)*gconst204*x3333))+((x3342*x3343))+x3377+(((-1.0)*x3341*x3347))+(((-1.0)*gconst198*gconst204*x3334))+(((32.0)*gconst204))+(((-1.0)*gconst202*x3346))+((gconst199*gconst205*x3339))+(((-2.0)*gconst200*x3333))+((gconst198*gconst205*x3339))+((x3338*x3353))+((x3338*x3350))+(((-1.0)*gconst196*gconst198*x3348))+(((-32.0)*gconst201))+((x3335*x3349))+((x3335*x3347))+(((-1.0)*x3336*x3342))+(((-1.0)*x3336*x3348)));
op[4]=((64.0)+((x3343*x3357))+((x3343*x3356))+((x3340*x3357))+((x3340*x3356))+((x3327*x3332))+(((-1.0)*x3331*x3335))+x3376+x3323+x3326+(((-1.0)*x3343*x3345))+((x3331*x3341))+((x3329*x3330))+(((-1.0)*gconst198*x3362))+(((-1.0)*x3375))+(((-1.0)*x3374))+((x3328*x3335))+(((-1.0)*gconst204*x3358))+(((-1.0)*gconst195*x3337*x3352))+(((-1.0)*x3340*x3345))+(((-1.0)*gconst195*x3336*x3352))+(((-1.0)*gconst196*gconst200*x3333))+(((-1.0)*x3338*x3340))+(((-1.0)*x3338*x3343))+(((-1.0)*x3336*x3356))+(((-1.0)*gconst190*x3363))+(((-1.0)*x3329*x3332))+(((-1.0)*x3328*x3341))+((x3337*x3338))+(((-1.0)*x3327*x3330))+(((-4.0)*x3333))+((x3336*x3345))+(((-1.0)*gconst198*x3359))+(((-1.0)*gconst195*x3344))+((x3337*x3345))+(((-1.0)*gconst196*x3361))+((x3336*x3338))+(((-1.0)*gconst190*x3354)));
op[5]=(((x3334*x3340))+((x3334*x3343))+(((-1.0)*x3327*x3350))+(((-1.0)*x3327*x3353))+((x3329*x3353))+((x3329*x3350))+((gconst190*gconst205*x3339))+(((32.0)*gconst196))+((gconst194*x3360))+((x3331*x3348))+((x3331*x3342))+((x3338*x3347))+((x3338*x3349))+(((-1.0)*x3347*x3356))+(((-1.0)*x3377))+(((-32.0)*gconst193))+(((-1.0)*gconst190*gconst204*x3334))+(((-1.0)*x3337*x3339))+(((-1.0)*x3334*x3337))+(((-1.0)*x3334*x3336))+((gconst191*gconst205*x3339))+(((-1.0)*x3336*x3339))+(((-1.0)*x3328*x3348))+(((-1.0)*x3328*x3342))+((gconst196*x3351))+((x3339*x3340))+((x3339*x3343))+(((-1.0)*gconst191*gconst204*x3334))+(((-2.0)*gconst196*x3333)));
op[6]=((((-1.0)*x3326))+(((-1.0)*x3331*x3345))+(((-1.0)*x3328*x3356))+(((-1.0)*gconst191*x3359))+(((-1.0)*gconst196*x3358))+(((-1.0)*x3331*x3338))+x3375+((x3328*x3345))+((x3329*x3336))+((x3329*x3337))+((x3327*x3340))+((x3327*x3343))+(((-1.0)*x3376))+((x3328*x3338))+(((-1.0)*gconst195*x3328*x3352))+(((-1.0)*gconst190*x3362))+(((-1.0)*x3327*x3337))+(((-1.0)*x3327*x3336))+((x3331*x3357))+((x3331*x3356))+(((-1.0)*x3329*x3340))+(((-1.0)*x3329*x3343))+(((-1.0)*gconst190*x3359)));
op[7]=0;
op[8]=(((x3328*x3329))+((x3327*x3331))+(((-1.0)*x3372))+(((-1.0)*x3329*x3331))+(((-1.0)*x3327*x3328)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3378=(gconst188*r20);
IkReal x3379=((1.0)*cj1);
IkReal x3380=(gconst189*r21);
IkReal x3381=((1.0)*cj4*r22);
IkReal x3382=(gconst189*r20*sj4);
IkReal x3383=(gconst188*r21*sj4);
if( IKabs((((sj1*x3380))+(((-1.0)*cj4*r22*x3379))+((sj1*x3378))+(((-1.0)*x3379*x3383))+((cj1*x3382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x3382))+(((-1.0)*sj1*x3383))+(((-1.0)*sj1*x3381))+(((-1.0)*x3379*x3380))+(((-1.0)*x3378*x3379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3380))+(((-1.0)*cj4*r22*x3379))+((sj1*x3378))+(((-1.0)*x3379*x3383))+((cj1*x3382))))+IKsqr((((sj1*x3382))+(((-1.0)*sj1*x3383))+(((-1.0)*sj1*x3381))+(((-1.0)*x3379*x3380))+(((-1.0)*x3378*x3379))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3380))+(((-1.0)*cj4*r22*x3379))+((sj1*x3378))+(((-1.0)*x3379*x3383))+((cj1*x3382))), (((sj1*x3382))+(((-1.0)*sj1*x3383))+(((-1.0)*sj1*x3381))+(((-1.0)*x3379*x3380))+(((-1.0)*x3378*x3379))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3384=IKcos(j2);
IkReal x3385=IKsin(j2);
IkReal x3386=((0.08)*cj0);
IkReal x3387=(gconst189*r00);
IkReal x3388=(cj0*r01);
IkReal x3389=(r11*sj0);
IkReal x3390=((1.0)*cj0);
IkReal x3391=((1.0)*gconst189);
IkReal x3392=(r10*sj0);
IkReal x3393=((1.0)*sj0);
IkReal x3394=(cj1*x3384);
IkReal x3395=(cj1*x3385);
IkReal x3396=((1.0)*gconst188*sj4);
IkReal x3397=(sj1*x3384);
IkReal x3398=(sj1*x3385);
IkReal x3399=((1.0)*x3398);
evalcond[0]=(x3394+((gconst188*r20))+(((-1.0)*x3399))+((gconst189*r21)));
evalcond[1]=((((-1.0)*r20*sj4*x3391))+((cj4*r22))+x3395+x3397+((gconst188*r21*sj4)));
evalcond[2]=((((-1.0)*gconst188*r00*x3390))+(((-1.0)*x3397))+(((-1.0)*x3395))+(((-1.0)*x3389*x3391))+(((-1.0)*x3388*x3391))+(((-1.0)*gconst188*x3392)));
CheckValue<IkReal> x3400=IKPowWithIntegerCheck(cj4,-1);
if(!x3400.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x3397))+(((0.47)*x3395))+(((-0.11)*x3394))+pz+(((-0.08)*r22*sj4*(x3400.value)))+(((0.11)*x3398)));
evalcond[4]=(x3394+(((-1.0)*cj4*r12*x3393))+(((-1.0)*x3389*x3396))+((cj0*sj4*x3387))+((gconst189*sj4*x3392))+(((-1.0)*x3399))+(((-1.0)*x3388*x3396))+(((-1.0)*cj4*r02*x3390)));
evalcond[5]=(((gconst188*r01*x3386))+(((-1.0)*py*x3393))+(((-0.08)*gconst189*x3392))+(((0.47)*x3394))+(((-0.47)*x3398))+(((-1.0)*x3386*x3387))+(((-1.0)*px*x3390))+(((0.08)*gconst188*x3389))+(((0.11)*x3397))+(((0.11)*x3395))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3401=(gconst189*sj4);
IkReal x3402=((1.0)*cj4);
IkReal x3403=((1.0)*gconst188*sj4);
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3402))+(((-1.0)*r11*x3403))+((r10*x3401)))),IkReal(((((-1.0)*r01*x3403))+(((-1.0)*r02*x3402))+((r00*x3401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(IKsign((((gconst188*r20))+((gconst189*r21)))),-1);
if(!x3405.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3404.value)+(((1.5707963267949)*(x3405.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3406=IKsin(j0);
IkReal x3407=IKcos(j0);
IkReal x3408=((1.0)*sj4);
IkReal x3409=(gconst188*r01);
IkReal x3410=(gconst189*r00);
IkReal x3411=((1.0)*gconst189);
IkReal x3412=((1.0)*cj4);
IkReal x3413=((0.08)*x3406);
IkReal x3414=(cj4*x3406);
IkReal x3415=(r10*x3407);
IkReal x3416=(r12*x3407);
IkReal x3417=(sj4*x3406);
IkReal x3418=(gconst188*r11*x3407);
evalcond[0]=((((-1.0)*gconst188*x3415))+(((-1.0)*r11*x3407*x3411))+((gconst189*r01*x3406))+((gconst188*r00*x3406)));
evalcond[1]=(((px*x3406))+(((0.08)*x3418))+(((-1.0)*py*x3407))+(((-1.0)*x3409*x3413))+(((-0.08)*gconst189*x3415))+((x3410*x3413)));
evalcond[2]=(((x3409*x3417))+(((-1.0)*x3412*x3416))+((r02*x3414))+((gconst189*sj4*x3415))+(((-1.0)*x3408*x3418))+(((-1.0)*x3406*x3408*x3410)));
evalcond[3]=((-1.0)+((r02*x3417))+(((-1.0)*x3408*x3416))+((x3410*x3414))+(((-1.0)*x3406*x3409*x3412))+(((-1.0)*cj4*x3411*x3415))+((cj4*x3418)));
evalcond[4]=((((-1.0)*r02*x3407*x3408))+(((-1.0)*r10*x3411*x3414))+(((-1.0)*r12*x3406*x3408))+((cj4*x3407*x3409))+((gconst188*r11*x3414))+(((-1.0)*x3407*x3410*x3412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3419=(gconst188*r20);
IkReal x3420=(gconst189*r21);
CheckValue<IkReal> x3427 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3427.valid){
continue;
}
IkReal x3421=((1.0)*(x3427.value));
IkReal x3422=(x3419+x3420);
IkReal x3423=((1.0)+x3422);
IkReal x3424=((-1.0)+x3422);
IkReal x3425=x3135;
IkReal x3426=(((cj4*r22))+((gconst188*r21*sj4))+(((-1.0)*gconst189*r20*sj4)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst188;
cj5=gconst189;
j5=((3.14159265)+(((-1.0)*x3421)));
IkReal gconst187=((3.14159265358979)+(((-1.0)*x3421)));
IkReal gconst188=((1.0)*r21*x3425);
IkReal gconst189=((-1.0)*r20*x3425);
IkReal gconst190=x3423;
IkReal gconst191=x3424;
IkReal gconst192=x3426;
IkReal gconst193=x3426;
IkReal gconst194=x3423;
IkReal gconst195=x3424;
IkReal gconst196=x3426;
IkReal gconst197=x3426;
IkReal gconst198=x3424;
IkReal gconst199=x3423;
IkReal gconst200=x3426;
IkReal gconst201=x3426;
IkReal gconst202=x3424;
IkReal gconst203=x3423;
IkReal gconst204=x3426;
IkReal gconst205=x3426;
IkReal x3428=gconst189*gconst189;
IkReal x3429=r20*r20;
IkReal x3430=sj4*sj4;
IkReal x3431=gconst188*gconst188;
IkReal x3432=r21*r21;
IkReal x3433=cj4*cj4;
IkReal x3434=r22*r22;
IkReal x3435=(gconst189*r20);
IkReal x3436=(gconst188*r21);
IkReal x3437=((8.0)*x3436);
IkReal x3438=((24.0)*x3429);
IkReal x3439=(cj4*r22*sj4);
IkReal x3440=((4.0)*x3432);
IkReal x3441=((16.0)*x3432);
IkReal x3442=((24.0)*x3432);
IkReal x3443=(x3428*x3430);
IkReal x3444=(x3429*x3431);
IkReal x3445=(x3430*x3431);
IkReal x3446=(x3433*x3434);
j1eval[0]=((((0.5)*(IKabs(((24.0)+(((-1.0)*x3438*x3443))+(((-1.0)*x3431*x3438))+(((-1.0)*x3428*x3442))+(((-48.0)*x3435*x3436))+(((48.0)*x3435*x3439))+(((-1.0)*x3442*x3445))+(((-24.0)*x3446))+(((-48.0)*x3436*x3439))+(((48.0)*x3430*x3435*x3436)))))))+(IKabs(((16.0)+(((-1.0)*x3428*x3441))+(((-1.0)*x3441*x3445))+(((-16.0)*x3429*x3443))+(((-32.0)*x3435*x3436))+(((32.0)*x3430*x3435*x3436))+(((-32.0)*x3436*x3439))+(((-16.0)*x3446))+(((-16.0)*x3444))+(((32.0)*x3435*x3439)))))+(((0.5)*(IKabs(((4.0)+(((-4.0)*x3444))+(((-4.0)*x3446))+(((-1.0)*x3437*x3439))+(((8.0)*x3435*x3439))+(((-1.0)*x3428*x3440))+((x3430*x3435*x3437))+(((-1.0)*x3435*x3437))+(((-4.0)*x3429*x3443))+(((-1.0)*x3440*x3445))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x3447=((16.0)*gconst202);
IkReal x3448=((16.0)*gconst199);
IkReal x3449=((16.0)*gconst194);
IkReal x3450=((16.0)*gconst191);
IkReal x3451=(gconst195*gconst196);
IkReal x3452=(gconst191*gconst192);
IkReal x3453=(gconst194*gconst197);
IkReal x3454=(gconst199*gconst200);
IkReal x3455=(gconst190*gconst193);
IkReal x3456=(gconst198*gconst201);
IkReal x3457=(gconst191*gconst203);
IkReal x3458=((2.0)*gconst195);
IkReal x3459=(gconst202*gconst205);
IkReal x3460=(gconst192*gconst199);
IkReal x3461=(gconst191*gconst200);
IkReal x3462=(gconst197*gconst202);
IkReal x3463=((2.0)*gconst194);
IkReal x3464=(gconst190*gconst201);
IkReal x3465=(gconst203*gconst204);
IkReal x3466=((2.0)*gconst202);
IkReal x3467=(gconst193*gconst198);
IkReal x3468=((4.0)*gconst199);
IkReal x3469=(gconst194*gconst205);
IkReal x3470=((8.0)*gconst201);
IkReal x3471=((2.0)*gconst190);
IkReal x3472=((2.0)*gconst203);
IkReal x3473=((2.0)*gconst191);
IkReal x3474=((2.0)*gconst198);
IkReal x3475=((8.0)*gconst191);
IkReal x3476=((1.0)*gconst204);
IkReal x3477=((2.0)*gconst199);
IkReal x3478=((4.0)*gconst202);
IkReal x3479=(gconst196*gconst199);
IkReal x3480=(gconst196*gconst203);
IkReal x3481=(gconst195*gconst204);
IkReal x3482=((16.0)*gconst193);
IkReal x3483=((4.0)*gconst195);
IkReal x3484=((8.0)*gconst193);
IkReal x3485=((16.0)*gconst201);
IkReal x3486=((4.0)*gconst194);
IkReal x3487=((4.0)*gconst203);
IkReal x3488=(gconst199*gconst204);
IkReal x3489=(gconst202*x3468);
IkReal x3490=(gconst194*x3468);
IkReal x3491=(gconst191*x3478);
IkReal x3492=(gconst194*x3470);
IkReal x3493=(gconst204*x3475);
IkReal x3494=(gconst202*x3484);
IkReal x3495=((8.0)*x3479);
IkReal x3496=(gconst191*x3486);
IkReal x3497=(gconst190*x3480);
IkReal x3498=(x3448+x3489);
IkReal x3499=(x3449+x3496);
IkReal x3500=(x3490+x3491);
IkReal x3501=(x3494+x3495+x3492+x3493);
op[0]=((((-1.0)*x3454*x3465))+((x3456*x3465))+((x3454*x3459))+(((-1.0)*x3489))+(((-1.0)*x3456*x3459)));
op[1]=0;
op[2]=(((x3464*x3465))+(((-1.0)*x3456*x3462))+(((-1.0)*x3456*x3469))+(((-1.0)*gconst198*x3478))+(((-1.0)*x3459*x3464))+(((-1.0)*x3459*x3467))+(((-1.0)*gconst195*x3454*x3476))+(((-1.0)*gconst198*x3487))+(((-1.0)*x3500))+(((-1.0)*gconst200*x3457*x3476))+x3498+((x3456*x3480))+((x3456*x3481))+((x3465*x3467))+(((-1.0)*gconst204*x3485))+((x3454*x3469))+((x3454*x3462))+(((-1.0)*x3460*x3465))+((x3459*x3461))+((x3459*x3460))+(((-1.0)*gconst203*x3468))+(((-1.0)*x3454*x3480))+(((-1.0)*x3447)));
op[3]=(((x3464*x3466))+((x3464*x3472))+(((-1.0)*x3465*x3471))+((x3462*x3477))+((x3462*x3474))+(((-2.0)*gconst200*x3457))+(((-1.0)*gconst196*gconst198*x3472))+(((-1.0)*x3460*x3472))+(((-1.0)*x3472*x3479))+((x3467*x3472))+(((-1.0)*x3460*x3466))+(((32.0)*gconst204))+(((-1.0)*x3458*x3488))+x3501+((gconst198*gconst205*x3463))+(((-1.0)*x3461*x3466))+(((-1.0)*x3454*x3458))+((gconst199*gconst205*x3463))+((x3456*x3463))+((x3466*x3467))+(((-32.0)*gconst201))+(((-1.0)*gconst198*gconst204*x3458))+(((-8.0)*x3488))+((x3459*x3473))+((x3459*x3471))+(((-1.0)*x3454*x3463))+(((-1.0)*gconst202*x3470))+(((-2.0)*gconst204*x3457))+((x3456*x3458)));
op[4]=((64.0)+((x3455*x3465))+(((-1.0)*gconst195*x3460*x3476))+(((-1.0)*x3452*x3465))+((x3460*x3462))+((x3460*x3469))+(((-1.0)*gconst195*x3461*x3476))+(((-4.0)*x3457))+(((-1.0)*x3455*x3459))+((x3464*x3481))+((x3464*x3480))+((x3453*x3454))+((x3461*x3469))+((x3461*x3462))+(((-1.0)*x3467*x3469))+(((-1.0)*x3499))+(((-1.0)*x3498))+(((-1.0)*x3462*x3464))+(((-1.0)*x3462*x3467))+(((-1.0)*gconst196*gconst200*x3457))+(((-1.0)*gconst198*x3483))+(((-1.0)*gconst198*x3486))+x3500+((x3467*x3480))+((x3467*x3481))+x3450+x3447+(((-1.0)*x3464*x3469))+(((-1.0)*gconst195*x3468))+(((-1.0)*gconst190*x3478))+(((-1.0)*gconst204*x3482))+(((-1.0)*gconst190*x3487))+(((-1.0)*x3460*x3480))+(((-1.0)*gconst196*x3485))+(((-1.0)*x3453*x3456))+((x3452*x3459))+(((-1.0)*x3451*x3454))+((x3451*x3456)));
op[5]=(((x3455*x3466))+((x3455*x3472))+(((-1.0)*gconst191*gconst204*x3458))+((x3462*x3471))+((x3462*x3473))+(((32.0)*gconst196))+((x3463*x3467))+((x3463*x3464))+(((-1.0)*x3471*x3480))+(((-1.0)*x3458*x3460))+(((-1.0)*x3458*x3461))+(((-1.0)*x3460*x3463))+(((-1.0)*x3501))+(((-1.0)*x3461*x3463))+((gconst196*x3475))+(((-1.0)*x3452*x3472))+(((-32.0)*gconst193))+(((-1.0)*x3452*x3466))+((gconst190*gconst205*x3463))+((x3453*x3474))+((x3453*x3477))+(((-1.0)*gconst190*gconst204*x3458))+((gconst194*x3484))+(((-2.0)*gconst196*x3457))+(((-1.0)*x3451*x3474))+(((-1.0)*x3451*x3477))+((x3458*x3464))+((x3458*x3467))+((gconst191*gconst205*x3463)));
op[6]=((((-1.0)*x3450))+((x3455*x3480))+((x3455*x3481))+(((-1.0)*x3451*x3460))+(((-1.0)*x3451*x3461))+(((-1.0)*x3500))+((x3452*x3469))+((x3452*x3462))+x3499+(((-1.0)*x3455*x3469))+(((-1.0)*x3455*x3462))+((x3451*x3467))+((x3451*x3464))+((x3453*x3461))+((x3453*x3460))+(((-1.0)*gconst190*x3486))+(((-1.0)*gconst190*x3483))+(((-1.0)*x3453*x3467))+(((-1.0)*x3453*x3464))+(((-1.0)*gconst196*x3482))+(((-1.0)*gconst191*x3483))+(((-1.0)*gconst195*x3452*x3476))+(((-1.0)*x3452*x3480)));
op[7]=0;
op[8]=((((-1.0)*x3496))+(((-1.0)*x3453*x3455))+((x3452*x3453))+(((-1.0)*x3451*x3452))+((x3451*x3455)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3502=(gconst188*r20);
IkReal x3503=((1.0)*cj1);
IkReal x3504=(gconst189*r21);
IkReal x3505=((1.0)*cj4*r22);
IkReal x3506=(gconst189*r20*sj4);
IkReal x3507=(gconst188*r21*sj4);
if( IKabs((((cj1*x3506))+((sj1*x3504))+((sj1*x3502))+(((-1.0)*cj4*r22*x3503))+(((-1.0)*x3503*x3507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x3507))+(((-1.0)*x3502*x3503))+(((-1.0)*sj1*x3505))+((sj1*x3506))+(((-1.0)*x3503*x3504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3506))+((sj1*x3504))+((sj1*x3502))+(((-1.0)*cj4*r22*x3503))+(((-1.0)*x3503*x3507))))+IKsqr(((((-1.0)*sj1*x3507))+(((-1.0)*x3502*x3503))+(((-1.0)*sj1*x3505))+((sj1*x3506))+(((-1.0)*x3503*x3504))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3506))+((sj1*x3504))+((sj1*x3502))+(((-1.0)*cj4*r22*x3503))+(((-1.0)*x3503*x3507))), ((((-1.0)*sj1*x3507))+(((-1.0)*x3502*x3503))+(((-1.0)*sj1*x3505))+((sj1*x3506))+(((-1.0)*x3503*x3504))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3508=IKcos(j2);
IkReal x3509=IKsin(j2);
IkReal x3510=((0.08)*cj0);
IkReal x3511=(gconst189*r00);
IkReal x3512=(cj0*r01);
IkReal x3513=(r11*sj0);
IkReal x3514=((1.0)*cj0);
IkReal x3515=((1.0)*gconst189);
IkReal x3516=(r10*sj0);
IkReal x3517=((1.0)*sj0);
IkReal x3518=(cj1*x3508);
IkReal x3519=(cj1*x3509);
IkReal x3520=((1.0)*gconst188*sj4);
IkReal x3521=(sj1*x3508);
IkReal x3522=(sj1*x3509);
IkReal x3523=((1.0)*x3522);
evalcond[0]=((((-1.0)*x3523))+x3518+((gconst188*r20))+((gconst189*r21)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*sj4*x3515))+x3519+x3521+((gconst188*r21*sj4)));
evalcond[2]=((((-1.0)*x3521))+(((-1.0)*x3512*x3515))+(((-1.0)*x3513*x3515))+(((-1.0)*gconst188*x3516))+(((-1.0)*gconst188*r00*x3514))+(((-1.0)*x3519)));
CheckValue<IkReal> x3524=IKPowWithIntegerCheck(cj4,-1);
if(!x3524.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x3519))+(((0.47)*x3521))+(((0.11)*x3522))+pz+(((-0.08)*r22*sj4*(x3524.value)))+(((-0.11)*x3518)));
evalcond[4]=((((-1.0)*x3512*x3520))+(((-1.0)*x3513*x3520))+((gconst189*sj4*x3516))+(((-1.0)*x3523))+(((-1.0)*cj4*r02*x3514))+((cj0*sj4*x3511))+x3518+(((-1.0)*cj4*r12*x3517)));
evalcond[5]=(((gconst188*r01*x3510))+(((-0.08)*gconst189*x3516))+(((-1.0)*x3510*x3511))+(((0.47)*x3518))+(((-1.0)*px*x3514))+(((-0.47)*x3522))+(((0.11)*x3521))+(((0.08)*gconst188*x3513))+(((-1.0)*py*x3517))+(((0.11)*x3519))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3525=((0.08)*sj5);
IkReal x3526=((0.08)*cj5);
CheckValue<IkReal> x3527 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3526))+((r11*x3525))+(((-1.0)*py)))),IkReal((((r01*x3525))+(((-1.0)*px))+(((-1.0)*r00*x3526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3527.valid){
continue;
}
CheckValue<IkReal> x3528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x3525))+(((-1.0)*r21*sj4*x3526))+(((-1.0)*cj4*cj5*rxp0_2))+((cj4*rxp1_2*sj5))+(((-1.0)*rxp2_2*sj4)))),-1);
if(!x3528.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3527.value)+(((1.5707963267949)*(x3528.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3529=IKsin(j0);
IkReal x3530=IKcos(j0);
IkReal x3531=(r11*sj5);
IkReal x3532=(cj5*r10);
IkReal x3533=(r02*sj4);
IkReal x3534=(r12*sj4);
IkReal x3535=(cj4*r00);
IkReal x3536=(cj4*r01);
IkReal x3537=(sj5*x3529);
IkReal x3538=((1.0)*x3530);
IkReal x3539=((0.08)*x3530);
IkReal x3540=(cj5*x3529);
IkReal x3541=((1.0)*x3529);
evalcond[0]=((((-1.0)*r10*sj5*x3538))+((r01*x3540))+(((-1.0)*cj5*r11*x3538))+((r00*x3537)));
evalcond[1]=(((x3531*x3539))+(((0.08)*r00*x3540))+(((-1.0)*py*x3538))+((px*x3529))+(((-1.0)*x3532*x3539))+(((-0.08)*r01*x3537)));
evalcond[2]=((((-1.0)*cj4*r12*x3538))+(((-1.0)*sj4*x3531*x3538))+((r01*sj4*x3537))+(((-1.0)*r00*sj4*x3540))+((sj4*x3530*x3532))+((cj4*r02*x3529)));
evalcond[3]=((-1.0)+(((-1.0)*x3536*x3537))+((cj4*x3530*x3531))+((x3535*x3540))+((x3529*x3533))+(((-1.0)*x3534*x3538))+(((-1.0)*cj4*x3532*x3538)));
evalcond[4]=(((sj5*x3530*x3536))+((cj4*x3529*x3531))+(((-1.0)*cj5*x3535*x3538))+(((-1.0)*x3534*x3541))+(((-1.0)*x3533*x3538))+(((-1.0)*cj4*x3532*x3541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3542=((1500.0)*pz);
CheckValue<IkReal> x3567=IKPowWithIntegerCheck(cj4,-1);
if(!x3567.valid){
continue;
}
IkReal x3543=x3567.value;
IkReal x3544=((0.96)*cj0);
IkReal x3545=(r01*sj5);
IkReal x3546=(r20*sj5);
IkReal x3547=(cj0*px);
IkReal x3548=(cj5*r21);
IkReal x3549=((705.0)*sj4);
IkReal x3550=(r21*sj5);
IkReal x3551=(py*sj0);
IkReal x3552=(cj5*r20);
IkReal x3553=(cj4*r22);
IkReal x3554=(cj5*r00);
IkReal x3555=((0.32)*cj0);
IkReal x3556=((235.0)*sj4);
IkReal x3557=((1.32)*sj4);
IkReal x3558=((0.44)*sj4);
IkReal x3559=((165.0)*x3546);
IkReal x3560=((165.0)*x3548);
IkReal x3561=(cj5*r10*sj0);
IkReal x3562=(r22*sj4*x3543);
IkReal x3563=(r11*sj0*sj5);
IkReal x3564=(x3549*x3552);
IkReal x3565=((((120.0)*x3562))+(((705.0)*x3553))+((x3549*x3550)));
IkReal x3566=(x3542+x3559+x3560+x3564);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((222.0)+x3566+(((-1.0)*x3565)))))))+(((0.008)*(IKabs(((-222.0)+x3566+(((-1.0)*x3565)))))))+(IKabs(((((-4.0)*x3547))+(((-1.88)*x3546))+(((-1.88)*x3548))+(((-1.0)*x3554*x3555))+(((0.32)*x3563))+((x3552*x3558))+(((-0.32)*x3561))+(((-1.0)*x3550*x3558))+((x3545*x3555))+(((-4.0)*x3551))+(((-0.44)*x3553)))))+(((0.008)*(IKabs(((222.0)+(((55.0)*x3546))+(((55.0)*x3548))+(((500.0)*pz))+(((-235.0)*x3553))+((x3552*x3556))+(((-40.0)*x3562))+(((-1.0)*x3550*x3556)))))))+(((2.0)*(IKabs(((((0.96)*x3563))+(((-5.64)*x3548))+(((-5.64)*x3546))+(((-12.0)*x3551))+(((-12.0)*x3547))+((x3552*x3557))+(((-1.32)*x3553))+(((-1.0)*x3550*x3557))+((x3544*x3545))+(((-1.0)*x3544*x3554))+(((-0.96)*x3561))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3597=IKPowWithIntegerCheck(cj4,-1);
if(!x3597.valid){
continue;
}
IkReal x3568=x3597.value;
IkReal x3569=((222.0)*cj4);
IkReal x3570=cj4*cj4;
IkReal x3571=(cj4*r21);
IkReal x3572=((705.0)*sj4);
IkReal x3573=(r22*sj4);
IkReal x3574=(cj4*r20);
IkReal x3575=((0.008)*x3568);
IkReal x3576=((235.0)*sj4);
IkReal x3577=(cj4*pz);
IkReal x3578=((1500.0)*x3577);
IkReal x3579=((120.0)*x3573);
IkReal x3580=((500.0)*x3577);
IkReal x3581=((40.0)*x3573);
IkReal x3582=(r22*x3570);
IkReal x3583=((165.0)*sj5*x3574);
IkReal x3584=((165.0)*cj5*x3571);
IkReal x3585=((705.0)*x3582);
IkReal x3586=((55.0)*sj5*x3574);
IkReal x3587=((55.0)*cj5*x3571);
IkReal x3588=((235.0)*x3582);
IkReal x3589=(cj5*x3572*x3574);
IkReal x3590=(sj5*x3571*x3572);
IkReal x3591=(cj5*x3574*x3576);
IkReal x3592=(sj5*x3571*x3576);
IkReal x3593=(x3579+x3585+x3590);
IkReal x3594=(x3581+x3588+x3592);
IkReal x3595=(x3578+x3583+x3584+x3589);
IkReal x3596=(x3580+x3586+x3587+x3591);
op[0]=(x3575*((x3569+x3596+(((-1.0)*x3594)))));
op[1]=0;
op[2]=(x3575*((x3569+x3595+(((-1.0)*x3593)))));
op[3]=0;
op[4]=(x3575*((x3595+(((-1.0)*x3569))+(((-1.0)*x3593)))));
op[5]=0;
op[6]=(x3575*((x3596+(((-1.0)*x3569))+(((-1.0)*x3594)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3598=((0.32)*cj5);
IkReal x3599=(cj0*r00);
IkReal x3600=(cj0*px);
IkReal x3601=(cj5*r21);
IkReal x3602=(r10*sj0);
IkReal x3603=((0.96)*cj5);
IkReal x3604=(py*sj0);
IkReal x3605=(r20*sj5);
IkReal x3606=(cj4*r22);
IkReal x3607=(cj0*r01*sj5);
IkReal x3608=(r21*sj4*sj5);
IkReal x3609=(cj5*r20*sj4);
IkReal x3610=(r11*sj0*sj5);
IkReal x3611=((0.44)*x3609);
IkReal x3612=((0.32)*x3607);
IkReal x3613=((0.32)*x3610);
IkReal x3614=(x3611+x3612+x3613);
IkReal x3615=(((x3598*x3599))+(((4.0)*x3604))+(((4.0)*x3600))+((x3598*x3602))+(((1.88)*x3601))+(((1.88)*x3605))+(((0.44)*x3608))+(((0.44)*x3606)));
IkReal x3616=((((-12.0)*x3604))+(((-12.0)*x3600))+(((-1.0)*x3602*x3603))+(((0.96)*x3607))+(((-1.32)*x3608))+(((-1.32)*x3606))+(((0.96)*x3610))+(((1.32)*x3609))+(((-5.64)*x3605))+(((-5.64)*x3601))+(((-1.0)*x3599*x3603)));
j1evalpoly[0]=((((3.552)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x3614+(((-1.0)*x3615))))))+(((7.104)*(htj1*htj1*htj1)))+x3614+(((3.552)*htj1))+(((-1.0)*x3615))+((x3616*(htj1*htj1*htj1*htj1)))+((x3616*(htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3617=((1.0)*cj1);
IkReal x3618=(cj4*r22);
IkReal x3619=(cj5*r21);
IkReal x3620=((1.0)*sj1);
IkReal x3621=(r20*sj5);
IkReal x3622=(cj5*r20*sj4);
IkReal x3623=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x3617*x3618))+((sj1*x3621))+(((-1.0)*x3617*x3623))+((sj1*x3619))+((cj1*x3622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3617*x3619))+((sj1*x3622))+(((-1.0)*x3618*x3620))+(((-1.0)*x3617*x3621))+(((-1.0)*x3620*x3623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3617*x3618))+((sj1*x3621))+(((-1.0)*x3617*x3623))+((sj1*x3619))+((cj1*x3622))))+IKsqr(((((-1.0)*x3617*x3619))+((sj1*x3622))+(((-1.0)*x3618*x3620))+(((-1.0)*x3617*x3621))+(((-1.0)*x3620*x3623))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3617*x3618))+((sj1*x3621))+(((-1.0)*x3617*x3623))+((sj1*x3619))+((cj1*x3622))), ((((-1.0)*x3617*x3619))+((sj1*x3622))+(((-1.0)*x3618*x3620))+(((-1.0)*x3617*x3621))+(((-1.0)*x3620*x3623))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3624=IKcos(j2);
IkReal x3625=IKsin(j2);
IkReal x3626=(cj5*sj4);
IkReal x3627=((1.0)*cj0);
IkReal x3628=(cj0*r00);
IkReal x3629=((0.08)*cj5);
IkReal x3630=(r10*sj0);
IkReal x3631=(r01*sj5);
IkReal x3632=((1.0)*sj0);
IkReal x3633=(cj1*x3624);
IkReal x3634=(sj5*x3632);
IkReal x3635=(cj1*x3625);
IkReal x3636=(sj1*x3624);
IkReal x3637=(sj1*x3625);
IkReal x3638=((1.0)*x3637);
evalcond[0]=(((cj5*r21))+(((-1.0)*x3638))+x3633+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+x3636+x3635+(((-1.0)*r20*x3626)));
evalcond[2]=((((-1.0)*cj5*r11*x3632))+(((-1.0)*cj5*r01*x3627))+(((-1.0)*r00*sj5*x3627))+(((-1.0)*x3635))+(((-1.0)*x3636))+(((-1.0)*sj5*x3630)));
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(cj4,-1);
if(!x3639.valid){
continue;
}
evalcond[3]=((((-0.11)*x3633))+(((-0.444)*cj1))+(((0.11)*x3637))+pz+(((-0.08)*r22*sj4*(x3639.value)))+(((0.47)*x3636))+(((0.47)*x3635)));
evalcond[4]=(((x3626*x3628))+(((-1.0)*cj4*r02*x3627))+(((-1.0)*sj4*x3627*x3631))+(((-1.0)*cj4*r12*x3632))+(((-1.0)*x3638))+(((-1.0)*r11*sj4*x3634))+x3633+((x3626*x3630)));
evalcond[5]=((((-1.0)*py*x3632))+(((-0.47)*x3637))+(((-1.0)*px*x3627))+(((0.08)*r11*sj0*sj5))+(((-1.0)*x3628*x3629))+(((0.11)*x3636))+(((0.11)*x3635))+(((0.08)*cj0*x3631))+(((0.47)*x3633))+(((0.444)*sj1))+(((-1.0)*x3629*x3630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3640=(cj5*sj4);
IkReal x3641=((1.0)*cj4);
IkReal x3642=((1.0)*sj4*sj5);
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3643.valid){
continue;
}
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3641))+(((-1.0)*r11*x3642))+((r10*x3640)))),IkReal((((r00*x3640))+(((-1.0)*r01*x3642))+(((-1.0)*r02*x3641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3643.value)))+(x3644.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3645=IKsin(j0);
IkReal x3646=IKcos(j0);
IkReal x3647=(r11*sj5);
IkReal x3648=(cj5*r10);
IkReal x3649=(r02*sj4);
IkReal x3650=(r12*sj4);
IkReal x3651=(cj4*r00);
IkReal x3652=(cj4*r01);
IkReal x3653=(sj5*x3645);
IkReal x3654=((1.0)*x3646);
IkReal x3655=((0.08)*x3646);
IkReal x3656=(cj5*x3645);
IkReal x3657=((1.0)*x3645);
evalcond[0]=(((r00*x3653))+(((-1.0)*r10*sj5*x3654))+(((-1.0)*cj5*r11*x3654))+((r01*x3656)));
evalcond[1]=((((-0.08)*r01*x3653))+((x3647*x3655))+(((-1.0)*py*x3654))+((px*x3645))+(((-1.0)*x3648*x3655))+(((0.08)*r00*x3656)));
evalcond[2]=(((r01*sj4*x3653))+((cj4*r02*x3645))+(((-1.0)*r00*sj4*x3656))+(((-1.0)*sj4*x3647*x3654))+(((-1.0)*cj4*r12*x3654))+((sj4*x3646*x3648)));
evalcond[3]=((-1.0)+((x3651*x3656))+((cj4*x3646*x3647))+(((-1.0)*x3650*x3654))+(((-1.0)*x3652*x3653))+(((-1.0)*cj4*x3648*x3654))+((x3645*x3649)));
evalcond[4]=(((cj4*x3645*x3647))+(((-1.0)*x3650*x3657))+(((-1.0)*x3649*x3654))+((sj5*x3646*x3652))+(((-1.0)*cj4*x3648*x3657))+(((-1.0)*cj5*x3651*x3654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3658=((1500.0)*pz);
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(cj4,-1);
if(!x3683.valid){
continue;
}
IkReal x3659=x3683.value;
IkReal x3660=((0.96)*cj0);
IkReal x3661=(r01*sj5);
IkReal x3662=(r20*sj5);
IkReal x3663=(cj0*px);
IkReal x3664=(cj5*r21);
IkReal x3665=((705.0)*sj4);
IkReal x3666=(r21*sj5);
IkReal x3667=(py*sj0);
IkReal x3668=(cj5*r20);
IkReal x3669=(cj4*r22);
IkReal x3670=(cj5*r00);
IkReal x3671=((0.32)*cj0);
IkReal x3672=((235.0)*sj4);
IkReal x3673=((1.32)*sj4);
IkReal x3674=((0.44)*sj4);
IkReal x3675=((165.0)*x3662);
IkReal x3676=((165.0)*x3664);
IkReal x3677=(cj5*r10*sj0);
IkReal x3678=(r22*sj4*x3659);
IkReal x3679=(r11*sj0*sj5);
IkReal x3680=(x3665*x3668);
IkReal x3681=((((705.0)*x3669))+(((120.0)*x3678))+((x3665*x3666)));
IkReal x3682=(x3680+x3658+x3676+x3675);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((-222.0)+(((-1.0)*x3681))+x3682)))))+(IKabs(((((-0.44)*x3669))+(((-1.0)*x3670*x3671))+((x3668*x3674))+((x3661*x3671))+(((-0.32)*x3677))+(((0.32)*x3679))+(((-1.0)*x3666*x3674))+(((-4.0)*x3667))+(((-4.0)*x3663))+(((-1.88)*x3662))+(((-1.88)*x3664)))))+(((0.008)*(IKabs(((222.0)+(((-40.0)*x3678))+(((500.0)*pz))+((x3668*x3672))+(((-1.0)*x3666*x3672))+(((-235.0)*x3669))+(((55.0)*x3662))+(((55.0)*x3664)))))))+(((0.008)*(IKabs(((222.0)+(((-1.0)*x3681))+x3682)))))+(((2.0)*(IKabs(((((-1.32)*x3669))+((x3668*x3673))+(((-1.0)*x3660*x3670))+(((-5.64)*x3662))+(((-5.64)*x3664))+(((-1.0)*x3666*x3673))+(((-0.96)*x3677))+(((-12.0)*x3667))+(((-12.0)*x3663))+((x3660*x3661))+(((0.96)*x3679))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3713=IKPowWithIntegerCheck(cj4,-1);
if(!x3713.valid){
continue;
}
IkReal x3684=x3713.value;
IkReal x3685=((222.0)*cj4);
IkReal x3686=cj4*cj4;
IkReal x3687=(cj4*r21);
IkReal x3688=((705.0)*sj4);
IkReal x3689=(r22*sj4);
IkReal x3690=(cj4*r20);
IkReal x3691=((0.008)*x3684);
IkReal x3692=((235.0)*sj4);
IkReal x3693=(cj4*pz);
IkReal x3694=((1500.0)*x3693);
IkReal x3695=((120.0)*x3689);
IkReal x3696=((500.0)*x3693);
IkReal x3697=((40.0)*x3689);
IkReal x3698=(r22*x3686);
IkReal x3699=((165.0)*sj5*x3690);
IkReal x3700=((165.0)*cj5*x3687);
IkReal x3701=((705.0)*x3698);
IkReal x3702=((55.0)*sj5*x3690);
IkReal x3703=((55.0)*cj5*x3687);
IkReal x3704=((235.0)*x3698);
IkReal x3705=(cj5*x3688*x3690);
IkReal x3706=(sj5*x3687*x3688);
IkReal x3707=(cj5*x3690*x3692);
IkReal x3708=(sj5*x3687*x3692);
IkReal x3709=(x3695+x3701+x3706);
IkReal x3710=(x3697+x3708+x3704);
IkReal x3711=(x3699+x3694+x3700+x3705);
IkReal x3712=(x3696+x3702+x3703+x3707);
op[0]=(x3691*(((((-1.0)*x3710))+x3685+x3712)));
op[1]=0;
op[2]=(x3691*(((((-1.0)*x3709))+x3685+x3711)));
op[3]=0;
op[4]=(x3691*(((((-1.0)*x3685))+(((-1.0)*x3709))+x3711)));
op[5]=0;
op[6]=(x3691*(((((-1.0)*x3685))+(((-1.0)*x3710))+x3712)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3714=((0.32)*cj5);
IkReal x3715=(cj0*r00);
IkReal x3716=(cj0*px);
IkReal x3717=(cj5*r21);
IkReal x3718=(r10*sj0);
IkReal x3719=((0.96)*cj5);
IkReal x3720=(py*sj0);
IkReal x3721=(r20*sj5);
IkReal x3722=(cj4*r22);
IkReal x3723=(cj0*r01*sj5);
IkReal x3724=(r21*sj4*sj5);
IkReal x3725=(cj5*r20*sj4);
IkReal x3726=(r11*sj0*sj5);
IkReal x3727=((0.44)*x3725);
IkReal x3728=((0.32)*x3723);
IkReal x3729=((0.32)*x3726);
IkReal x3730=(x3728+x3729+x3727);
IkReal x3731=((((1.88)*x3717))+((x3714*x3718))+((x3714*x3715))+(((1.88)*x3721))+(((4.0)*x3720))+(((0.44)*x3722))+(((0.44)*x3724))+(((4.0)*x3716)));
IkReal x3732=((((-1.32)*x3722))+(((-1.32)*x3724))+(((-12.0)*x3716))+(((0.96)*x3723))+(((0.96)*x3726))+(((-1.0)*x3715*x3719))+(((1.32)*x3725))+(((-12.0)*x3720))+(((-5.64)*x3721))+(((-5.64)*x3717))+(((-1.0)*x3718*x3719)));
j1evalpoly[0]=((((-1.0)*x3731))+((x3732*(htj1*htj1*htj1*htj1)))+(((3.552)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3731))+x3730))))+(((7.104)*(htj1*htj1*htj1)))+((x3732*(htj1*htj1)))+x3730+(((3.552)*htj1)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3733=((1.0)*cj1);
IkReal x3734=(cj4*r22);
IkReal x3735=(cj5*r21);
IkReal x3736=((1.0)*sj1);
IkReal x3737=(r20*sj5);
IkReal x3738=(cj5*r20*sj4);
IkReal x3739=(r21*sj4*sj5);
if( IKabs((((sj1*x3735))+((sj1*x3737))+(((-1.0)*x3733*x3739))+(((-1.0)*x3733*x3734))+((cj1*x3738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3736*x3739))+((sj1*x3738))+(((-1.0)*x3733*x3737))+(((-1.0)*x3733*x3735))+(((-1.0)*x3734*x3736)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3735))+((sj1*x3737))+(((-1.0)*x3733*x3739))+(((-1.0)*x3733*x3734))+((cj1*x3738))))+IKsqr(((((-1.0)*x3736*x3739))+((sj1*x3738))+(((-1.0)*x3733*x3737))+(((-1.0)*x3733*x3735))+(((-1.0)*x3734*x3736))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3735))+((sj1*x3737))+(((-1.0)*x3733*x3739))+(((-1.0)*x3733*x3734))+((cj1*x3738))), ((((-1.0)*x3736*x3739))+((sj1*x3738))+(((-1.0)*x3733*x3737))+(((-1.0)*x3733*x3735))+(((-1.0)*x3734*x3736))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3740=IKcos(j2);
IkReal x3741=IKsin(j2);
IkReal x3742=(cj5*sj4);
IkReal x3743=((1.0)*cj0);
IkReal x3744=(cj0*r00);
IkReal x3745=((0.08)*cj5);
IkReal x3746=(r10*sj0);
IkReal x3747=(r01*sj5);
IkReal x3748=((1.0)*sj0);
IkReal x3749=(cj1*x3740);
IkReal x3750=(sj5*x3748);
IkReal x3751=(cj1*x3741);
IkReal x3752=(sj1*x3740);
IkReal x3753=(sj1*x3741);
IkReal x3754=((1.0)*x3753);
evalcond[0]=(((cj5*r21))+(((-1.0)*x3754))+x3749+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+(((-1.0)*r20*x3742))+((cj4*r22))+x3751+x3752);
evalcond[2]=((((-1.0)*cj5*r01*x3743))+(((-1.0)*x3752))+(((-1.0)*x3751))+(((-1.0)*cj5*r11*x3748))+(((-1.0)*r00*sj5*x3743))+(((-1.0)*sj5*x3746)));
CheckValue<IkReal> x3755=IKPowWithIntegerCheck(cj4,-1);
if(!x3755.valid){
continue;
}
evalcond[3]=((((-0.11)*x3749))+(((-0.444)*cj1))+pz+(((-0.08)*r22*sj4*(x3755.value)))+(((0.11)*x3753))+(((0.47)*x3752))+(((0.47)*x3751)));
evalcond[4]=(((x3742*x3746))+((x3742*x3744))+(((-1.0)*x3754))+(((-1.0)*cj4*r12*x3748))+(((-1.0)*sj4*x3743*x3747))+x3749+(((-1.0)*r11*sj4*x3750))+(((-1.0)*cj4*r02*x3743)));
evalcond[5]=((((0.08)*r11*sj0*sj5))+(((-1.0)*x3745*x3746))+(((-1.0)*px*x3743))+(((0.11)*x3752))+(((0.11)*x3751))+(((0.08)*cj0*x3747))+(((0.47)*x3749))+(((-1.0)*x3744*x3745))+(((-0.47)*x3753))+(((-1.0)*py*x3748))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3756=((1.0)*cj5);
IkReal x3757=((1.0)*sj5);
CheckValue<IkReal> x3758=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x3757))+(((-1.0)*cj4*r22)))),-1);
if(!x3758.valid){
continue;
}
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3756))+(((-1.0)*r10*x3757)))),IkReal(((((-1.0)*r00*x3757))+(((-1.0)*r01*x3756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3758.value)))+(x3759.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3760=IKsin(j0);
IkReal x3761=IKcos(j0);
IkReal x3762=(r11*sj5);
IkReal x3763=(cj5*r10);
IkReal x3764=(r02*sj4);
IkReal x3765=(r12*sj4);
IkReal x3766=(cj4*r00);
IkReal x3767=(cj4*r01);
IkReal x3768=(sj5*x3760);
IkReal x3769=((1.0)*x3761);
IkReal x3770=((0.08)*x3761);
IkReal x3771=(cj5*x3760);
IkReal x3772=((1.0)*x3760);
evalcond[0]=((((-1.0)*r10*sj5*x3769))+(((-1.0)*cj5*r11*x3769))+((r00*x3768))+((r01*x3771)));
evalcond[1]=(((px*x3760))+(((-0.08)*r01*x3768))+(((-1.0)*x3763*x3770))+(((0.08)*r00*x3771))+((x3762*x3770))+(((-1.0)*py*x3769)));
evalcond[2]=((((-1.0)*r00*sj4*x3771))+((r01*sj4*x3768))+(((-1.0)*sj4*x3762*x3769))+(((-1.0)*cj4*r12*x3769))+((cj4*r02*x3760))+((sj4*x3761*x3763)));
evalcond[3]=((-1.0)+(((-1.0)*x3765*x3769))+(((-1.0)*x3767*x3768))+((x3760*x3764))+((x3766*x3771))+((cj4*x3761*x3762))+(((-1.0)*cj4*x3763*x3769)));
evalcond[4]=((((-1.0)*cj4*x3763*x3772))+(((-1.0)*cj5*x3766*x3769))+(((-1.0)*x3765*x3772))+(((-1.0)*x3764*x3769))+((cj4*x3760*x3762))+((sj5*x3761*x3767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3773=((1500.0)*pz);
CheckValue<IkReal> x3798=IKPowWithIntegerCheck(cj4,-1);
if(!x3798.valid){
continue;
}
IkReal x3774=x3798.value;
IkReal x3775=((0.96)*cj0);
IkReal x3776=(r01*sj5);
IkReal x3777=(r20*sj5);
IkReal x3778=(cj0*px);
IkReal x3779=(cj5*r21);
IkReal x3780=((705.0)*sj4);
IkReal x3781=(r21*sj5);
IkReal x3782=(py*sj0);
IkReal x3783=(cj5*r20);
IkReal x3784=(cj4*r22);
IkReal x3785=(cj5*r00);
IkReal x3786=((0.32)*cj0);
IkReal x3787=((235.0)*sj4);
IkReal x3788=((1.32)*sj4);
IkReal x3789=((0.44)*sj4);
IkReal x3790=((165.0)*x3777);
IkReal x3791=((165.0)*x3779);
IkReal x3792=(cj5*r10*sj0);
IkReal x3793=(r22*sj4*x3774);
IkReal x3794=(r11*sj0*sj5);
IkReal x3795=(x3780*x3783);
IkReal x3796=((((120.0)*x3793))+((x3780*x3781))+(((705.0)*x3784)));
IkReal x3797=(x3795+x3791+x3790+x3773);
j1eval[0]=((14.208)+(((0.008)*(IKabs(((222.0)+(((500.0)*pz))+(((-1.0)*x3781*x3787))+(((55.0)*x3777))+(((55.0)*x3779))+(((-40.0)*x3793))+(((-235.0)*x3784))+((x3783*x3787)))))))+(IKabs(((((0.32)*x3794))+(((-1.88)*x3777))+(((-1.88)*x3779))+(((-0.32)*x3792))+((x3776*x3786))+(((-1.0)*x3781*x3789))+(((-4.0)*x3782))+(((-4.0)*x3778))+(((-0.44)*x3784))+((x3783*x3789))+(((-1.0)*x3785*x3786)))))+(((0.008)*(IKabs(((222.0)+(((-1.0)*x3796))+x3797)))))+(((0.008)*(IKabs(((-222.0)+(((-1.0)*x3796))+x3797)))))+(((2.0)*(IKabs(((((-5.64)*x3779))+(((-5.64)*x3777))+(((-0.96)*x3792))+(((-1.32)*x3784))+((x3775*x3776))+(((-12.0)*x3778))+(((-1.0)*x3781*x3788))+(((0.96)*x3794))+(((-12.0)*x3782))+(((-1.0)*x3775*x3785))+((x3783*x3788))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3828=IKPowWithIntegerCheck(cj4,-1);
if(!x3828.valid){
continue;
}
IkReal x3799=x3828.value;
IkReal x3800=((222.0)*cj4);
IkReal x3801=cj4*cj4;
IkReal x3802=(cj4*r21);
IkReal x3803=((705.0)*sj4);
IkReal x3804=(r22*sj4);
IkReal x3805=(cj4*r20);
IkReal x3806=((0.008)*x3799);
IkReal x3807=((235.0)*sj4);
IkReal x3808=(cj4*pz);
IkReal x3809=((1500.0)*x3808);
IkReal x3810=((120.0)*x3804);
IkReal x3811=((500.0)*x3808);
IkReal x3812=((40.0)*x3804);
IkReal x3813=(r22*x3801);
IkReal x3814=((165.0)*sj5*x3805);
IkReal x3815=((165.0)*cj5*x3802);
IkReal x3816=((705.0)*x3813);
IkReal x3817=((55.0)*sj5*x3805);
IkReal x3818=((55.0)*cj5*x3802);
IkReal x3819=((235.0)*x3813);
IkReal x3820=(cj5*x3803*x3805);
IkReal x3821=(sj5*x3802*x3803);
IkReal x3822=(cj5*x3805*x3807);
IkReal x3823=(sj5*x3802*x3807);
IkReal x3824=(x3821+x3810+x3816);
IkReal x3825=(x3823+x3812+x3819);
IkReal x3826=(x3820+x3814+x3815+x3809);
IkReal x3827=(x3822+x3811+x3817+x3818);
op[0]=(x3806*(((((-1.0)*x3825))+x3827+x3800)));
op[1]=0;
op[2]=(x3806*(((((-1.0)*x3824))+x3826+x3800)));
op[3]=0;
op[4]=(x3806*(((((-1.0)*x3800))+(((-1.0)*x3824))+x3826)));
op[5]=0;
op[6]=(x3806*(((((-1.0)*x3800))+(((-1.0)*x3825))+x3827)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3829=((0.32)*cj5);
IkReal x3830=(cj0*r00);
IkReal x3831=(cj0*px);
IkReal x3832=(cj5*r21);
IkReal x3833=(r10*sj0);
IkReal x3834=((0.96)*cj5);
IkReal x3835=(py*sj0);
IkReal x3836=(r20*sj5);
IkReal x3837=(cj4*r22);
IkReal x3838=(cj0*r01*sj5);
IkReal x3839=(r21*sj4*sj5);
IkReal x3840=(cj5*r20*sj4);
IkReal x3841=(r11*sj0*sj5);
IkReal x3842=((0.44)*x3840);
IkReal x3843=((0.32)*x3838);
IkReal x3844=((0.32)*x3841);
IkReal x3845=(x3843+x3842+x3844);
IkReal x3846=((((4.0)*x3831))+(((4.0)*x3835))+((x3829*x3830))+((x3829*x3833))+(((1.88)*x3836))+(((1.88)*x3832))+(((0.44)*x3837))+(((0.44)*x3839)));
IkReal x3847=((((-5.64)*x3832))+(((-5.64)*x3836))+(((-1.0)*x3830*x3834))+(((0.96)*x3838))+(((-1.0)*x3833*x3834))+(((0.96)*x3841))+(((-12.0)*x3831))+(((-12.0)*x3835))+(((1.32)*x3840))+(((-1.32)*x3839))+(((-1.32)*x3837)));
j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*((x3845+(((-1.0)*x3846))))))+(((3.552)*(htj1*htj1*htj1*htj1*htj1)))+((x3847*(htj1*htj1)))+(((7.104)*(htj1*htj1*htj1)))+((x3847*(htj1*htj1*htj1*htj1)))+x3845+(((3.552)*htj1))+(((-1.0)*x3846)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3848=((1.0)*cj1);
IkReal x3849=(cj4*r22);
IkReal x3850=(cj5*r21);
IkReal x3851=((1.0)*sj1);
IkReal x3852=(r20*sj5);
IkReal x3853=(cj5*r20*sj4);
IkReal x3854=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x3848*x3854))+((cj1*x3853))+(((-1.0)*x3848*x3849))+((sj1*x3850))+((sj1*x3852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3848*x3850))+(((-1.0)*x3848*x3852))+(((-1.0)*x3851*x3854))+((sj1*x3853))+(((-1.0)*x3849*x3851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3848*x3854))+((cj1*x3853))+(((-1.0)*x3848*x3849))+((sj1*x3850))+((sj1*x3852))))+IKsqr(((((-1.0)*x3848*x3850))+(((-1.0)*x3848*x3852))+(((-1.0)*x3851*x3854))+((sj1*x3853))+(((-1.0)*x3849*x3851))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3848*x3854))+((cj1*x3853))+(((-1.0)*x3848*x3849))+((sj1*x3850))+((sj1*x3852))), ((((-1.0)*x3848*x3850))+(((-1.0)*x3848*x3852))+(((-1.0)*x3851*x3854))+((sj1*x3853))+(((-1.0)*x3849*x3851))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3855=IKcos(j2);
IkReal x3856=IKsin(j2);
IkReal x3857=(cj5*sj4);
IkReal x3858=((1.0)*cj0);
IkReal x3859=(cj0*r00);
IkReal x3860=((0.08)*cj5);
IkReal x3861=(r10*sj0);
IkReal x3862=(r01*sj5);
IkReal x3863=((1.0)*sj0);
IkReal x3864=(cj1*x3855);
IkReal x3865=(sj5*x3863);
IkReal x3866=(cj1*x3856);
IkReal x3867=(sj1*x3855);
IkReal x3868=(sj1*x3856);
IkReal x3869=((1.0)*x3868);
evalcond[0]=(((cj5*r21))+(((-1.0)*x3869))+x3864+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*x3857))+x3867+x3866);
evalcond[2]=((((-1.0)*cj5*r01*x3858))+(((-1.0)*x3867))+(((-1.0)*x3866))+(((-1.0)*sj5*x3861))+(((-1.0)*cj5*r11*x3863))+(((-1.0)*r00*sj5*x3858)));
CheckValue<IkReal> x3870=IKPowWithIntegerCheck(cj4,-1);
if(!x3870.valid){
continue;
}
evalcond[3]=((((-0.11)*x3864))+(((-0.444)*cj1))+pz+(((0.47)*x3867))+(((0.47)*x3866))+(((-0.08)*r22*sj4*(x3870.value)))+(((0.11)*x3868)));
evalcond[4]=((((-1.0)*sj4*x3858*x3862))+(((-1.0)*x3869))+((x3857*x3859))+(((-1.0)*cj4*r02*x3858))+((x3857*x3861))+(((-1.0)*cj4*r12*x3863))+x3864+(((-1.0)*r11*sj4*x3865)));
evalcond[5]=((((-1.0)*x3860*x3861))+(((-1.0)*py*x3863))+(((0.08)*r11*sj0*sj5))+(((-1.0)*x3859*x3860))+(((-0.47)*x3868))+(((0.08)*cj0*x3862))+(((0.47)*x3864))+(((-1.0)*px*x3858))+(((0.11)*x3867))+(((0.11)*x3866))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3871=((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))));
IkReal x3878 = x3871;
if(IKabs(x3878)==0){
continue;
}
IkReal x3872=pow(x3878,-0.5);
if((x3871) < -0.00001)
continue;
IkReal x3873=IKabs(IKsqrt(x3871));
IkReal x3874=((12.5)*x3872);
CheckValue<IkReal> x3879=IKPowWithIntegerCheck(x3873,-1);
if(!x3879.valid){
continue;
}
IkReal x3875=x3879.value;
IkReal x3876=(r22*x3875);
if((((1.0)+(((-1.0)*(x3876*x3876))))) < -0.00001)
continue;
IkReal x3877=IKsqrt(((1.0)+(((-1.0)*(x3876*x3876)))));
if( (x3876) < -1-IKFAST_SINCOS_THRESH || (x3876) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3880 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x3880.valid){
continue;
}
IkReal gconst0=((IKasin(x3876))+(((-1.0)*(x3880.value))));
IkReal gconst1=(((rxp0_2*x3874*x3876))+(((-1.0)*rxp1_2*x3874*x3877)));
IkReal gconst2=(((rxp0_2*x3874*x3877))+((rxp1_2*x3874*x3876)));
if((((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x3881=IKPowWithIntegerCheck(IKabs(IKsqrt(((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2)))))),-1);
if(!x3881.valid){
continue;
}
if( ((r22*(x3881.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x3881.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3882 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x3882.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x3881.value))))))+(x3882.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3883=((0.08)*cj3);
IkReal x3884=((1.0)*cj3);
CheckValue<IkReal> x3885 = IKatan2WithCheck(IkReal((((gconst1*r11*x3883))+(((-1.0)*gconst2*r10*x3883))+(((-1.0)*py*x3884)))),IkReal((((gconst1*r01*x3883))+(((-1.0)*gconst2*r00*x3883))+(((-1.0)*px*x3884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3885.valid){
continue;
}
CheckValue<IkReal> x3886=IKPowWithIntegerCheck(IKsign((((gconst2*rxp1_2))+((r22*(((((-0.08)*(gconst1*gconst1)))+(((-0.08)*(gconst2*gconst2)))))))+((gconst1*rxp0_2)))),-1);
if(!x3886.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3885.value)+(((1.5707963267949)*(x3886.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3887=IKsin(j0);
IkReal x3888=IKcos(j0);
IkReal x3889=(gconst2*sj4);
IkReal x3890=(cj4*gconst2);
IkReal x3891=((0.08)*gconst2);
IkReal x3892=(gconst1*x3888);
IkReal x3893=(r00*x3887);
IkReal x3894=(r10*x3888);
IkReal x3895=((1.0)*x3888);
IkReal x3896=(r02*x3887);
IkReal x3897=(gconst1*r01*x3887);
evalcond[0]=(cj3+(((-1.0)*r10*x3892))+(((-1.0)*gconst2*r11*x3895))+((gconst1*x3893))+((gconst2*r01*x3887)));
evalcond[1]=((((0.08)*r11*x3892))+(((-0.08)*x3897))+((x3891*x3893))+(((-1.0)*x3891*x3894))+((px*x3887))+(((-1.0)*py*x3895)));
evalcond[2]=(((cj4*x3896))+((x3889*x3894))+((sj4*x3897))+(((-1.0)*x3889*x3893))+(((-1.0)*r11*sj4*x3892))+(((-1.0)*cj4*r12*x3895)));
evalcond[3]=((((-1.0)*cj4*x3897))+((x3890*x3893))+sj3+(((-1.0)*x3890*x3894))+(((-1.0)*r12*sj4*x3895))+((sj4*x3896))+((cj4*r11*x3892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3898=(gconst2*r21);
IkReal x3899=(gconst1*r20);
IkReal x3900=(r22*sj4);
IkReal x3901=(cj4*gconst2*r20);
IkReal x3902=((1.0)*cj4*gconst1*r21);
IkReal x3903=(x3898+x3899);
IkReal x3904=((((-1.0)*sj3))+x3903);
IkReal x3905=(sj3+x3903);
IkReal x3906=(x3900+x3901);
IkReal x3907=x3871;
IkReal x3908=((((-1.0)*x3902))+cj3+x3906);
IkReal x3917 = x3907;
if(IKabs(x3917)==0){
continue;
}
IkReal x3909=pow(x3917,-0.5);
if((x3907) < -0.00001)
continue;
IkReal x3910=IKabs(IKsqrt(x3907));
IkReal x3911=((((-1.0)*x3902))+x3906+(((-1.0)*cj3)));
IkReal x3912=((12.5)*x3909);
CheckValue<IkReal> x3918=IKPowWithIntegerCheck(x3910,-1);
if(!x3918.valid){
continue;
}
IkReal x3913=x3918.value;
IkReal x3914=(r22*x3913);
CheckValue<IkReal> x3919 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x3919.valid){
continue;
}
if( (x3914) < -1-IKFAST_SINCOS_THRESH || (x3914) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x3915=((((-1.0)*(x3919.value)))+(IKasin(x3914)));
if((((1.0)+(((-1.0)*(x3914*x3914))))) < -0.00001)
continue;
IkReal x3916=IKsqrt(((1.0)+(((-1.0)*(x3914*x3914)))));
sj5=gconst1;
cj5=gconst2;
j5=x3915;
IkReal gconst0=x3915;
IkReal gconst1=(((rxp0_2*x3912*x3914))+(((-1.0)*rxp1_2*x3912*x3916)));
IkReal gconst2=(((rxp0_2*x3912*x3916))+((rxp1_2*x3912*x3914)));
IkReal gconst222=x3904;
IkReal gconst223=x3905;
IkReal gconst224=x3908;
IkReal gconst225=x3911;
IkReal gconst226=x3904;
IkReal gconst227=x3905;
IkReal gconst228=x3908;
IkReal gconst229=x3911;
IkReal gconst230=x3905;
IkReal gconst231=x3904;
IkReal gconst232=x3911;
IkReal gconst233=x3908;
IkReal gconst234=x3905;
IkReal gconst235=x3904;
IkReal gconst236=x3911;
IkReal gconst237=x3908;
j1eval[0]=((((0.5)*(IKabs(((((-8.0)*cj3*cj4*r20*r21*sj3*(gconst2*gconst2)))+(((-4.0)*(cj4*cj4)*(gconst1*gconst1)*(r21*r21)*(sj3*sj3)))+(((8.0)*cj4*gconst1*r21*r22*sj4*(sj3*sj3)))+(((8.0)*cj3*cj4*r20*r21*sj3*(gconst1*gconst1)))+(((-4.0)*(cj3*cj3)*(gconst1*gconst1)*(r20*r20)))+(((-4.0)*(cj4*cj4)*(gconst2*gconst2)*(r20*r20)*(sj3*sj3)))+(((8.0)*cj3*cj4*gconst1*gconst2*sj3*(r21*r21)))+(((-8.0)*cj3*cj4*gconst1*gconst2*sj3*(r20*r20)))+(((-4.0)*(r22*r22)*(sj3*sj3)*(sj4*sj4)))+(((-8.0)*cj4*gconst2*r20*r22*sj4*(sj3*sj3)))+(((-8.0)*cj3*gconst2*r21*r22*sj3*sj4))+(((-8.0)*cj3*gconst1*r20*r22*sj3*sj4))+(((-4.0)*(cj3*cj3)*(gconst2*gconst2)*(r21*r21)))+(((8.0)*gconst1*gconst2*r20*r21*(cj4*cj4)*(sj3*sj3)))+(((-8.0)*gconst1*gconst2*r20*r21*(cj3*cj3))))))))+(IKabs(((((-16.0)*(r22*r22)*(sj3*sj3)*(sj4*sj4)))+(((-32.0)*cj3*cj4*gconst1*gconst2*sj3*(r20*r20)))+(((-32.0)*gconst1*gconst2*r20*r21*(cj3*cj3)))+(((32.0)*cj3*cj4*r20*r21*sj3*(gconst1*gconst1)))+(((32.0)*cj4*gconst1*r21*r22*sj4*(sj3*sj3)))+(((-16.0)*(cj3*cj3)*(gconst1*gconst1)*(r20*r20)))+(((-32.0)*cj4*gconst2*r20*r22*sj4*(sj3*sj3)))+(((-32.0)*cj3*gconst2*r21*r22*sj3*sj4))+(((-32.0)*cj3*cj4*r20*r21*sj3*(gconst2*gconst2)))+(((32.0)*cj3*cj4*gconst1*gconst2*sj3*(r21*r21)))+(((-16.0)*(cj4*cj4)*(gconst1*gconst1)*(r21*r21)*(sj3*sj3)))+(((-16.0)*(cj4*cj4)*(gconst2*gconst2)*(r20*r20)*(sj3*sj3)))+(((-32.0)*cj3*gconst1*r20*r22*sj3*sj4))+(((-16.0)*(cj3*cj3)*(gconst2*gconst2)*(r21*r21)))+(((32.0)*gconst1*gconst2*r20*r21*(cj4*cj4)*(sj3*sj3))))))+(((0.5)*(IKabs(((((-24.0)*(cj4*cj4)*(gconst1*gconst1)*(r21*r21)*(sj3*sj3)))+(((48.0)*gconst1*gconst2*r20*r21*(cj4*cj4)*(sj3*sj3)))+(((-48.0)*gconst1*gconst2*r20*r21*(cj3*cj3)))+(((48.0)*cj3*cj4*gconst1*gconst2*sj3*(r21*r21)))+(((-48.0)*cj3*cj4*r20*r21*sj3*(gconst2*gconst2)))+(((-24.0)*(cj4*cj4)*(gconst2*gconst2)*(r20*r20)*(sj3*sj3)))+(((-24.0)*(r22*r22)*(sj3*sj3)*(sj4*sj4)))+(((48.0)*cj4*gconst1*r21*r22*sj4*(sj3*sj3)))+(((-48.0)*cj4*gconst2*r20*r22*sj4*(sj3*sj3)))+(((48.0)*cj3*cj4*r20*r21*sj3*(gconst1*gconst1)))+(((-24.0)*(cj3*cj3)*(gconst2*gconst2)*(r21*r21)))+(((-48.0)*cj3*gconst2*r21*r22*sj3*sj4))+(((-48.0)*cj3*gconst1*r20*r22*sj3*sj4))+(((-48.0)*cj3*cj4*gconst1*gconst2*sj3*(r20*r20)))+(((-24.0)*(cj3*cj3)*(gconst1*gconst1)*(r20*r20)))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x3920=sj3*sj3;
IkReal x3921=cj3*cj3;
IkReal x3922=(gconst234*gconst237);
IkReal x3923=(gconst230*gconst233);
IkReal x3924=(gconst226*gconst231);
IkReal x3925=(gconst225*gconst230);
IkReal x3926=(gconst227*gconst236);
IkReal x3927=(gconst224*gconst231);
IkReal x3928=(gconst229*gconst232);
IkReal x3929=(gconst231*gconst232);
IkReal x3930=((1.0)*gconst235);
IkReal x3931=(gconst223*gconst224);
IkReal x3932=(gconst225*gconst226);
IkReal x3933=((1.0)*gconst229);
IkReal x3934=(gconst227*gconst228);
IkReal x3935=(gconst223*gconst232);
IkReal x3936=(gconst228*gconst235);
IkReal x3937=(gconst226*gconst237);
IkReal x3938=(gconst233*gconst234);
IkReal x3939=(gconst229*gconst234);
IkReal x3940=((1.0)*gconst237);
IkReal x3941=(gconst222*gconst233);
IkReal x3942=(gconst231*gconst234);
IkReal x3943=(gconst222*gconst225);
IkReal x3944=(gconst223*gconst226);
IkReal x3945=(gconst223*gconst234);
IkReal x3946=(gconst235*gconst236);
IkReal x3947=((16.0)*x3921);
IkReal x3948=((16.0)*cj3*sj3);
IkReal x3949=(gconst226*x3941);
IkReal x3950=((16.0)*gconst225*x3920);
IkReal x3951=((16.0)*gconst233*x3920);
op[0]=(((x3923*x3946))+(((-1.0)*x3922*x3923))+(((-1.0)*gconst236*x3929*x3930))+((x3922*x3929)));
op[1]=0;
op[2]=((((-1.0)*x3926*x3929))+((x3922*x3935))+((x3923*x3936))+(((-1.0)*x3923*x3937))+(((-1.0)*x3922*x3941))+(((-1.0)*x3922*x3925))+(((-1.0)*gconst228*x3929*x3930))+(((-1.0)*x3942*x3947))+((x3941*x3946))+(((-1.0)*x3938*x3948))+((x3928*x3942))+(((-1.0)*gconst236*x3930*x3935))+(((-1.0)*gconst236*x3951))+(((-1.0)*gconst236*x3927*x3930))+(((-1.0)*gconst234*x3923*x3933))+(((-1.0)*gconst231*gconst236*x3948))+((gconst232*gconst237*x3924))+((x3923*x3926))+((x3925*x3946))+((x3922*x3927)));
op[3]=0;
op[4]=((((-1.0)*x3926*x3927))+((x3922*x3931))+(((-1.0)*x3925*x3937))+((x3923*x3934))+(((-1.0)*x3937*x3941))+(((-1.0)*x3922*x3943))+(((-1.0)*gconst228*x3927*x3930))+(((-1.0)*gconst226*x3923*x3933))+(((-1.0)*gconst222*x3933*x3938))+(((-1.0)*x3945*x3947))+(((-1.0)*gconst225*gconst234*x3948))+(((-1.0)*gconst226*gconst233*x3948))+((x3935*x3937))+((x3926*x3941))+(((-1.0)*x3926*x3935))+((x3943*x3946))+(((-1.0)*gconst234*x3925*x3933))+(((-1.0)*gconst223*gconst236*x3948))+((x3928*x3945))+(((-1.0)*gconst236*x3930*x3931))+(((-1.0)*x3924*x3947))+(((-1.0)*gconst236*x3950))+((x3927*x3939))+(((-1.0)*gconst228*x3951))+((gconst224*gconst237*x3924))+((x3925*x3926))+((x3936*x3941))+(((-1.0)*gconst228*gconst231*x3948))+(((-1.0)*gconst228*x3930*x3935))+(((-1.0)*x3929*x3934))+((x3924*x3928))+((x3925*x3936)));
op[5]=0;
op[6]=((((-1.0)*x3932*x3948))+(((-1.0)*x3933*x3949))+(((-1.0)*gconst234*x3933*x3943))+((x3934*x3941))+((x3926*x3943))+(((-1.0)*x3926*x3931))+((x3928*x3944))+(((-1.0)*gconst223*gconst228*x3948))+(((-1.0)*gconst222*x3932*x3940))+(((-1.0)*gconst228*x3950))+(((-1.0)*x3944*x3947))+((x3936*x3943))+(((-1.0)*x3927*x3934))+(((-1.0)*gconst228*x3930*x3931))+((x3931*x3937))+((x3931*x3939))+((gconst224*gconst229*x3924))+(((-1.0)*x3934*x3935))+((x3925*x3934))+(((-1.0)*gconst226*x3925*x3933)));
op[7]=0;
op[8]=((((-1.0)*x3931*x3934))+((x3934*x3943))+(((-1.0)*gconst222*x3932*x3933))+((gconst226*gconst229*x3931)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x3952=x3871;
IkReal x3960 = x3952;
if(IKabs(x3960)==0){
continue;
}
IkReal x3953=pow(x3960,-0.5);
if((x3952) < -0.00001)
continue;
IkReal x3954=IKabs(IKsqrt(x3952));
IkReal x3955=((12.5)*x3953);
CheckValue<IkReal> x3961=IKPowWithIntegerCheck(x3954,-1);
if(!x3961.valid){
continue;
}
IkReal x3956=x3961.value;
IkReal x3957=(r22*x3956);
if( (x3957) < -1-IKFAST_SINCOS_THRESH || (x3957) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3962 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x3962.valid){
continue;
}
IkReal x3958=((IKasin(x3957))+(((-1.0)*(x3962.value))));
if((((1.0)+(((-1.0)*(x3957*x3957))))) < -0.00001)
continue;
IkReal x3959=IKsqrt(((1.0)+(((-1.0)*(x3957*x3957)))));
sj5=gconst1;
cj5=gconst2;
j5=x3958;
IkReal gconst0=x3958;
IkReal gconst1=(((rxp0_2*x3955*x3957))+(((-1.0)*rxp1_2*x3955*x3959)));
IkReal gconst2=(((rxp0_2*x3955*x3959))+((rxp1_2*x3955*x3957)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3963=x3871;
IkReal x3971 = x3963;
if(IKabs(x3971)==0){
continue;
}
IkReal x3964=pow(x3971,-0.5);
if((x3963) < -0.00001)
continue;
IkReal x3965=IKabs(IKsqrt(x3963));
IkReal x3966=((12.5)*x3964);
CheckValue<IkReal> x3972=IKPowWithIntegerCheck(x3965,-1);
if(!x3972.valid){
continue;
}
IkReal x3967=x3972.value;
IkReal x3968=(r22*x3967);
if( (x3968) < -1-IKFAST_SINCOS_THRESH || (x3968) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3973 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x3973.valid){
continue;
}
IkReal x3969=((IKasin(x3968))+(((-1.0)*(x3973.value))));
if((((1.0)+(((-1.0)*(x3968*x3968))))) < -0.00001)
continue;
IkReal x3970=IKsqrt(((1.0)+(((-1.0)*(x3968*x3968)))));
sj5=gconst1;
cj5=gconst2;
j5=x3969;
IkReal gconst0=x3969;
IkReal gconst1=((((-1.0)*rxp1_2*x3966*x3970))+((rxp0_2*x3966*x3968)));
IkReal gconst2=(((rxp0_2*x3966*x3970))+((rxp1_2*x3966*x3968)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3974=((1.0)*cj1);
IkReal x3975=(cj4*r22);
IkReal x3976=(cj1*gconst2);
IkReal x3977=((1.0)*sj1);
IkReal x3978=(r20*sj4);
IkReal x3979=(gconst1*r20);
IkReal x3980=(gconst1*r21*sj4);
if( IKabs(((((-1.0)*x3977*x3979))+(((-1.0)*gconst2*r21*x3977))+((x3976*x3978))+(((-1.0)*x3974*x3975))+(((-1.0)*x3974*x3980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst2*sj1*x3978))+(((-1.0)*x3977*x3980))+((cj1*x3979))+((r21*x3976))+(((-1.0)*x3975*x3977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3977*x3979))+(((-1.0)*gconst2*r21*x3977))+((x3976*x3978))+(((-1.0)*x3974*x3975))+(((-1.0)*x3974*x3980))))+IKsqr((((gconst2*sj1*x3978))+(((-1.0)*x3977*x3980))+((cj1*x3979))+((r21*x3976))+(((-1.0)*x3975*x3977))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3977*x3979))+(((-1.0)*gconst2*r21*x3977))+((x3976*x3978))+(((-1.0)*x3974*x3975))+(((-1.0)*x3974*x3980))), (((gconst2*sj1*x3978))+(((-1.0)*x3977*x3980))+((cj1*x3979))+((r21*x3976))+(((-1.0)*x3975*x3977))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3981=IKcos(j2);
IkReal x3982=IKsin(j2);
IkReal x3983=(cj0*gconst1);
IkReal x3984=(gconst2*sj4);
IkReal x3985=(cj0*r00);
IkReal x3986=((1.0)*cj0);
IkReal x3987=((0.08)*gconst2);
IkReal x3988=(r10*sj0);
IkReal x3989=((1.0)*sj0);
IkReal x3990=((0.08)*gconst1);
IkReal x3991=(sj1*x3981);
IkReal x3992=(cj1*x3982);
IkReal x3993=(cj1*x3981);
IkReal x3994=(gconst1*x3989);
IkReal x3995=(sj1*x3982);
IkReal x3996=(x3992+x3991);
evalcond[0]=(x3995+((gconst2*r21))+(((-1.0)*x3993))+((gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*x3984))+x3996+((gconst1*r21*sj4)));
evalcond[2]=((((-1.0)*gconst2*r01*x3986))+x3996+(((-1.0)*gconst1*x3988))+(((-1.0)*r00*x3983))+(((-1.0)*gconst2*r11*x3989)));
evalcond[3]=((((0.47)*x3991))+(((0.47)*x3992))+(((-0.444)*cj1))+(((-0.11)*x3993))+((r20*x3987))+pz+(((-1.0)*r21*x3990))+(((0.11)*x3995)));
evalcond[4]=((((-1.0)*cj4*r12*x3989))+((x3984*x3988))+((x3984*x3985))+(((-1.0)*r01*sj4*x3983))+x3993+(((-1.0)*x3995))+(((-1.0)*cj4*r02*x3986))+(((-1.0)*r11*sj4*x3994)));
evalcond[5]=((((0.47)*x3993))+(((0.08)*r01*x3983))+(((-0.47)*x3995))+(((-1.0)*x3985*x3987))+(((-1.0)*px*x3986))+(((-1.0)*x3987*x3988))+(((-1.0)*py*x3989))+((r11*sj0*x3990))+(((0.11)*x3991))+(((0.11)*x3992))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3997=((1.0)*cj1);
IkReal x3998=(cj4*r22);
IkReal x3999=(gconst2*r21);
IkReal x4000=((1.0)*sj1);
IkReal x4001=(gconst1*r20);
IkReal x4002=(gconst1*r21*sj4);
IkReal x4003=(gconst2*r20*sj4);
if( IKabs(((((-1.0)*x3997*x3998))+((cj1*x4003))+((sj1*x4001))+(((-1.0)*x3997*x4002))+((sj1*x3999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3997*x3999))+(((-1.0)*x3998*x4000))+(((-1.0)*x4000*x4002))+((sj1*x4003))+(((-1.0)*x3997*x4001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3997*x3998))+((cj1*x4003))+((sj1*x4001))+(((-1.0)*x3997*x4002))+((sj1*x3999))))+IKsqr(((((-1.0)*x3997*x3999))+(((-1.0)*x3998*x4000))+(((-1.0)*x4000*x4002))+((sj1*x4003))+(((-1.0)*x3997*x4001))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3997*x3998))+((cj1*x4003))+((sj1*x4001))+(((-1.0)*x3997*x4002))+((sj1*x3999))), ((((-1.0)*x3997*x3999))+(((-1.0)*x3998*x4000))+(((-1.0)*x4000*x4002))+((sj1*x4003))+(((-1.0)*x3997*x4001))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4004=IKcos(j2);
IkReal x4005=IKsin(j2);
IkReal x4006=(cj0*gconst1);
IkReal x4007=(gconst2*sj4);
IkReal x4008=(cj0*r00);
IkReal x4009=((1.0)*cj0);
IkReal x4010=((0.08)*gconst2);
IkReal x4011=(r10*sj0);
IkReal x4012=((1.0)*sj0);
IkReal x4013=((0.08)*gconst1);
IkReal x4014=(cj1*x4004);
IkReal x4015=(cj1*x4005);
IkReal x4016=(gconst1*x4012);
IkReal x4017=(sj1*x4004);
IkReal x4018=(sj1*x4005);
IkReal x4019=((1.0)*x4018);
evalcond[0]=(x4014+(((-1.0)*x4019))+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*x4007))+x4017+x4015+((gconst1*r21*sj4)));
evalcond[2]=((((-1.0)*gconst2*r01*x4009))+(((-1.0)*x4015))+(((-1.0)*x4017))+(((-1.0)*r00*x4006))+(((-1.0)*gconst1*x4011))+(((-1.0)*gconst2*r11*x4012)));
evalcond[3]=((((-0.444)*cj1))+(((-0.11)*x4014))+(((0.11)*x4018))+(((0.47)*x4017))+(((0.47)*x4015))+((r20*x4010))+pz+(((-1.0)*r21*x4013)));
evalcond[4]=((((-1.0)*r11*sj4*x4016))+(((-1.0)*cj4*r12*x4012))+(((-1.0)*r01*sj4*x4006))+x4014+(((-1.0)*x4019))+((x4007*x4011))+((x4007*x4008))+(((-1.0)*cj4*r02*x4009)));
evalcond[5]=((((-1.0)*px*x4009))+(((0.08)*r01*x4006))+(((0.11)*x4017))+(((0.11)*x4015))+(((0.47)*x4014))+(((-1.0)*py*x4012))+(((-1.0)*x4008*x4010))+(((-0.47)*x4018))+((r11*sj0*x4013))+(((-1.0)*x4010*x4011))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4020=((1.0)*r22);
IkReal x4021=(cj1*cj4);
IkReal x4022=(sj1*sj4);
IkReal x4023=(cj1*sj4);
IkReal x4024=(cj4*sj1);
IkReal x4025=(gconst2*r20);
IkReal x4026=((1.0)*gconst1*r21);
if( IKabs(((((-1.0)*x4023*x4026))+((x4023*x4025))+(((-1.0)*x4024*x4025))+((gconst1*r21*x4024))+(((-1.0)*x4020*x4022))+(((-1.0)*x4020*x4021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4021*x4025))+(((-1.0)*x4022*x4026))+((x4022*x4025))+((r22*x4023))+(((-1.0)*x4021*x4026))+(((-1.0)*x4020*x4024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4023*x4026))+((x4023*x4025))+(((-1.0)*x4024*x4025))+((gconst1*r21*x4024))+(((-1.0)*x4020*x4022))+(((-1.0)*x4020*x4021))))+IKsqr((((x4021*x4025))+(((-1.0)*x4022*x4026))+((x4022*x4025))+((r22*x4023))+(((-1.0)*x4021*x4026))+(((-1.0)*x4020*x4024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4023*x4026))+((x4023*x4025))+(((-1.0)*x4024*x4025))+((gconst1*r21*x4024))+(((-1.0)*x4020*x4022))+(((-1.0)*x4020*x4021))), (((x4021*x4025))+(((-1.0)*x4022*x4026))+((x4022*x4025))+((r22*x4023))+(((-1.0)*x4021*x4026))+(((-1.0)*x4020*x4024))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4027=IKsin(j2);
IkReal x4028=IKcos(j2);
IkReal x4029=((1.0)*cj4);
IkReal x4030=(gconst1*r21);
IkReal x4031=(gconst2*r20);
IkReal x4032=((1.0)*sj4);
IkReal x4033=(cj0*r02);
IkReal x4034=(r12*sj0);
IkReal x4035=(sj1*x4028);
IkReal x4036=(cj1*x4027);
IkReal x4037=(cj1*x4028);
IkReal x4038=(cj0*gconst1*r01);
IkReal x4039=(cj0*gconst2*r00);
IkReal x4040=(gconst2*r10*sj0);
IkReal x4041=(sj1*x4027);
IkReal x4042=(gconst1*r11*sj0);
IkReal x4043=(x4035+x4036);
evalcond[0]=((((-1.0)*x4031*x4032))+((cj4*r22))+x4043+((sj4*x4030)));
evalcond[1]=(((r22*sj4))+x4041+(((-1.0)*x4037))+(((-1.0)*x4029*x4030))+((cj4*x4031)));
evalcond[2]=((((-0.11)*x4037))+(((-0.444)*cj1))+(((0.08)*x4031))+(((-0.08)*x4030))+(((0.11)*x4041))+pz+(((0.47)*x4036))+(((0.47)*x4035)));
evalcond[3]=((((-1.0)*x4029*x4040))+x4043+(((-1.0)*x4029*x4039))+((cj4*x4042))+(((-1.0)*x4032*x4034))+(((-1.0)*x4032*x4033))+((cj4*x4038)));
evalcond[4]=((((-1.0)*x4032*x4042))+x4037+(((-1.0)*x4041))+((sj4*x4040))+(((-1.0)*x4029*x4034))+(((-1.0)*x4029*x4033))+((sj4*x4039))+(((-1.0)*x4032*x4038)));
evalcond[5]=((((-0.47)*x4041))+(((0.08)*x4042))+(((0.08)*x4038))+(((-0.08)*x4039))+(((-0.08)*x4040))+(((0.11)*x4036))+(((0.11)*x4035))+(((-1.0)*py*sj0))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((0.47)*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4044=(cj4*sj1);
IkReal x4045=(gconst2*r20);
IkReal x4046=((1.0)*cj3);
IkReal x4047=(sj1*sj4);
IkReal x4048=(gconst1*r21);
IkReal x4049=(cj1*sj4);
IkReal x4050=(cj1*cj4);
IkReal x4051=((1.0)*cj1*r22);
CheckValue<IkReal> x4052=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal((((r22*x4047))+(((-1.0)*r22*x4046*x4050))+((cj3*x4045*x4049))+(((-1.0)*x4046*x4048*x4049))+((x4044*x4045))+(((-1.0)*x4044*x4048)))),IkReal(((((-1.0)*r22*x4044*x4046))+((x4048*x4050))+((cj3*x4045*x4047))+(((-1.0)*x4046*x4047*x4048))+(((-1.0)*r22*x4049))+(((-1.0)*x4045*x4050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4052.value)))+(x4053.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4054=IKcos(j2);
IkReal x4055=IKsin(j2);
IkReal x4056=((1.0)*cj3);
IkReal x4057=(cj0*gconst1);
IkReal x4058=((1.0)*gconst1);
IkReal x4059=(r10*sj0);
IkReal x4060=((1.0)*r00);
IkReal x4061=(cj4*gconst2);
IkReal x4062=(r11*sj0);
IkReal x4063=((1.0)*cj0);
IkReal x4064=((1.0)*sj4);
IkReal x4065=(gconst2*r20);
IkReal x4066=(r12*sj0);
IkReal x4067=((0.08)*gconst1);
IkReal x4068=(cj1*x4054);
IkReal x4069=(sj1*x4055);
IkReal x4070=(cj1*x4055);
IkReal x4071=(sj1*x4054);
IkReal x4072=(cj0*gconst2*r00);
evalcond[0]=(((sj3*x4069))+(((-1.0)*sj3*x4068))+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4064*x4065))+x4071+x4070+((gconst1*r21*sj4)));
evalcond[2]=(((cj3*x4068))+((r22*sj4))+((r20*x4061))+(((-1.0)*x4056*x4069))+(((-1.0)*cj4*r21*x4058)));
evalcond[3]=(((sj3*x4070))+((sj3*x4071))+(((-1.0)*gconst2*r01*x4063))+(((-1.0)*x4058*x4059))+(((-1.0)*x4057*x4060))+(((-1.0)*gconst2*x4062)));
evalcond[4]=((((-0.444)*cj1))+(((-1.0)*r21*x4067))+pz+(((-0.11)*x4068))+(((0.47)*x4070))+(((0.47)*x4071))+(((0.11)*x4069))+(((0.08)*x4065)));
evalcond[5]=(((sj4*x4072))+(((-1.0)*cj4*r02*x4063))+(((-1.0)*cj4*x4066))+((gconst2*sj4*x4059))+(((-1.0)*sj4*x4058*x4062))+x4068+(((-1.0)*x4069))+(((-1.0)*r01*x4057*x4064)));
evalcond[6]=((((-1.0)*cj0*x4060*x4061))+(((-1.0)*x4064*x4066))+((cj4*gconst1*x4062))+(((-1.0)*x4056*x4071))+(((-1.0)*x4056*x4070))+((cj4*r01*x4057))+(((-1.0)*r02*sj4*x4063))+(((-1.0)*x4059*x4061)));
evalcond[7]=((((0.47)*x4068))+(((-0.08)*gconst2*x4059))+(((0.11)*x4070))+(((0.11)*x4071))+(((-1.0)*px*x4063))+(((0.08)*r01*x4057))+(((-1.0)*py*sj0))+((x4062*x4067))+(((-0.47)*x4069))+(((0.444)*sj1))+(((-0.08)*x4072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4073=(gconst2*r20);
IkReal x4074=(gconst1*r20);
IkReal x4075=((1.0)*sj1);
IkReal x4076=(gconst2*r21);
IkReal x4077=(cj1*sj3*sj4);
IkReal x4078=((1.0)*gconst1*r21);
IkReal x4079=(sj1*sj3*sj4);
IkReal x4080=((1.0)*cj4*r22*sj3);
CheckValue<IkReal> x4081=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4081.valid){
continue;
}
CheckValue<IkReal> x4082 = IKatan2WithCheck(IkReal(((((-1.0)*x4075*x4076))+(((-1.0)*x4074*x4075))+(((-1.0)*cj1*x4080))+((x4073*x4077))+(((-1.0)*x4077*x4078)))),IkReal((((cj1*x4074))+((cj1*x4076))+(((-1.0)*cj4*r22*sj3*x4075))+((x4073*x4079))+(((-1.0)*gconst1*r21*sj3*sj4*x4075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4082.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4081.value)))+(x4082.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4083=IKcos(j2);
IkReal x4084=IKsin(j2);
IkReal x4085=((1.0)*cj3);
IkReal x4086=(cj0*gconst1);
IkReal x4087=((1.0)*gconst1);
IkReal x4088=(r10*sj0);
IkReal x4089=((1.0)*r00);
IkReal x4090=(cj4*gconst2);
IkReal x4091=(r11*sj0);
IkReal x4092=((1.0)*cj0);
IkReal x4093=((1.0)*sj4);
IkReal x4094=(gconst2*r20);
IkReal x4095=(r12*sj0);
IkReal x4096=((0.08)*gconst1);
IkReal x4097=(cj1*x4083);
IkReal x4098=(sj1*x4084);
IkReal x4099=(cj1*x4084);
IkReal x4100=(sj1*x4083);
IkReal x4101=(cj0*gconst2*r00);
evalcond[0]=((((-1.0)*sj3*x4097))+((sj3*x4098))+((gconst2*r21))+((gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4093*x4094))+x4099+x4100+((gconst1*r21*sj4)));
evalcond[2]=(((r20*x4090))+((r22*sj4))+((cj3*x4097))+(((-1.0)*x4085*x4098))+(((-1.0)*cj4*r21*x4087)));
evalcond[3]=((((-1.0)*gconst2*x4091))+(((-1.0)*x4086*x4089))+((sj3*x4099))+((sj3*x4100))+(((-1.0)*x4087*x4088))+(((-1.0)*gconst2*r01*x4092)));
evalcond[4]=((((0.47)*x4100))+(((-0.444)*cj1))+(((-1.0)*r21*x4096))+pz+(((0.47)*x4099))+(((0.11)*x4098))+(((-0.11)*x4097))+(((0.08)*x4094)));
evalcond[5]=(((gconst2*sj4*x4088))+(((-1.0)*sj4*x4087*x4091))+(((-1.0)*cj4*x4095))+(((-1.0)*r01*x4086*x4093))+x4097+(((-1.0)*cj4*r02*x4092))+(((-1.0)*x4098))+((sj4*x4101)));
evalcond[6]=((((-1.0)*r02*sj4*x4092))+((cj4*r01*x4086))+(((-1.0)*x4088*x4090))+((cj4*gconst1*x4091))+(((-1.0)*x4093*x4095))+(((-1.0)*x4085*x4100))+(((-1.0)*cj0*x4089*x4090))+(((-1.0)*x4085*x4099)));
evalcond[7]=((((0.11)*x4100))+(((-0.08)*gconst2*x4088))+(((-0.08)*x4101))+(((-1.0)*px*x4092))+(((-0.47)*x4098))+(((0.08)*r01*x4086))+(((0.47)*x4097))+(((-1.0)*py*sj0))+((x4091*x4096))+(((0.11)*x4099))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4102=((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))));
IkReal x4109 = x4102;
if(IKabs(x4109)==0){
continue;
}
IkReal x4103=pow(x4109,-0.5);
if((x4102) < -0.00001)
continue;
IkReal x4104=IKabs(IKsqrt(x4102));
IkReal x4105=((12.5)*x4103);
CheckValue<IkReal> x4110=IKPowWithIntegerCheck(x4104,-1);
if(!x4110.valid){
continue;
}
IkReal x4106=x4110.value;
IkReal x4107=(r22*x4106);
if((((1.0)+(((-1.0)*(x4107*x4107))))) < -0.00001)
continue;
IkReal x4108=IKsqrt(((1.0)+(((-1.0)*(x4107*x4107)))));
CheckValue<IkReal> x4111 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4111.valid){
continue;
}
if( (x4107) < -1-IKFAST_SINCOS_THRESH || (x4107) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x4111.value)))+(((-1.0)*(IKasin(x4107)))));
IkReal gconst4=(((rxp1_2*x4105*x4108))+((rxp0_2*x4105*x4107)));
IkReal gconst5=((((-1.0)*rxp0_2*x4105*x4108))+((rxp1_2*x4105*x4107)));
if((((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(IKabs(IKsqrt(((((156.25)*(rxp0_2*rxp0_2)))+(((156.25)*(rxp1_2*rxp1_2)))))),-1);
if(!x4112.valid){
continue;
}
if( ((r22*(x4112.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4112.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x4112.value))))+(x4113.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4114=((0.08)*cj3);
IkReal x4115=((1.0)*cj3);
CheckValue<IkReal> x4116=IKPowWithIntegerCheck(IKsign((((gconst4*rxp0_2))+((r22*(((((-0.08)*(gconst4*gconst4)))+(((-0.08)*(gconst5*gconst5)))))))+((gconst5*rxp1_2)))),-1);
if(!x4116.valid){
continue;
}
CheckValue<IkReal> x4117 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r10*x4114))+(((-1.0)*py*x4115))+((gconst4*r11*x4114)))),IkReal((((gconst4*r01*x4114))+(((-1.0)*px*x4115))+(((-1.0)*gconst5*r00*x4114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4117.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4116.value)))+(x4117.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4118=IKsin(j0);
IkReal x4119=IKcos(j0);
IkReal x4120=((1.0)*r11);
IkReal x4121=((1.0)*cj4);
IkReal x4122=(gconst4*x4118);
IkReal x4123=(sj4*x4118);
IkReal x4124=(gconst5*x4119);
IkReal x4125=(gconst5*x4118);
IkReal x4126=((1.0)*x4119);
IkReal x4127=(r12*x4126);
IkReal x4128=(gconst4*r11*x4119);
evalcond[0]=((((-1.0)*gconst4*r10*x4126))+cj3+(((-1.0)*x4120*x4124))+((r00*x4122))+((r01*x4125)));
evalcond[1]=((((-1.0)*py*x4126))+((px*x4118))+(((0.08)*r00*x4125))+(((-0.08)*r10*x4124))+(((0.08)*x4128))+(((-0.08)*r01*x4122)));
evalcond[2]=((((-1.0)*gconst4*sj4*x4119*x4120))+(((-1.0)*r12*x4119*x4121))+((r10*sj4*x4124))+((cj4*r02*x4118))+(((-1.0)*gconst5*r00*x4123))+((r01*sj4*x4122)));
evalcond[3]=(sj3+(((-1.0)*sj4*x4127))+((r02*x4123))+(((-1.0)*r10*x4121*x4124))+((cj4*x4128))+((cj4*r00*x4125))+(((-1.0)*r01*x4121*x4122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4129=(gconst4*r20);
IkReal x4130=(gconst5*r21);
IkReal x4131=(r22*sj4);
IkReal x4132=(cj4*gconst5*r20);
IkReal x4133=((1.0)*cj4*gconst4*r21);
IkReal x4134=(x4129+x4130);
IkReal x4135=((((-1.0)*sj3))+x4134);
IkReal x4136=(sj3+x4134);
IkReal x4137=(x4131+x4132);
IkReal x4138=x4102;
IkReal x4139=(cj3+x4137+(((-1.0)*x4133)));
IkReal x4148 = x4138;
if(IKabs(x4148)==0){
continue;
}
IkReal x4140=pow(x4148,-0.5);
if((x4138) < -0.00001)
continue;
IkReal x4141=IKabs(IKsqrt(x4138));
IkReal x4142=(x4137+(((-1.0)*x4133))+(((-1.0)*cj3)));
IkReal x4143=((12.5)*x4140);
CheckValue<IkReal> x4149=IKPowWithIntegerCheck(x4141,-1);
if(!x4149.valid){
continue;
}
IkReal x4144=x4149.value;
IkReal x4145=(r22*x4144);
if((((1.0)+(((-1.0)*(x4145*x4145))))) < -0.00001)
continue;
IkReal x4146=IKsqrt(((1.0)+(((-1.0)*(x4145*x4145)))));
if( (x4145) < -1-IKFAST_SINCOS_THRESH || (x4145) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
IkReal x4147=((((1.0)*(IKasin(x4145))))+(((1.0)*(x4150.value))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4147)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4147)));
IkReal gconst4=(((rxp1_2*x4143*x4146))+((rxp0_2*x4143*x4145)));
IkReal gconst5=(((rxp1_2*x4143*x4145))+(((-1.0)*rxp0_2*x4143*x4146)));
IkReal gconst254=x4135;
IkReal gconst255=x4136;
IkReal gconst256=x4139;
IkReal gconst257=x4142;
IkReal gconst258=x4135;
IkReal gconst259=x4136;
IkReal gconst260=x4139;
IkReal gconst261=x4142;
IkReal gconst262=x4136;
IkReal gconst263=x4135;
IkReal gconst264=x4142;
IkReal gconst265=x4139;
IkReal gconst266=x4136;
IkReal gconst267=x4135;
IkReal gconst268=x4142;
IkReal gconst269=x4139;
j1eval[0]=((((0.5)*(IKabs(((((-8.0)*gconst4*gconst5*r20*r21*(cj3*cj3)))+(((8.0)*cj4*gconst4*r21*r22*sj4*(sj3*sj3)))+(((-4.0)*(cj4*cj4)*(gconst4*gconst4)*(r21*r21)*(sj3*sj3)))+(((8.0)*cj3*cj4*r20*r21*sj3*(gconst4*gconst4)))+(((-8.0)*cj3*gconst5*r21*r22*sj3*sj4))+(((-8.0)*cj3*gconst4*r20*r22*sj3*sj4))+(((-4.0)*(r22*r22)*(sj3*sj3)*(sj4*sj4)))+(((8.0)*gconst4*gconst5*r20*r21*(cj4*cj4)*(sj3*sj3)))+(((-8.0)*cj4*gconst5*r20*r22*sj4*(sj3*sj3)))+(((-4.0)*(cj3*cj3)*(gconst4*gconst4)*(r20*r20)))+(((8.0)*cj3*cj4*gconst4*gconst5*sj3*(r21*r21)))+(((-8.0)*cj3*cj4*r20*r21*sj3*(gconst5*gconst5)))+(((-4.0)*(cj4*cj4)*(gconst5*gconst5)*(r20*r20)*(sj3*sj3)))+(((-8.0)*cj3*cj4*gconst4*gconst5*sj3*(r20*r20)))+(((-4.0)*(cj3*cj3)*(gconst5*gconst5)*(r21*r21))))))))+(IKabs(((((-16.0)*(r22*r22)*(sj3*sj3)*(sj4*sj4)))+(((32.0)*cj4*gconst4*r21*r22*sj4*(sj3*sj3)))+(((-32.0)*cj3*cj4*r20*r21*sj3*(gconst5*gconst5)))+(((-32.0)*cj3*gconst4*r20*r22*sj3*sj4))+(((-32.0)*cj3*gconst5*r21*r22*sj3*sj4))+(((-32.0)*gconst4*gconst5*r20*r21*(cj3*cj3)))+(((-16.0)*(cj3*cj3)*(gconst5*gconst5)*(r21*r21)))+(((32.0)*cj3*cj4*gconst4*gconst5*sj3*(r21*r21)))+(((32.0)*cj3*cj4*r20*r21*sj3*(gconst4*gconst4)))+(((-16.0)*(cj4*cj4)*(gconst4*gconst4)*(r21*r21)*(sj3*sj3)))+(((-32.0)*cj3*cj4*gconst4*gconst5*sj3*(r20*r20)))+(((-16.0)*(cj4*cj4)*(gconst5*gconst5)*(r20*r20)*(sj3*sj3)))+(((32.0)*gconst4*gconst5*r20*r21*(cj4*cj4)*(sj3*sj3)))+(((-16.0)*(cj3*cj3)*(gconst4*gconst4)*(r20*r20)))+(((-32.0)*cj4*gconst5*r20*r22*sj4*(sj3*sj3))))))+(((0.5)*(IKabs(((((-48.0)*cj4*gconst5*r20*r22*sj4*(sj3*sj3)))+(((48.0)*cj4*gconst4*r21*r22*sj4*(sj3*sj3)))+(((-48.0)*gconst4*gconst5*r20*r21*(cj3*cj3)))+(((-24.0)*(cj4*cj4)*(gconst4*gconst4)*(r21*r21)*(sj3*sj3)))+(((-24.0)*(cj3*cj3)*(gconst5*gconst5)*(r21*r21)))+(((-24.0)*(cj4*cj4)*(gconst5*gconst5)*(r20*r20)*(sj3*sj3)))+(((-48.0)*cj3*gconst5*r21*r22*sj3*sj4))+(((-48.0)*cj3*cj4*r20*r21*sj3*(gconst5*gconst5)))+(((48.0)*gconst4*gconst5*r20*r21*(cj4*cj4)*(sj3*sj3)))+(((-48.0)*cj3*gconst4*r20*r22*sj3*sj4))+(((48.0)*cj3*cj4*gconst4*gconst5*sj3*(r21*r21)))+(((-24.0)*(r22*r22)*(sj3*sj3)*(sj4*sj4)))+(((-24.0)*(cj3*cj3)*(gconst4*gconst4)*(r20*r20)))+(((-48.0)*cj3*cj4*gconst4*gconst5*sj3*(r20*r20)))+(((48.0)*cj3*cj4*r20*r21*sj3*(gconst4*gconst4)))))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x4151=cj3*cj3;
IkReal x4152=sj3*sj3;
IkReal x4153=(gconst256*gconst263);
IkReal x4154=(gconst259*gconst260);
IkReal x4155=(gconst258*gconst269);
IkReal x4156=(gconst254*gconst265);
IkReal x4157=(gconst263*gconst264);
IkReal x4158=(gconst257*gconst268);
IkReal x4159=((1.0)*gconst261);
IkReal x4160=(gconst257*gconst262);
IkReal x4161=(gconst254*gconst267);
IkReal x4162=(gconst257*gconst266);
IkReal x4163=(gconst261*gconst266);
IkReal x4164=(gconst267*gconst268);
IkReal x4165=(gconst262*gconst265);
IkReal x4166=(gconst258*gconst261);
IkReal x4167=(gconst254*gconst257);
IkReal x4168=(gconst257*gconst260);
IkReal x4169=(gconst255*gconst264);
IkReal x4170=((1.0)*gconst269);
IkReal x4171=(gconst255*gconst266);
IkReal x4172=(gconst266*gconst269);
IkReal x4173=(gconst255*gconst256);
IkReal x4174=(gconst259*gconst268);
IkReal x4175=(gconst260*gconst267);
IkReal x4176=((16.0)*x4152);
IkReal x4177=((16.0)*cj3*sj3);
IkReal x4178=((1.0)*x4174);
IkReal x4179=((16.0)*x4151);
op[0]=((((-1.0)*gconst266*x4165*x4170))+(((-1.0)*x4157*x4164))+((x4157*x4172))+((x4164*x4165)));
op[1]=0;
op[2]=((((-1.0)*gconst265*gconst268*x4176))+(((-1.0)*gconst265*gconst266*x4177))+(((-1.0)*x4157*x4175))+(((-1.0)*gconst263*gconst266*x4179))+(((-1.0)*x4164*x4169))+((x4169*x4172))+(((-1.0)*x4153*x4164))+((x4155*x4157))+(((-1.0)*gconst266*x4159*x4165))+(((-1.0)*gconst266*x4156*x4170))+((x4165*x4175))+((x4165*x4174))+((x4157*x4163))+((x4156*x4164))+(((-1.0)*x4157*x4178))+((x4153*x4172))+(((-1.0)*x4155*x4165))+((gconst262*gconst267*x4158))+(((-1.0)*gconst266*x4160*x4170))+(((-1.0)*gconst263*gconst268*x4177)));
op[3]=0;
op[4]=(((x4158*x4161))+(((-1.0)*x4171*x4179))+(((-1.0)*gconst258*gconst265*x4177))+((x4160*x4175))+(((-1.0)*x4162*x4177))+(((-1.0)*gconst258*x4159*x4165))+((x4153*x4155))+(((-1.0)*gconst258*gconst263*x4179))+((x4154*x4165))+(((-1.0)*gconst266*x4159*x4160))+(((-1.0)*x4158*x4176))+(((-1.0)*gconst255*gconst268*x4177))+(((-1.0)*x4169*x4178))+(((-1.0)*x4169*x4175))+(((-1.0)*x4153*x4175))+((x4153*x4163))+(((-1.0)*x4155*x4156))+(((-1.0)*x4153*x4178))+((x4157*x4166))+(((-1.0)*gconst254*x4162*x4170))+((gconst256*gconst269*x4171))+(((-1.0)*gconst266*x4156*x4159))+(((-1.0)*x4154*x4157))+((x4155*x4169))+(((-1.0)*gconst260*gconst263*x4177))+((gconst259*gconst262*x4158))+(((-1.0)*x4155*x4160))+(((-1.0)*x4164*x4173))+((x4156*x4175))+((x4156*x4174))+(((-1.0)*gconst260*gconst265*x4176))+((x4163*x4169)));
op[5]=0;
op[6]=(((gconst254*gconst259*x4158))+(((-1.0)*gconst258*x4156*x4159))+(((-1.0)*gconst258*x4159*x4160))+(((-1.0)*x4168*x4176))+(((-1.0)*x4173*x4175))+((x4166*x4169))+((x4163*x4173))+((x4154*x4160))+((x4155*x4173))+((x4153*x4166))+(((-1.0)*gconst254*x4159*x4162))+(((-1.0)*x4173*x4178))+(((-1.0)*x4154*x4169))+((x4161*x4168))+(((-1.0)*gconst257*gconst258*x4177))+(((-1.0)*gconst255*gconst258*x4179))+(((-1.0)*gconst255*gconst260*x4177))+(((-1.0)*x4155*x4167))+(((-1.0)*x4153*x4154))+((x4154*x4156)));
op[7]=0;
op[8]=((((-1.0)*x4154*x4173))+(((-1.0)*gconst258*x4159*x4167))+((x4154*x4167))+((x4166*x4173)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4180=x4102;
IkReal x4188 = x4180;
if(IKabs(x4188)==0){
continue;
}
IkReal x4181=pow(x4188,-0.5);
if((x4180) < -0.00001)
continue;
IkReal x4182=IKabs(IKsqrt(x4180));
IkReal x4183=((12.5)*x4181);
CheckValue<IkReal> x4189=IKPowWithIntegerCheck(x4182,-1);
if(!x4189.valid){
continue;
}
IkReal x4184=x4189.value;
IkReal x4185=(r22*x4184);
if((((1.0)+(((-1.0)*(x4185*x4185))))) < -0.00001)
continue;
IkReal x4186=IKsqrt(((1.0)+(((-1.0)*(x4185*x4185)))));
if( (x4185) < -1-IKFAST_SINCOS_THRESH || (x4185) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4190 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4190.valid){
continue;
}
IkReal x4187=((((1.0)*(IKasin(x4185))))+(((1.0)*(x4190.value))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4187)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4187)));
IkReal gconst4=(((rxp1_2*x4183*x4186))+((rxp0_2*x4183*x4185)));
IkReal gconst5=((((-1.0)*rxp0_2*x4183*x4186))+((rxp1_2*x4183*x4185)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4191=x4102;
IkReal x4199 = x4191;
if(IKabs(x4199)==0){
continue;
}
IkReal x4192=pow(x4199,-0.5);
if((x4191) < -0.00001)
continue;
IkReal x4193=IKabs(IKsqrt(x4191));
IkReal x4194=((12.5)*x4192);
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(x4193,-1);
if(!x4200.valid){
continue;
}
IkReal x4195=x4200.value;
IkReal x4196=(r22*x4195);
if((((1.0)+(((-1.0)*(x4196*x4196))))) < -0.00001)
continue;
IkReal x4197=IKsqrt(((1.0)+(((-1.0)*(x4196*x4196)))));
if( (x4196) < -1-IKFAST_SINCOS_THRESH || (x4196) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4201 = IKatan2WithCheck(IkReal(((12.5)*rxp1_2)),IkReal(((12.5)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4201.valid){
continue;
}
IkReal x4198=((((1.0)*(IKasin(x4196))))+(((1.0)*(x4201.value))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4198)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4198)));
IkReal gconst4=(((rxp1_2*x4194*x4197))+((rxp0_2*x4194*x4196)));
IkReal gconst5=(((rxp1_2*x4194*x4196))+(((-1.0)*rxp0_2*x4194*x4197)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4202=(gconst4*r20);
IkReal x4203=((1.0)*sj1);
IkReal x4204=(cj1*gconst5);
IkReal x4205=(r20*sj4);
IkReal x4206=((1.0)*cj4*r22);
IkReal x4207=(gconst4*r21*sj4);
if( IKabs((((x4204*x4205))+(((-1.0)*cj1*x4206))+(((-1.0)*x4202*x4203))+(((-1.0)*cj1*x4207))+(((-1.0)*gconst5*r21*x4203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst5*sj1*x4205))+(((-1.0)*cj4*r22*x4203))+((cj1*x4202))+((r21*x4204))+(((-1.0)*x4203*x4207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4204*x4205))+(((-1.0)*cj1*x4206))+(((-1.0)*x4202*x4203))+(((-1.0)*cj1*x4207))+(((-1.0)*gconst5*r21*x4203))))+IKsqr((((gconst5*sj1*x4205))+(((-1.0)*cj4*r22*x4203))+((cj1*x4202))+((r21*x4204))+(((-1.0)*x4203*x4207))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4204*x4205))+(((-1.0)*cj1*x4206))+(((-1.0)*x4202*x4203))+(((-1.0)*cj1*x4207))+(((-1.0)*gconst5*r21*x4203))), (((gconst5*sj1*x4205))+(((-1.0)*cj4*r22*x4203))+((cj1*x4202))+((r21*x4204))+(((-1.0)*x4203*x4207))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4208=IKcos(j2);
IkReal x4209=IKsin(j2);
IkReal x4210=((0.08)*gconst4);
IkReal x4211=(r11*sj0);
IkReal x4212=(gconst5*sj4);
IkReal x4213=((1.0)*cj0);
IkReal x4214=(cj0*r00);
IkReal x4215=(gconst4*sj4);
IkReal x4216=((1.0)*sj0);
IkReal x4217=(r10*sj0);
IkReal x4218=((0.08)*gconst5);
IkReal x4219=(sj1*x4208);
IkReal x4220=(cj1*x4209);
IkReal x4221=(cj1*x4208);
IkReal x4222=(sj1*x4209);
IkReal x4223=(x4219+x4220);
evalcond[0]=((((-1.0)*x4221))+x4222+((gconst4*r20))+((gconst5*r21)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*x4212))+x4223+((r21*x4215)));
evalcond[2]=((((-1.0)*gconst4*r00*x4213))+(((-1.0)*gconst5*x4211))+(((-1.0)*gconst4*r10*x4216))+x4223+(((-1.0)*gconst5*r01*x4213)));
evalcond[3]=((((-0.11)*x4221))+(((-1.0)*r21*x4210))+(((-0.444)*cj1))+(((0.11)*x4222))+pz+(((0.47)*x4220))+((r20*x4218))+(((0.47)*x4219)));
evalcond[4]=((((-1.0)*cj4*r12*x4216))+(((-1.0)*x4211*x4215))+(((-1.0)*x4222))+(((-1.0)*cj4*r02*x4213))+(((-1.0)*r01*x4213*x4215))+((x4212*x4214))+((x4212*x4217))+x4221);
evalcond[5]=((((0.11)*x4219))+(((-0.47)*x4222))+((cj0*r01*x4210))+(((-1.0)*px*x4213))+(((0.11)*x4220))+((x4210*x4211))+(((-1.0)*x4217*x4218))+(((-1.0)*py*x4216))+(((-1.0)*x4214*x4218))+(((0.47)*x4221))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4224=(cj1*r20);
IkReal x4225=(gconst5*sj4);
IkReal x4226=(r21*sj1);
IkReal x4227=((1.0)*gconst4);
IkReal x4228=(cj1*r21);
IkReal x4229=(r20*sj1);
IkReal x4230=((1.0)*cj4*r22);
if( IKabs((((x4224*x4225))+(((-1.0)*sj4*x4227*x4228))+((gconst5*x4226))+((gconst4*x4229))+(((-1.0)*cj1*x4230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x4226*x4227))+(((-1.0)*x4224*x4227))+(((-1.0)*gconst5*x4228))+((x4225*x4229))+(((-1.0)*sj1*x4230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4224*x4225))+(((-1.0)*sj4*x4227*x4228))+((gconst5*x4226))+((gconst4*x4229))+(((-1.0)*cj1*x4230))))+IKsqr(((((-1.0)*sj4*x4226*x4227))+(((-1.0)*x4224*x4227))+(((-1.0)*gconst5*x4228))+((x4225*x4229))+(((-1.0)*sj1*x4230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4224*x4225))+(((-1.0)*sj4*x4227*x4228))+((gconst5*x4226))+((gconst4*x4229))+(((-1.0)*cj1*x4230))), ((((-1.0)*sj4*x4226*x4227))+(((-1.0)*x4224*x4227))+(((-1.0)*gconst5*x4228))+((x4225*x4229))+(((-1.0)*sj1*x4230))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4231=IKcos(j2);
IkReal x4232=IKsin(j2);
IkReal x4233=((0.08)*gconst4);
IkReal x4234=(r11*sj0);
IkReal x4235=(gconst5*sj4);
IkReal x4236=((1.0)*cj0);
IkReal x4237=(cj0*r00);
IkReal x4238=(gconst4*sj4);
IkReal x4239=((1.0)*sj0);
IkReal x4240=(r10*sj0);
IkReal x4241=((0.08)*gconst5);
IkReal x4242=(cj1*x4231);
IkReal x4243=(cj1*x4232);
IkReal x4244=(sj1*x4231);
IkReal x4245=(sj1*x4232);
IkReal x4246=((1.0)*x4245);
evalcond[0]=((((-1.0)*x4246))+x4242+((gconst4*r20))+((gconst5*r21)));
evalcond[1]=(((cj4*r22))+x4244+x4243+((r21*x4238))+(((-1.0)*r20*x4235)));
evalcond[2]=((((-1.0)*gconst5*r01*x4236))+(((-1.0)*gconst5*x4234))+(((-1.0)*gconst4*r10*x4239))+(((-1.0)*x4243))+(((-1.0)*x4244))+(((-1.0)*gconst4*r00*x4236)));
evalcond[3]=(((r20*x4241))+(((-0.444)*cj1))+(((0.11)*x4245))+(((0.47)*x4243))+(((0.47)*x4244))+pz+(((-1.0)*r21*x4233))+(((-0.11)*x4242)));
evalcond[4]=(((x4235*x4237))+(((-1.0)*r01*x4236*x4238))+(((-1.0)*x4234*x4238))+((x4235*x4240))+(((-1.0)*x4246))+(((-1.0)*cj4*r02*x4236))+x4242+(((-1.0)*cj4*r12*x4239)));
evalcond[5]=((((-1.0)*x4240*x4241))+(((-1.0)*px*x4236))+(((-0.47)*x4245))+(((0.11)*x4243))+(((0.11)*x4244))+(((0.47)*x4242))+(((-1.0)*py*x4239))+(((-1.0)*x4237*x4241))+((x4233*x4234))+((cj0*r01*x4233))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4247=((1.0)*r22);
IkReal x4248=(cj1*cj4);
IkReal x4249=(sj1*sj4);
IkReal x4250=(gconst5*r20);
IkReal x4251=(cj4*sj1);
IkReal x4252=(cj1*sj4);
IkReal x4253=((1.0)*gconst4*r21);
if( IKabs((((gconst4*r21*x4251))+(((-1.0)*x4247*x4248))+(((-1.0)*x4247*x4249))+(((-1.0)*x4252*x4253))+(((-1.0)*x4250*x4251))+((x4250*x4252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x4252))+((x4249*x4250))+(((-1.0)*x4247*x4251))+((x4248*x4250))+(((-1.0)*x4249*x4253))+(((-1.0)*x4248*x4253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst4*r21*x4251))+(((-1.0)*x4247*x4248))+(((-1.0)*x4247*x4249))+(((-1.0)*x4252*x4253))+(((-1.0)*x4250*x4251))+((x4250*x4252))))+IKsqr((((r22*x4252))+((x4249*x4250))+(((-1.0)*x4247*x4251))+((x4248*x4250))+(((-1.0)*x4249*x4253))+(((-1.0)*x4248*x4253))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((gconst4*r21*x4251))+(((-1.0)*x4247*x4248))+(((-1.0)*x4247*x4249))+(((-1.0)*x4252*x4253))+(((-1.0)*x4250*x4251))+((x4250*x4252))), (((r22*x4252))+((x4249*x4250))+(((-1.0)*x4247*x4251))+((x4248*x4250))+(((-1.0)*x4249*x4253))+(((-1.0)*x4248*x4253))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4254=IKsin(j2);
IkReal x4255=IKcos(j2);
IkReal x4256=((1.0)*sj4);
IkReal x4257=(gconst5*r20);
IkReal x4258=((1.0)*cj4);
IkReal x4259=(cj0*r02);
IkReal x4260=(gconst5*sj4);
IkReal x4261=(cj0*r00);
IkReal x4262=(gconst4*r21);
IkReal x4263=(r12*sj0);
IkReal x4264=(r10*sj0);
IkReal x4265=((0.08)*gconst5);
IkReal x4266=(sj1*x4255);
IkReal x4267=(cj1*x4254);
IkReal x4268=(cj1*x4255);
IkReal x4269=(gconst4*r11*sj0);
IkReal x4270=(sj1*x4254);
IkReal x4271=(cj0*gconst4*r01);
IkReal x4272=(x4266+x4267);
evalcond[0]=(((cj4*r22))+x4272+(((-1.0)*x4256*x4257))+((sj4*x4262)));
evalcond[1]=(((r22*sj4))+(((-1.0)*x4258*x4262))+x4270+((cj4*x4257))+(((-1.0)*x4268)));
evalcond[2]=((((0.08)*x4257))+(((-0.444)*cj1))+(((0.11)*x4270))+pz+(((-0.08)*x4262))+(((-0.11)*x4268))+(((0.47)*x4266))+(((0.47)*x4267)));
evalcond[3]=(((cj4*x4271))+((cj4*x4269))+(((-1.0)*x4256*x4263))+(((-1.0)*gconst5*x4258*x4264))+(((-1.0)*gconst5*x4258*x4261))+x4272+(((-1.0)*x4256*x4259)));
evalcond[4]=((((-1.0)*x4256*x4271))+(((-1.0)*x4256*x4269))+(((-1.0)*x4258*x4259))+(((-1.0)*x4258*x4263))+x4268+((x4260*x4261))+((x4260*x4264))+(((-1.0)*x4270)));
evalcond[5]=((((0.11)*x4266))+(((0.11)*x4267))+(((0.08)*x4271))+(((-1.0)*x4264*x4265))+(((0.08)*x4269))+(((-1.0)*x4261*x4265))+(((-1.0)*py*sj0))+(((0.47)*x4268))+(((-0.47)*x4270))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4273=(cj1*cj4);
IkReal x4274=(gconst4*r21);
IkReal x4275=(cj4*sj1);
IkReal x4276=(sj1*sj4);
IkReal x4277=(gconst5*r20);
IkReal x4278=((1.0)*cj3*r22);
IkReal x4279=(cj1*cj3*sj4);
CheckValue<IkReal> x4280=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4280.valid){
continue;
}
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal(((((-1.0)*x4273*x4278))+((x4275*x4277))+((x4277*x4279))+(((-1.0)*x4274*x4279))+(((-1.0)*x4274*x4275))+((r22*x4276)))),IkReal(((((-1.0)*cj3*x4274*x4276))+(((-1.0)*x4273*x4277))+(((-1.0)*x4275*x4278))+((cj3*x4276*x4277))+(((-1.0)*cj1*r22*sj4))+((x4273*x4274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4280.value)))+(x4281.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4282=IKcos(j2);
IkReal x4283=IKsin(j2);
IkReal x4284=((1.0)*cj3);
IkReal x4285=(gconst5*r00);
IkReal x4286=(gconst5*r20);
IkReal x4287=((1.0)*sj4);
IkReal x4288=((1.0)*gconst4);
IkReal x4289=(gconst4*r21);
IkReal x4290=(r12*sj0);
IkReal x4291=(r10*sj0);
IkReal x4292=((1.0)*cj0);
IkReal x4293=((1.0)*sj0);
IkReal x4294=((1.0)*cj4);
IkReal x4295=(cj1*x4282);
IkReal x4296=(cj4*x4292);
IkReal x4297=(gconst4*r11*sj0);
IkReal x4298=(sj1*x4283);
IkReal x4299=(cj1*x4283);
IkReal x4300=(sj1*x4282);
IkReal x4301=(cj0*gconst4*r01);
evalcond[0]=(((gconst4*r20))+(((-1.0)*sj3*x4295))+((gconst5*r21))+((sj3*x4298)));
evalcond[1]=((((-1.0)*x4286*x4287))+((cj4*r22))+x4299+x4300+((sj4*x4289)));
evalcond[2]=(((r22*sj4))+((cj3*x4295))+(((-1.0)*x4284*x4298))+((cj4*x4286))+(((-1.0)*cj4*r21*x4288)));
evalcond[3]=((((-1.0)*x4288*x4291))+(((-1.0)*gconst5*r11*x4293))+(((-1.0)*gconst5*r01*x4292))+((sj3*x4299))+(((-1.0)*cj0*r00*x4288))+((sj3*x4300)));
evalcond[4]=((((0.47)*x4299))+(((-0.11)*x4295))+(((-0.444)*cj1))+(((0.47)*x4300))+(((0.08)*x4286))+(((-0.08)*x4289))+pz+(((0.11)*x4298)));
evalcond[5]=((((-1.0)*x4290*x4294))+((cj0*sj4*x4285))+(((-1.0)*x4298))+(((-1.0)*x4287*x4301))+x4295+(((-1.0)*x4287*x4297))+(((-1.0)*r02*x4296))+((gconst5*sj4*x4291)));
evalcond[6]=(((cj4*x4297))+(((-1.0)*x4284*x4299))+(((-1.0)*x4284*x4300))+(((-1.0)*x4285*x4296))+(((-1.0)*cj0*r02*x4287))+((cj4*x4301))+(((-1.0)*gconst5*x4291*x4294))+(((-1.0)*x4287*x4290)));
evalcond[7]=((((0.47)*x4295))+(((0.11)*x4300))+(((-0.08)*gconst5*x4291))+(((-1.0)*py*x4293))+(((-0.08)*cj0*x4285))+(((0.08)*x4301))+(((-0.47)*x4298))+(((0.11)*x4299))+(((-1.0)*px*x4292))+(((0.444)*sj1))+(((0.08)*x4297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4302=(sj3*sj4);
IkReal x4303=(gconst5*r20);
IkReal x4304=(cj1*gconst4);
IkReal x4305=((1.0)*r21);
IkReal x4306=((1.0)*gconst4*sj1);
IkReal x4307=((1.0)*cj4*r22*sj3);
CheckValue<IkReal> x4308=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4308.valid){
continue;
}
CheckValue<IkReal> x4309 = IKatan2WithCheck(IkReal((((cj1*x4302*x4303))+(((-1.0)*cj1*x4307))+(((-1.0)*r20*x4306))+(((-1.0)*gconst5*sj1*x4305))+(((-1.0)*x4302*x4304*x4305)))),IkReal((((cj1*gconst5*r21))+((sj1*x4302*x4303))+(((-1.0)*gconst4*sj1*x4302*x4305))+(((-1.0)*sj1*x4307))+((r20*x4304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4309.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4308.value)))+(x4309.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4310=IKcos(j2);
IkReal x4311=IKsin(j2);
IkReal x4312=((1.0)*cj3);
IkReal x4313=(gconst5*r00);
IkReal x4314=(gconst5*r20);
IkReal x4315=((1.0)*sj4);
IkReal x4316=((1.0)*gconst4);
IkReal x4317=(gconst4*r21);
IkReal x4318=(r12*sj0);
IkReal x4319=(r10*sj0);
IkReal x4320=((1.0)*cj0);
IkReal x4321=((1.0)*sj0);
IkReal x4322=((1.0)*cj4);
IkReal x4323=(cj1*x4310);
IkReal x4324=(cj4*x4320);
IkReal x4325=(gconst4*r11*sj0);
IkReal x4326=(sj1*x4311);
IkReal x4327=(cj1*x4311);
IkReal x4328=(sj1*x4310);
IkReal x4329=(cj0*gconst4*r01);
evalcond[0]=(((sj3*x4326))+((gconst4*r20))+((gconst5*r21))+(((-1.0)*sj3*x4323)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4314*x4315))+x4328+x4327+((sj4*x4317)));
evalcond[2]=(((r22*sj4))+(((-1.0)*cj4*r21*x4316))+(((-1.0)*x4312*x4326))+((cj3*x4323))+((cj4*x4314)));
evalcond[3]=(((sj3*x4328))+((sj3*x4327))+(((-1.0)*x4316*x4319))+(((-1.0)*cj0*r00*x4316))+(((-1.0)*gconst5*r01*x4320))+(((-1.0)*gconst5*r11*x4321)));
evalcond[4]=((((-0.08)*x4317))+(((-0.444)*cj1))+(((0.08)*x4314))+(((0.11)*x4326))+pz+(((0.47)*x4327))+(((0.47)*x4328))+(((-0.11)*x4323)));
evalcond[5]=(((gconst5*sj4*x4319))+(((-1.0)*r02*x4324))+(((-1.0)*x4315*x4325))+(((-1.0)*x4315*x4329))+(((-1.0)*x4326))+((cj0*sj4*x4313))+x4323+(((-1.0)*x4318*x4322)));
evalcond[6]=(((cj4*x4325))+((cj4*x4329))+(((-1.0)*x4315*x4318))+(((-1.0)*x4313*x4324))+(((-1.0)*x4312*x4328))+(((-1.0)*x4312*x4327))+(((-1.0)*cj0*r02*x4315))+(((-1.0)*gconst5*x4319*x4322)));
evalcond[7]=((((0.08)*x4329))+(((0.08)*x4325))+(((-0.08)*cj0*x4313))+(((-1.0)*py*x4321))+(((-1.0)*px*x4320))+(((-0.47)*x4326))+(((0.11)*x4327))+(((0.11)*x4328))+(((0.47)*x4323))+(((-0.08)*gconst5*x4319))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4330=((1.0)*sj3);
IkReal x4331=((0.08)*sj4);
IkReal x4332=((0.08)*cj5*sj3);
IkReal x4333=((0.08)*sj3*sj5);
CheckValue<IkReal> x4334 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4332))+(((-1.0)*py*x4330))+((r11*x4333)))),IkReal(((((-1.0)*r00*x4332))+((r01*x4333))+(((-1.0)*px*x4330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4334.valid){
continue;
}
CheckValue<IkReal> x4335=IKPowWithIntegerCheck(IKsign((((cj5*r21*x4331))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5))+((rxp2_2*sj4))+((r20*sj5*x4331)))),-1);
if(!x4335.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4334.value)+(((1.5707963267949)*(x4335.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4336=IKsin(j0);
IkReal x4337=IKcos(j0);
IkReal x4338=(r11*sj5);
IkReal x4339=(cj5*r10);
IkReal x4340=(sj5*x4336);
IkReal x4341=((0.08)*x4337);
IkReal x4342=(sj4*x4337);
IkReal x4343=(cj5*x4336);
IkReal x4344=((1.0)*x4337);
IkReal x4345=(r02*x4336);
IkReal x4346=(r12*x4344);
evalcond[0]=(((r00*x4340))+cj3+(((-1.0)*r10*sj5*x4344))+((r01*x4343))+(((-1.0)*cj5*r11*x4344)));
evalcond[1]=((((-1.0)*py*x4344))+(((-1.0)*x4339*x4341))+((x4338*x4341))+(((-0.08)*r01*x4340))+(((0.08)*r00*x4343))+((px*x4336)));
evalcond[2]=((((-1.0)*x4338*x4342))+((cj4*x4345))+((x4339*x4342))+(((-1.0)*r00*sj4*x4343))+((r01*sj4*x4340))+(((-1.0)*cj4*x4346)));
evalcond[3]=(((cj4*x4337*x4338))+sj3+(((-1.0)*r12*x4342))+(((-1.0)*cj4*r01*x4340))+((cj4*r00*x4343))+((sj4*x4345))+(((-1.0)*cj4*x4339*x4344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4347=((1.776)*sj3);
IkReal x4348=((1.776)*cj3);
IkReal x4349=(r22*sj4);
IkReal x4350=((0.44)*sj5);
IkReal x4351=((0.32)*sj3);
IkReal x4352=(cj5*r20);
IkReal x4353=(r21*sj5);
IkReal x4354=((1.32)*cj4);
IkReal x4355=((0.96)*sj3);
IkReal x4356=((1.88)*sj4);
IkReal x4357=((5.64)*sj3);
IkReal x4358=(cj4*r22);
IkReal x4359=(cj5*r21);
IkReal x4360=((12.0)*pz);
IkReal x4361=((4.0)*pz);
IkReal x4362=(sj3*x4360);
IkReal x4363=((1.32)*x4359);
IkReal x4364=((1.32)*r20*sj5);
IkReal x4365=(cj3*x4360);
IkReal x4366=((1.32)*x4349);
IkReal x4367=(cj3*x4353);
IkReal x4368=(cj3*x4358);
IkReal x4369=(x4352*x4355);
IkReal x4370=(x4357*x4358);
IkReal x4371=(x4353*x4355);
IkReal x4372=(x4353*x4354);
IkReal x4373=((5.64)*x4368);
IkReal x4374=((0.96)*x4367);
IkReal x4375=(x4352*x4354);
IkReal x4376=((0.96)*cj3*x4352);
IkReal x4377=((5.64)*sj4*x4353);
IkReal x4378=(sj4*x4352*x4357);
IkReal x4379=(sj4*x4353*x4357);
IkReal x4380=((5.64)*sj4*x4367);
IkReal x4381=((5.64)*cj3*sj4*x4352);
IkReal x4382=(x4378+x4362+x4369);
IkReal x4383=(x4380+x4372+x4373+x4374);
IkReal x4384=(x4381+x4376+x4375+x4365+x4366);
IkReal x4385=(x4379+x4370+x4371+x4364+x4363);
j1eval[0]=((IKabs(((((1.88)*x4368))+(((-1.0)*x4348))+(((-1.0)*cj3*x4361))+(((-1.0)*cj3*x4352*x4356))+(((-0.32)*cj3*x4352))+((x4356*x4367))+(((-0.44)*cj4*x4352))+((cj4*r21*x4350))+(((-0.44)*x4349))+(((0.32)*x4367)))))+(IKabs(((((-1.0)*x4348))+x4383+(((-1.0)*x4384)))))+(IKabs((x4382+x4347+(((-1.0)*x4385)))))+(IKabs(((((-1.0)*sj3*x4353*x4356))+((x4351*x4352))+((sj3*x4361))+(((-1.0)*x4351*x4353))+(((-0.44)*x4359))+x4347+((sj3*x4352*x4356))+(((-1.88)*sj3*x4358))+(((-1.0)*r20*x4350)))))+(IKabs((x4383+x4348+(((-1.0)*x4384)))))+(IKabs(((((-1.0)*x4347))+x4382+(((-1.0)*x4385))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4386=((1.776)*sj3);
IkReal x4387=((1.88)*sj4);
IkReal x4388=(cj5*r21);
IkReal x4389=(pz*sj3);
IkReal x4390=(r20*sj5);
IkReal x4391=((5.64)*sj4);
IkReal x4392=((12.0)*x4389);
IkReal x4393=((1.32)*x4388);
IkReal x4394=((1.32)*x4390);
IkReal x4395=((4.0)*x4389);
IkReal x4396=((0.44)*x4388);
IkReal x4397=((0.44)*x4390);
IkReal x4398=(r21*sj3*sj5);
IkReal x4399=(cj4*r22*sj3);
IkReal x4400=(cj5*r20*sj3);
IkReal x4401=((0.96)*x4400);
IkReal x4402=((5.64)*x4399);
IkReal x4403=((0.96)*x4398);
IkReal x4404=((0.32)*x4400);
IkReal x4405=((1.88)*x4399);
IkReal x4406=((0.32)*x4398);
IkReal x4407=(x4391*x4400);
IkReal x4408=(x4391*x4398);
IkReal x4409=(x4387*x4400);
IkReal x4410=(x4387*x4398);
IkReal x4411=(x4409+x4404+x4395);
IkReal x4412=(x4407+x4401+x4392);
IkReal x4413=(x4405+x4406+x4410+x4396+x4397);
IkReal x4414=(x4408+x4402+x4403+x4393+x4394);
op[0]=(x4411+(((-1.0)*x4413))+x4386);
op[1]=0;
op[2]=(x4412+(((-1.0)*x4414))+x4386);
op[3]=0;
op[4]=(x4412+(((-1.0)*x4414))+(((-1.0)*x4386)));
op[5]=0;
op[6]=(x4411+(((-1.0)*x4413))+(((-1.0)*x4386)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4415=((1.776)*cj3);
IkReal x4416=(r22*sj4);
IkReal x4417=(cj5*r20);
IkReal x4418=((0.44)*cj4);
IkReal x4419=((5.64)*sj4);
IkReal x4420=(r21*sj5);
IkReal x4421=((1.32)*cj4);
IkReal x4422=((1.88)*sj4);
IkReal x4423=(cj3*pz);
IkReal x4424=((12.0)*x4423);
IkReal x4425=((1.32)*x4416);
IkReal x4426=((0.44)*x4416);
IkReal x4427=((4.0)*x4423);
IkReal x4428=(cj3*cj4*r22);
IkReal x4429=(cj3*x4420);
IkReal x4430=(x4420*x4421);
IkReal x4431=((5.64)*x4428);
IkReal x4432=((0.96)*x4429);
IkReal x4433=(x4417*x4421);
IkReal x4434=((0.96)*cj3*x4417);
IkReal x4435=((1.88)*x4428);
IkReal x4436=(x4418*x4420);
IkReal x4437=((0.32)*x4429);
IkReal x4438=(x4417*x4418);
IkReal x4439=((0.32)*cj3*x4417);
IkReal x4440=(x4419*x4429);
IkReal x4441=(cj3*x4417*x4419);
IkReal x4442=(x4422*x4429);
IkReal x4443=(cj3*x4417*x4422);
IkReal x4444=(x4435+x4437+x4436+x4442);
IkReal x4445=(x4431+x4430+x4432+x4440);
IkReal x4446=(x4434+x4433+x4441+x4424+x4425);
IkReal x4447=(x4439+x4438+x4443+x4426+x4427);
j1evalpoly[0]=(x4444+x4415+(((-1.0)*x4447))+(((htj1*htj1)*((x4445+x4415+(((-1.0)*x4446))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x4444+(((-1.0)*x4447))+(((-1.0)*x4415))))))+(((htj1*htj1*htj1*htj1)*((x4445+(((-1.0)*x4446))+(((-1.0)*x4415)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4448=((1.0)*sj1);
IkReal x4449=(r20*sj5);
IkReal x4450=(cj1*sj4);
IkReal x4451=(cj5*r20);
IkReal x4452=(cj5*r21);
IkReal x4453=(r21*sj5);
IkReal x4454=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*x4450*x4453))+((x4450*x4451))+(((-1.0)*x4448*x4452))+(((-1.0)*cj1*x4454))+(((-1.0)*x4448*x4449)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x4451))+((cj1*x4449))+((cj1*x4452))+(((-1.0)*sj4*x4448*x4453))+(((-1.0)*cj4*r22*x4448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4450*x4453))+((x4450*x4451))+(((-1.0)*x4448*x4452))+(((-1.0)*cj1*x4454))+(((-1.0)*x4448*x4449))))+IKsqr((((sj1*sj4*x4451))+((cj1*x4449))+((cj1*x4452))+(((-1.0)*sj4*x4448*x4453))+(((-1.0)*cj4*r22*x4448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4450*x4453))+((x4450*x4451))+(((-1.0)*x4448*x4452))+(((-1.0)*cj1*x4454))+(((-1.0)*x4448*x4449))), (((sj1*sj4*x4451))+((cj1*x4449))+((cj1*x4452))+(((-1.0)*sj4*x4448*x4453))+(((-1.0)*cj4*r22*x4448))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4455=IKcos(j2);
IkReal x4456=IKsin(j2);
IkReal x4457=(cj5*sj4);
IkReal x4458=((1.0)*cj0);
IkReal x4459=(cj0*r00);
IkReal x4460=((0.08)*cj5);
IkReal x4461=(r10*sj0);
IkReal x4462=(r01*sj5);
IkReal x4463=((1.0)*sj0);
IkReal x4464=(sj1*x4455);
IkReal x4465=(cj1*x4456);
IkReal x4466=(cj1*x4455);
IkReal x4467=(sj5*x4463);
IkReal x4468=(sj1*x4456);
IkReal x4469=(x4464+x4465);
evalcond[0]=(((cj5*r21))+x4468+(((-1.0)*x4466))+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+x4469+(((-1.0)*r20*x4457)));
evalcond[2]=(x4469+(((-1.0)*cj5*r11*x4463))+(((-1.0)*r00*sj5*x4458))+(((-1.0)*cj5*r01*x4458))+(((-1.0)*sj5*x4461)));
CheckValue<IkReal> x4470=IKPowWithIntegerCheck(cj4,-1);
if(!x4470.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.11)*x4468))+pz+(((-0.08)*r22*sj4*(x4470.value)))+(((-0.11)*x4466))+(((0.47)*x4464))+(((0.47)*x4465)));
evalcond[4]=((((-1.0)*cj4*r12*x4463))+(((-1.0)*sj4*x4458*x4462))+x4466+(((-1.0)*cj4*r02*x4458))+(((-1.0)*x4468))+(((-1.0)*r11*sj4*x4467))+((x4457*x4459))+((x4457*x4461)));
evalcond[5]=((((-1.0)*py*x4463))+(((-0.47)*x4468))+(((0.08)*r11*sj0*sj5))+(((0.08)*cj0*x4462))+(((0.11)*x4464))+(((0.11)*x4465))+(((-1.0)*x4459*x4460))+(((-1.0)*px*x4458))+(((0.47)*x4466))+(((-1.0)*x4460*x4461))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4471=((1.0)*cj1);
IkReal x4472=(cj4*r22);
IkReal x4473=(cj5*r21);
IkReal x4474=((1.0)*sj1);
IkReal x4475=(r20*sj5);
IkReal x4476=(cj5*r20*sj4);
IkReal x4477=(r21*sj4*sj5);
if( IKabs((((sj1*x4475))+((sj1*x4473))+(((-1.0)*x4471*x4477))+(((-1.0)*x4471*x4472))+((cj1*x4476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x4476))+(((-1.0)*x4472*x4474))+(((-1.0)*x4474*x4477))+(((-1.0)*x4471*x4473))+(((-1.0)*x4471*x4475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x4475))+((sj1*x4473))+(((-1.0)*x4471*x4477))+(((-1.0)*x4471*x4472))+((cj1*x4476))))+IKsqr((((sj1*x4476))+(((-1.0)*x4472*x4474))+(((-1.0)*x4474*x4477))+(((-1.0)*x4471*x4473))+(((-1.0)*x4471*x4475))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x4475))+((sj1*x4473))+(((-1.0)*x4471*x4477))+(((-1.0)*x4471*x4472))+((cj1*x4476))), (((sj1*x4476))+(((-1.0)*x4472*x4474))+(((-1.0)*x4474*x4477))+(((-1.0)*x4471*x4473))+(((-1.0)*x4471*x4475))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4478=IKcos(j2);
IkReal x4479=IKsin(j2);
IkReal x4480=(cj5*sj4);
IkReal x4481=((1.0)*cj0);
IkReal x4482=(cj0*r00);
IkReal x4483=((0.08)*cj5);
IkReal x4484=(r10*sj0);
IkReal x4485=(r01*sj5);
IkReal x4486=((1.0)*sj0);
IkReal x4487=(cj1*x4478);
IkReal x4488=(sj5*x4486);
IkReal x4489=(cj1*x4479);
IkReal x4490=(sj1*x4478);
IkReal x4491=(sj1*x4479);
IkReal x4492=((1.0)*x4491);
evalcond[0]=(((cj5*r21))+x4487+((r20*sj5))+(((-1.0)*x4492)));
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+x4489+x4490+(((-1.0)*r20*x4480)));
evalcond[2]=((((-1.0)*x4489))+(((-1.0)*x4490))+(((-1.0)*cj5*r11*x4486))+(((-1.0)*cj5*r01*x4481))+(((-1.0)*sj5*x4484))+(((-1.0)*r00*sj5*x4481)));
CheckValue<IkReal> x4493=IKPowWithIntegerCheck(cj4,-1);
if(!x4493.valid){
continue;
}
evalcond[3]=((((0.11)*x4491))+(((-0.444)*cj1))+(((0.47)*x4489))+(((0.47)*x4490))+(((-0.11)*x4487))+pz+(((-0.08)*r22*sj4*(x4493.value))));
evalcond[4]=((((-1.0)*r11*sj4*x4488))+(((-1.0)*cj4*r12*x4486))+x4487+((x4480*x4484))+((x4480*x4482))+(((-1.0)*cj4*r02*x4481))+(((-1.0)*sj4*x4481*x4485))+(((-1.0)*x4492)));
evalcond[5]=((((-1.0)*px*x4481))+(((0.08)*cj0*x4485))+(((0.11)*x4490))+(((0.47)*x4487))+(((0.08)*r11*sj0*sj5))+(((-0.47)*x4491))+(((-1.0)*py*x4486))+(((-1.0)*x4483*x4484))+(((0.11)*x4489))+(((0.444)*sj1))+(((-1.0)*x4482*x4483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4494=(cj1*cj4);
IkReal x4495=((1.0)*r22);
IkReal x4496=(r21*sj5);
IkReal x4497=(cj1*sj4);
IkReal x4498=(cj5*r20);
IkReal x4499=(cj4*sj1);
IkReal x4500=(sj1*sj4);
if( IKabs(((((-1.0)*x4496*x4499))+(((-1.0)*x4496*x4497))+((r22*x4500))+(((-1.0)*x4494*x4495))+((x4498*x4499))+((x4497*x4498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4498*x4500))+(((-1.0)*x4494*x4498))+(((-1.0)*x4495*x4497))+(((-1.0)*x4495*x4499))+(((-1.0)*x4496*x4500))+((x4494*x4496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4496*x4499))+(((-1.0)*x4496*x4497))+((r22*x4500))+(((-1.0)*x4494*x4495))+((x4498*x4499))+((x4497*x4498))))+IKsqr((((x4498*x4500))+(((-1.0)*x4494*x4498))+(((-1.0)*x4495*x4497))+(((-1.0)*x4495*x4499))+(((-1.0)*x4496*x4500))+((x4494*x4496))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4496*x4499))+(((-1.0)*x4496*x4497))+((r22*x4500))+(((-1.0)*x4494*x4495))+((x4498*x4499))+((x4497*x4498))), (((x4498*x4500))+(((-1.0)*x4494*x4498))+(((-1.0)*x4495*x4497))+(((-1.0)*x4495*x4499))+(((-1.0)*x4496*x4500))+((x4494*x4496))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4501=IKcos(j2);
IkReal x4502=IKsin(j2);
IkReal x4503=((0.08)*cj5);
IkReal x4504=((1.0)*sj4);
IkReal x4505=(cj5*r00);
IkReal x4506=(r10*sj0);
IkReal x4507=(cj5*r20);
IkReal x4508=((1.0)*sj0);
IkReal x4509=(r21*sj5);
IkReal x4510=((1.0)*cj4);
IkReal x4511=(cj1*x4501);
IkReal x4512=(cj1*x4502);
IkReal x4513=(sj1*x4501);
IkReal x4514=(r11*sj0*sj5);
IkReal x4515=(cj0*x4510);
IkReal x4516=(sj1*x4502);
IkReal x4517=(cj0*r01*sj5);
IkReal x4518=((1.0)*x4516);
evalcond[0]=(((cj4*r22))+((sj4*x4509))+x4512+x4513+(((-1.0)*x4504*x4507)));
evalcond[1]=(x4511+((r22*sj4))+((cj4*x4507))+(((-1.0)*x4518))+(((-1.0)*x4509*x4510)));
evalcond[2]=((((-0.08)*x4509))+(((-0.444)*cj1))+(((0.11)*x4516))+(((0.47)*x4513))+(((0.47)*x4512))+(((-0.11)*x4511))+pz+((r20*x4503)));
evalcond[3]=(((cj0*sj4*x4505))+(((-1.0)*cj4*r12*x4508))+(((-1.0)*r02*x4515))+x4511+(((-1.0)*x4504*x4514))+(((-1.0)*x4504*x4517))+((cj5*sj4*x4506))+(((-1.0)*x4518)));
evalcond[4]=((((-1.0)*cj5*x4506*x4510))+(((-1.0)*x4505*x4515))+((cj4*x4514))+((cj4*x4517))+(((-1.0)*x4512))+(((-1.0)*x4513))+(((-1.0)*r12*sj0*x4504))+(((-1.0)*cj0*r02*x4504)));
evalcond[5]=((((-1.0)*cj0*r00*x4503))+(((0.11)*x4513))+(((0.11)*x4512))+(((0.47)*x4511))+(((-1.0)*py*x4508))+(((-1.0)*x4503*x4506))+(((-0.47)*x4516))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((0.08)*x4514))+(((0.08)*x4517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4519=(r21*sj5);
IkReal x4520=(cj1*sj4);
IkReal x4521=(cj5*r20);
IkReal x4522=(sj1*sj4);
IkReal x4523=(cj4*sj1);
IkReal x4524=((1.0)*cj1*cj4);
IkReal x4525=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x4521*x4523))+(((-1.0)*r22*x4522))+(((-1.0)*r22*x4524))+((x4520*x4521))+((x4519*x4523))+(((-1.0)*x4519*x4520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4521*x4522))+(((-1.0)*r22*x4523))+((cj1*cj4*x4521))+((r22*x4520))+(((-1.0)*x4519*x4524))+(((-1.0)*x4519*x4522)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4521*x4523))+(((-1.0)*r22*x4522))+(((-1.0)*r22*x4524))+((x4520*x4521))+((x4519*x4523))+(((-1.0)*x4519*x4520))))+IKsqr((((x4521*x4522))+(((-1.0)*r22*x4523))+((cj1*cj4*x4521))+((r22*x4520))+(((-1.0)*x4519*x4524))+(((-1.0)*x4519*x4522))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4521*x4523))+(((-1.0)*r22*x4522))+(((-1.0)*r22*x4524))+((x4520*x4521))+((x4519*x4523))+(((-1.0)*x4519*x4520))), (((x4521*x4522))+(((-1.0)*r22*x4523))+((cj1*cj4*x4521))+((r22*x4520))+(((-1.0)*x4519*x4524))+(((-1.0)*x4519*x4522))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4526=IKsin(j2);
IkReal x4527=IKcos(j2);
IkReal x4528=((0.08)*cj5);
IkReal x4529=((1.0)*sj4);
IkReal x4530=(cj5*r00);
IkReal x4531=(r10*sj0);
IkReal x4532=(cj5*r20);
IkReal x4533=((1.0)*sj0);
IkReal x4534=(r21*sj5);
IkReal x4535=((1.0)*cj4);
IkReal x4536=(sj1*x4527);
IkReal x4537=(cj1*x4526);
IkReal x4538=(cj1*x4527);
IkReal x4539=(r11*sj0*sj5);
IkReal x4540=(sj1*x4526);
IkReal x4541=(cj0*x4535);
IkReal x4542=(cj0*r01*sj5);
IkReal x4543=(x4536+x4537);
evalcond[0]=(((cj4*r22))+x4543+((sj4*x4534))+(((-1.0)*x4529*x4532)));
evalcond[1]=((((-1.0)*x4538))+((cj4*x4532))+x4540+((r22*sj4))+(((-1.0)*x4534*x4535)));
evalcond[2]=((((0.11)*x4540))+(((-0.444)*cj1))+(((-0.08)*x4534))+(((0.47)*x4536))+(((0.47)*x4537))+pz+((r20*x4528))+(((-0.11)*x4538)));
evalcond[3]=(((cj4*x4539))+(((-1.0)*cj0*r02*x4529))+x4543+(((-1.0)*r12*sj0*x4529))+(((-1.0)*x4530*x4541))+(((-1.0)*cj5*x4531*x4535))+((cj4*x4542)));
evalcond[4]=((((-1.0)*r02*x4541))+x4538+(((-1.0)*x4540))+((cj0*sj4*x4530))+(((-1.0)*x4529*x4542))+(((-1.0)*cj4*r12*x4533))+(((-1.0)*x4529*x4539))+((cj5*sj4*x4531)));
evalcond[5]=((((0.08)*x4542))+(((0.08)*x4539))+(((-1.0)*x4528*x4531))+(((0.47)*x4538))+(((-0.47)*x4540))+(((0.11)*x4536))+(((0.11)*x4537))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((-1.0)*cj0*r00*x4528))+(((-1.0)*py*x4533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4544=(cj1*cj4);
IkReal x4545=(r21*sj5);
IkReal x4546=((1.0)*cj3);
IkReal x4547=(sj1*sj4);
IkReal x4548=(cj4*sj1);
IkReal x4549=(cj1*sj4);
IkReal x4550=(cj5*r20);
IkReal x4551=(cj3*x4550);
CheckValue<IkReal> x4552=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4552.valid){
continue;
}
CheckValue<IkReal> x4553 = IKatan2WithCheck(IkReal((((r22*x4547))+(((-1.0)*r22*x4544*x4546))+(((-1.0)*x4545*x4548))+(((-1.0)*x4545*x4546*x4549))+((x4548*x4550))+((x4549*x4551)))),IkReal(((((-1.0)*r22*x4549))+((x4547*x4551))+((x4544*x4545))+(((-1.0)*x4544*x4550))+(((-1.0)*x4545*x4546*x4547))+(((-1.0)*r22*x4546*x4548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4553.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4552.value)))+(x4553.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4554=IKcos(j2);
IkReal x4555=IKsin(j2);
IkReal x4556=((1.0)*cj4);
IkReal x4557=(cj0*r02);
IkReal x4558=((0.08)*cj5);
IkReal x4559=(r10*sj0);
IkReal x4560=((1.0)*sj5);
IkReal x4561=((1.0)*cj3);
IkReal x4562=(sj0*sj4);
IkReal x4563=(cj0*r01);
IkReal x4564=((0.08)*sj5);
IkReal x4565=((1.0)*cj5);
IkReal x4566=(cj0*r00);
IkReal x4567=(r11*sj0);
IkReal x4568=(r21*sj5);
IkReal x4569=(cj4*sj5);
IkReal x4570=(cj1*x4554);
IkReal x4571=(sj1*x4555);
IkReal x4572=(cj1*x4555);
IkReal x4573=(sj1*x4554);
IkReal x4574=(cj5*x4566);
evalcond[0]=((((-1.0)*sj3*x4570))+((cj5*r21))+((sj3*x4571))+((r20*sj5)));
evalcond[1]=(((cj4*r22))+((sj4*x4568))+x4572+x4573+(((-1.0)*r20*sj4*x4565)));
evalcond[2]=((((-1.0)*x4556*x4568))+((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*x4561*x4571))+((cj3*x4570)));
evalcond[3]=((((-1.0)*x4559*x4560))+(((-1.0)*x4560*x4566))+((sj3*x4573))+((sj3*x4572))+(((-1.0)*x4563*x4565))+(((-1.0)*x4565*x4567)));
evalcond[4]=((((-1.0)*r21*x4564))+(((-0.444)*cj1))+(((0.11)*x4571))+(((-0.11)*x4570))+pz+(((0.47)*x4573))+(((0.47)*x4572))+((r20*x4558)));
evalcond[5]=((((-1.0)*r12*sj0*x4556))+(((-1.0)*x4556*x4557))+x4570+((sj4*x4574))+(((-1.0)*r11*x4560*x4562))+(((-1.0)*sj4*x4560*x4563))+((cj5*sj4*x4559))+(((-1.0)*x4571)));
evalcond[6]=(((x4567*x4569))+(((-1.0)*cj5*x4556*x4559))+(((-1.0)*r12*x4562))+(((-1.0)*sj4*x4557))+(((-1.0)*x4561*x4573))+(((-1.0)*x4561*x4572))+((x4563*x4569))+(((-1.0)*x4556*x4574)));
evalcond[7]=((((-0.47)*x4571))+(((0.11)*x4573))+(((0.11)*x4572))+((x4564*x4567))+(((-1.0)*py*sj0))+(((-1.0)*x4558*x4566))+(((0.47)*x4570))+(((-1.0)*x4558*x4559))+(((0.444)*sj1))+(((-1.0)*cj0*px))+((x4563*x4564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4575=((1.0)*sj1);
IkReal x4576=(r20*sj5);
IkReal x4577=(cj5*r21);
IkReal x4578=(r21*sj5);
IkReal x4579=(cj5*r20);
IkReal x4580=(sj3*sj4);
IkReal x4581=(cj1*x4580);
IkReal x4582=(cj4*r22*sj3);
CheckValue<IkReal> x4583=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4583.valid){
continue;
}
CheckValue<IkReal> x4584 = IKatan2WithCheck(IkReal(((((-1.0)*x4578*x4581))+(((-1.0)*x4575*x4577))+(((-1.0)*x4575*x4576))+((x4579*x4581))+(((-1.0)*cj1*x4582)))),IkReal(((((-1.0)*x4575*x4582))+(((-1.0)*x4575*x4578*x4580))+((cj1*x4576))+((cj1*x4577))+((sj1*x4579*x4580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4584.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4583.value)))+(x4584.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4585=IKcos(j2);
IkReal x4586=IKsin(j2);
IkReal x4587=((1.0)*cj4);
IkReal x4588=(cj0*r02);
IkReal x4589=((0.08)*cj5);
IkReal x4590=(r10*sj0);
IkReal x4591=((1.0)*sj5);
IkReal x4592=((1.0)*cj3);
IkReal x4593=(sj0*sj4);
IkReal x4594=(cj0*r01);
IkReal x4595=((0.08)*sj5);
IkReal x4596=((1.0)*cj5);
IkReal x4597=(cj0*r00);
IkReal x4598=(r11*sj0);
IkReal x4599=(r21*sj5);
IkReal x4600=(cj4*sj5);
IkReal x4601=(cj1*x4585);
IkReal x4602=(sj1*x4586);
IkReal x4603=(cj1*x4586);
IkReal x4604=(sj1*x4585);
IkReal x4605=(cj5*x4597);
evalcond[0]=(((cj5*r21))+((sj3*x4602))+(((-1.0)*sj3*x4601))+((r20*sj5)));
evalcond[1]=(((cj4*r22))+((sj4*x4599))+x4604+x4603+(((-1.0)*r20*sj4*x4596)));
evalcond[2]=(((r22*sj4))+(((-1.0)*x4592*x4602))+(((-1.0)*x4587*x4599))+((cj4*cj5*r20))+((cj3*x4601)));
evalcond[3]=((((-1.0)*x4596*x4598))+((sj3*x4604))+((sj3*x4603))+(((-1.0)*x4591*x4597))+(((-1.0)*x4594*x4596))+(((-1.0)*x4590*x4591)));
evalcond[4]=((((-0.444)*cj1))+(((0.11)*x4602))+(((0.47)*x4603))+(((0.47)*x4604))+pz+((r20*x4589))+(((-0.11)*x4601))+(((-1.0)*r21*x4595)));
evalcond[5]=(((cj5*sj4*x4590))+(((-1.0)*x4602))+(((-1.0)*r12*sj0*x4587))+x4601+(((-1.0)*r11*x4591*x4593))+(((-1.0)*sj4*x4591*x4594))+(((-1.0)*x4587*x4588))+((sj4*x4605)));
evalcond[6]=((((-1.0)*r12*x4593))+((x4594*x4600))+(((-1.0)*x4592*x4603))+(((-1.0)*x4592*x4604))+((x4598*x4600))+(((-1.0)*x4587*x4605))+(((-1.0)*cj5*x4587*x4590))+(((-1.0)*sj4*x4588)));
evalcond[7]=(((x4595*x4598))+(((-1.0)*x4589*x4597))+(((-1.0)*x4589*x4590))+(((-0.47)*x4602))+(((0.11)*x4603))+(((0.11)*x4604))+(((0.47)*x4601))+(((-1.0)*py*sj0))+(((0.444)*sj1))+(((-1.0)*cj0*px))+((x4594*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4606=(cj3*sj4);
IkReal x4607=((1.0)*sj5);
IkReal x4608=((1.0)*cj3*cj4);
CheckValue<IkReal> x4609 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4608))+(((-1.0)*r11*x4606*x4607))+((cj5*r10*x4606)))),IkReal((((cj5*r00*x4606))+(((-1.0)*r02*x4608))+(((-1.0)*r01*x4606*x4607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4609.valid){
continue;
}
CheckValue<IkReal> x4610=IKPowWithIntegerCheck(IKsign((((r22*sj4))+(((-1.0)*cj4*r21*x4607))+((cj4*cj5*r20)))),-1);
if(!x4610.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4609.value)+(((1.5707963267949)*(x4610.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4611=IKsin(j0);
IkReal x4612=IKcos(j0);
IkReal x4613=(r11*sj5);
IkReal x4614=(cj5*r10);
IkReal x4615=(sj5*x4611);
IkReal x4616=((0.08)*x4612);
IkReal x4617=(sj4*x4612);
IkReal x4618=(cj5*x4611);
IkReal x4619=((1.0)*x4612);
IkReal x4620=(r02*x4611);
IkReal x4621=(r12*x4619);
evalcond[0]=(cj3+((r00*x4615))+((r01*x4618))+(((-1.0)*cj5*r11*x4619))+(((-1.0)*r10*sj5*x4619)));
evalcond[1]=((((0.08)*r00*x4618))+(((-1.0)*py*x4619))+((px*x4611))+(((-1.0)*x4614*x4616))+((x4613*x4616))+(((-0.08)*r01*x4615)));
evalcond[2]=((((-1.0)*x4613*x4617))+((r01*sj4*x4615))+((x4614*x4617))+((cj4*x4620))+(((-1.0)*r00*sj4*x4618))+(((-1.0)*cj4*x4621)));
evalcond[3]=((((-1.0)*cj4*r01*x4615))+sj3+((cj4*r00*x4618))+((cj4*x4612*x4613))+((sj4*x4620))+(((-1.0)*cj4*x4614*x4619))+(((-1.0)*r12*x4617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4622=((1.776)*sj3);
IkReal x4623=((1.776)*cj3);
IkReal x4624=(r22*sj4);
IkReal x4625=((0.44)*sj5);
IkReal x4626=((0.32)*sj3);
IkReal x4627=(cj5*r20);
IkReal x4628=(r21*sj5);
IkReal x4629=((1.32)*cj4);
IkReal x4630=((0.96)*sj3);
IkReal x4631=((1.88)*sj4);
IkReal x4632=((5.64)*sj3);
IkReal x4633=(cj4*r22);
IkReal x4634=(cj5*r21);
IkReal x4635=((12.0)*pz);
IkReal x4636=((4.0)*pz);
IkReal x4637=(sj3*x4635);
IkReal x4638=((1.32)*x4634);
IkReal x4639=((1.32)*r20*sj5);
IkReal x4640=(cj3*x4635);
IkReal x4641=((1.32)*x4624);
IkReal x4642=(cj3*x4628);
IkReal x4643=(cj3*x4633);
IkReal x4644=(x4627*x4630);
IkReal x4645=(x4632*x4633);
IkReal x4646=(x4628*x4630);
IkReal x4647=(x4628*x4629);
IkReal x4648=((5.64)*x4643);
IkReal x4649=((0.96)*x4642);
IkReal x4650=(x4627*x4629);
IkReal x4651=((0.96)*cj3*x4627);
IkReal x4652=((5.64)*sj4*x4628);
IkReal x4653=(sj4*x4627*x4632);
IkReal x4654=(sj4*x4628*x4632);
IkReal x4655=((5.64)*sj4*x4642);
IkReal x4656=((5.64)*cj3*sj4*x4627);
IkReal x4657=(x4637+x4644+x4653);
IkReal x4658=(x4648+x4649+x4647+x4655);
IkReal x4659=(x4640+x4641+x4656+x4651+x4650);
IkReal x4660=(x4639+x4638+x4646+x4645+x4654);
j1eval[0]=((IKabs(((((-0.44)*x4634))+((sj3*x4627*x4631))+(((-1.0)*x4626*x4628))+x4622+(((-1.0)*r20*x4625))+((sj3*x4636))+((x4626*x4627))+(((-1.88)*sj3*x4633))+(((-1.0)*sj3*x4628*x4631)))))+(IKabs((x4657+(((-1.0)*x4660))+(((-1.0)*x4622)))))+(IKabs(((((-1.0)*x4659))+x4658+x4623)))+(IKabs(((((-1.0)*x4659))+x4658+(((-1.0)*x4623)))))+(IKabs((x4657+x4622+(((-1.0)*x4660)))))+(IKabs(((((-0.44)*cj4*x4627))+((cj4*r21*x4625))+((x4631*x4642))+(((-0.44)*x4624))+(((0.32)*x4642))+(((-1.0)*cj3*x4636))+(((-1.0)*cj3*x4627*x4631))+(((1.88)*x4643))+(((-0.32)*cj3*x4627))+(((-1.0)*x4623))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4661=((1.776)*sj3);
IkReal x4662=((1.88)*sj4);
IkReal x4663=(cj5*r21);
IkReal x4664=(pz*sj3);
IkReal x4665=(r20*sj5);
IkReal x4666=((5.64)*sj4);
IkReal x4667=((12.0)*x4664);
IkReal x4668=((1.32)*x4663);
IkReal x4669=((1.32)*x4665);
IkReal x4670=((4.0)*x4664);
IkReal x4671=((0.44)*x4663);
IkReal x4672=((0.44)*x4665);
IkReal x4673=(r21*sj3*sj5);
IkReal x4674=(cj4*r22*sj3);
IkReal x4675=(cj5*r20*sj3);
IkReal x4676=((0.96)*x4675);
IkReal x4677=((5.64)*x4674);
IkReal x4678=((0.96)*x4673);
IkReal x4679=((0.32)*x4675);
IkReal x4680=((1.88)*x4674);
IkReal x4681=((0.32)*x4673);
IkReal x4682=(x4666*x4675);
IkReal x4683=(x4666*x4673);
IkReal x4684=(x4662*x4675);
IkReal x4685=(x4662*x4673);
IkReal x4686=(x4679+x4670+x4684);
IkReal x4687=(x4667+x4676+x4682);
IkReal x4688=(x4672+x4671+x4685+x4680+x4681);
IkReal x4689=(x4668+x4669+x4678+x4677+x4683);
op[0]=(x4661+x4686+(((-1.0)*x4688)));
op[1]=0;
op[2]=(x4661+x4687+(((-1.0)*x4689)));
op[3]=0;
op[4]=(x4687+(((-1.0)*x4661))+(((-1.0)*x4689)));
op[5]=0;
op[6]=(x4686+(((-1.0)*x4661))+(((-1.0)*x4688)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4690=((1.776)*cj3);
IkReal x4691=(r22*sj4);
IkReal x4692=(cj5*r20);
IkReal x4693=((0.44)*cj4);
IkReal x4694=((5.64)*sj4);
IkReal x4695=(r21*sj5);
IkReal x4696=((1.32)*cj4);
IkReal x4697=((1.88)*sj4);
IkReal x4698=(cj3*pz);
IkReal x4699=((12.0)*x4698);
IkReal x4700=((1.32)*x4691);
IkReal x4701=((0.44)*x4691);
IkReal x4702=((4.0)*x4698);
IkReal x4703=(cj3*cj4*r22);
IkReal x4704=(cj3*x4695);
IkReal x4705=(x4695*x4696);
IkReal x4706=((5.64)*x4703);
IkReal x4707=((0.96)*x4704);
IkReal x4708=(x4692*x4696);
IkReal x4709=((0.96)*cj3*x4692);
IkReal x4710=((1.88)*x4703);
IkReal x4711=(x4693*x4695);
IkReal x4712=((0.32)*x4704);
IkReal x4713=(x4692*x4693);
IkReal x4714=((0.32)*cj3*x4692);
IkReal x4715=(x4694*x4704);
IkReal x4716=(cj3*x4692*x4694);
IkReal x4717=(x4697*x4704);
IkReal x4718=(cj3*x4692*x4697);
IkReal x4719=(x4717+x4710+x4711+x4712);
IkReal x4720=(x4715+x4707+x4706+x4705);
IkReal x4721=(x4699+x4716+x4700+x4709+x4708);
IkReal x4722=(x4714+x4713+x4718+x4702+x4701);
j1evalpoly[0]=(x4690+(((-1.0)*x4722))+x4719+(((htj1*htj1)*((x4690+(((-1.0)*x4721))+x4720))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x4722))+x4719+(((-1.0)*x4690))))))+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x4721))+x4720+(((-1.0)*x4690)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4723=((1.0)*sj1);
IkReal x4724=(r20*sj5);
IkReal x4725=(cj1*sj4);
IkReal x4726=(cj5*r20);
IkReal x4727=(cj5*r21);
IkReal x4728=(r21*sj5);
IkReal x4729=((1.0)*cj4*r22);
if( IKabs((((x4725*x4726))+(((-1.0)*x4723*x4727))+(((-1.0)*x4723*x4724))+(((-1.0)*cj1*x4729))+(((-1.0)*x4725*x4728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*sj4*x4726))+(((-1.0)*cj4*r22*x4723))+(((-1.0)*sj4*x4723*x4728))+((cj1*x4724))+((cj1*x4727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4725*x4726))+(((-1.0)*x4723*x4727))+(((-1.0)*x4723*x4724))+(((-1.0)*cj1*x4729))+(((-1.0)*x4725*x4728))))+IKsqr((((sj1*sj4*x4726))+(((-1.0)*cj4*r22*x4723))+(((-1.0)*sj4*x4723*x4728))+((cj1*x4724))+((cj1*x4727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4725*x4726))+(((-1.0)*x4723*x4727))+(((-1.0)*x4723*x4724))+(((-1.0)*cj1*x4729))+(((-1.0)*x4725*x4728))), (((sj1*sj4*x4726))+(((-1.0)*cj4*r22*x4723))+(((-1.0)*sj4*x4723*x4728))+((cj1*x4724))+((cj1*x4727))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4730=IKcos(j2);
IkReal x4731=IKsin(j2);
IkReal x4732=(cj5*sj4);
IkReal x4733=((1.0)*cj0);
IkReal x4734=(cj0*r00);
IkReal x4735=((0.08)*cj5);
IkReal x4736=(r10*sj0);
IkReal x4737=(r01*sj5);
IkReal x4738=((1.0)*sj0);
IkReal x4739=(sj1*x4730);
IkReal x4740=(cj1*x4731);
IkReal x4741=(cj1*x4730);
IkReal x4742=(sj5*x4738);
IkReal x4743=(sj1*x4731);
IkReal x4744=(x4740+x4739);
evalcond[0]=(((cj5*r21))+x4743+((r20*sj5))+(((-1.0)*x4741)));
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+x4744+(((-1.0)*r20*x4732)));
evalcond[2]=((((-1.0)*cj5*r11*x4738))+(((-1.0)*r00*sj5*x4733))+x4744+(((-1.0)*sj5*x4736))+(((-1.0)*cj5*r01*x4733)));
CheckValue<IkReal> x4745=IKPowWithIntegerCheck(cj4,-1);
if(!x4745.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((-0.11)*x4741))+pz+(((0.47)*x4740))+(((-0.08)*r22*sj4*(x4745.value)))+(((0.47)*x4739))+(((0.11)*x4743)));
evalcond[4]=((((-1.0)*r11*sj4*x4742))+x4741+((x4732*x4734))+((x4732*x4736))+(((-1.0)*cj4*r12*x4738))+(((-1.0)*cj4*r02*x4733))+(((-1.0)*sj4*x4733*x4737))+(((-1.0)*x4743)));
evalcond[5]=((((-1.0)*py*x4738))+(((-1.0)*x4734*x4735))+(((-1.0)*x4735*x4736))+(((0.11)*x4739))+(((0.08)*r11*sj0*sj5))+(((0.08)*cj0*x4737))+(((-1.0)*px*x4733))+(((0.47)*x4741))+(((0.11)*x4740))+(((-0.47)*x4743))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4746=((1.0)*cj1);
IkReal x4747=(cj4*r22);
IkReal x4748=(cj5*r21);
IkReal x4749=((1.0)*sj1);
IkReal x4750=(r20*sj5);
IkReal x4751=(cj5*r20*sj4);
IkReal x4752=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x4746*x4747))+(((-1.0)*x4746*x4752))+((cj1*x4751))+((sj1*x4750))+((sj1*x4748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4749*x4752))+(((-1.0)*x4746*x4748))+(((-1.0)*x4746*x4750))+(((-1.0)*x4747*x4749))+((sj1*x4751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4746*x4747))+(((-1.0)*x4746*x4752))+((cj1*x4751))+((sj1*x4750))+((sj1*x4748))))+IKsqr(((((-1.0)*x4749*x4752))+(((-1.0)*x4746*x4748))+(((-1.0)*x4746*x4750))+(((-1.0)*x4747*x4749))+((sj1*x4751))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4746*x4747))+(((-1.0)*x4746*x4752))+((cj1*x4751))+((sj1*x4750))+((sj1*x4748))), ((((-1.0)*x4749*x4752))+(((-1.0)*x4746*x4748))+(((-1.0)*x4746*x4750))+(((-1.0)*x4747*x4749))+((sj1*x4751))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4753=IKcos(j2);
IkReal x4754=IKsin(j2);
IkReal x4755=(cj5*sj4);
IkReal x4756=((1.0)*cj0);
IkReal x4757=(cj0*r00);
IkReal x4758=((0.08)*cj5);
IkReal x4759=(r10*sj0);
IkReal x4760=(r01*sj5);
IkReal x4761=((1.0)*sj0);
IkReal x4762=(cj1*x4753);
IkReal x4763=(sj5*x4761);
IkReal x4764=(cj1*x4754);
IkReal x4765=(sj1*x4753);
IkReal x4766=(sj1*x4754);
IkReal x4767=((1.0)*x4766);
evalcond[0]=((((-1.0)*x4767))+((cj5*r21))+x4762+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+x4765+x4764+(((-1.0)*r20*x4755)));
evalcond[2]=((((-1.0)*x4764))+(((-1.0)*x4765))+(((-1.0)*cj5*r11*x4761))+(((-1.0)*r00*sj5*x4756))+(((-1.0)*sj5*x4759))+(((-1.0)*cj5*r01*x4756)));
CheckValue<IkReal> x4768=IKPowWithIntegerCheck(cj4,-1);
if(!x4768.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+(((0.47)*x4764))+(((0.47)*x4765))+(((-0.11)*x4762))+pz+(((-0.08)*r22*sj4*(x4768.value)))+(((0.11)*x4766)));
evalcond[4]=((((-1.0)*x4767))+(((-1.0)*sj4*x4756*x4760))+(((-1.0)*cj4*r12*x4761))+((x4755*x4757))+((x4755*x4759))+x4762+(((-1.0)*cj4*r02*x4756))+(((-1.0)*r11*sj4*x4763)));
evalcond[5]=((((0.47)*x4762))+(((0.08)*r11*sj0*sj5))+(((-0.47)*x4766))+(((0.08)*cj0*x4760))+(((-1.0)*px*x4756))+(((-1.0)*x4757*x4758))+(((-1.0)*x4758*x4759))+(((-1.0)*py*x4761))+(((0.444)*sj1))+(((0.11)*x4764))+(((0.11)*x4765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4769=(cj1*cj4);
IkReal x4770=((1.0)*r22);
IkReal x4771=(r21*sj5);
IkReal x4772=(cj1*sj4);
IkReal x4773=(cj5*r20);
IkReal x4774=(cj4*sj1);
IkReal x4775=(sj1*sj4);
if( IKabs(((((-1.0)*x4769*x4770))+((x4772*x4773))+(((-1.0)*x4771*x4772))+(((-1.0)*x4771*x4774))+((x4773*x4774))+((r22*x4775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4769*x4771))+(((-1.0)*x4771*x4775))+(((-1.0)*x4770*x4774))+(((-1.0)*x4770*x4772))+(((-1.0)*x4769*x4773))+((x4773*x4775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4769*x4770))+((x4772*x4773))+(((-1.0)*x4771*x4772))+(((-1.0)*x4771*x4774))+((x4773*x4774))+((r22*x4775))))+IKsqr((((x4769*x4771))+(((-1.0)*x4771*x4775))+(((-1.0)*x4770*x4774))+(((-1.0)*x4770*x4772))+(((-1.0)*x4769*x4773))+((x4773*x4775))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4769*x4770))+((x4772*x4773))+(((-1.0)*x4771*x4772))+(((-1.0)*x4771*x4774))+((x4773*x4774))+((r22*x4775))), (((x4769*x4771))+(((-1.0)*x4771*x4775))+(((-1.0)*x4770*x4774))+(((-1.0)*x4770*x4772))+(((-1.0)*x4769*x4773))+((x4773*x4775))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4776=IKcos(j2);
IkReal x4777=IKsin(j2);
IkReal x4778=((0.08)*cj5);
IkReal x4779=((1.0)*sj4);
IkReal x4780=(cj5*r00);
IkReal x4781=(r10*sj0);
IkReal x4782=(cj5*r20);
IkReal x4783=((1.0)*sj0);
IkReal x4784=(r21*sj5);
IkReal x4785=((1.0)*cj4);
IkReal x4786=(cj1*x4776);
IkReal x4787=(cj1*x4777);
IkReal x4788=(sj1*x4776);
IkReal x4789=(r11*sj0*sj5);
IkReal x4790=(cj0*x4785);
IkReal x4791=(sj1*x4777);
IkReal x4792=(cj0*r01*sj5);
IkReal x4793=((1.0)*x4791);
evalcond[0]=((((-1.0)*x4779*x4782))+((cj4*r22))+((sj4*x4784))+x4788+x4787);
evalcond[1]=(((r22*sj4))+x4786+(((-1.0)*x4793))+((cj4*x4782))+(((-1.0)*x4784*x4785)));
evalcond[2]=((((-0.11)*x4786))+(((-0.444)*cj1))+(((0.47)*x4787))+(((0.47)*x4788))+(((-0.08)*x4784))+((r20*x4778))+(((0.11)*x4791))+pz);
evalcond[3]=((((-1.0)*x4779*x4789))+((cj0*sj4*x4780))+(((-1.0)*r02*x4790))+x4786+(((-1.0)*x4793))+(((-1.0)*x4779*x4792))+((cj5*sj4*x4781))+(((-1.0)*cj4*r12*x4783)));
evalcond[4]=((((-1.0)*cj5*x4781*x4785))+(((-1.0)*cj0*r02*x4779))+((cj4*x4792))+((cj4*x4789))+(((-1.0)*r12*sj0*x4779))+(((-1.0)*x4780*x4790))+(((-1.0)*x4788))+(((-1.0)*x4787)));
evalcond[5]=((((0.47)*x4786))+(((-0.47)*x4791))+(((0.08)*x4789))+(((0.11)*x4787))+(((0.11)*x4788))+(((-1.0)*py*x4783))+(((-1.0)*cj0*r00*x4778))+(((-1.0)*x4778*x4781))+(((0.08)*x4792))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4794=(r21*sj5);
IkReal x4795=(cj1*sj4);
IkReal x4796=(cj5*r20);
IkReal x4797=(sj1*sj4);
IkReal x4798=(cj4*sj1);
IkReal x4799=((1.0)*cj1*cj4);
IkReal x4800=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x4796*x4798))+((x4795*x4796))+(((-1.0)*x4794*x4795))+(((-1.0)*r22*x4799))+(((-1.0)*r22*x4797))+((x4794*x4798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4796*x4797))+((cj1*cj4*x4796))+(((-1.0)*x4794*x4799))+(((-1.0)*x4794*x4797))+(((-1.0)*r22*x4798))+((r22*x4795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4796*x4798))+((x4795*x4796))+(((-1.0)*x4794*x4795))+(((-1.0)*r22*x4799))+(((-1.0)*r22*x4797))+((x4794*x4798))))+IKsqr((((x4796*x4797))+((cj1*cj4*x4796))+(((-1.0)*x4794*x4799))+(((-1.0)*x4794*x4797))+(((-1.0)*r22*x4798))+((r22*x4795))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4796*x4798))+((x4795*x4796))+(((-1.0)*x4794*x4795))+(((-1.0)*r22*x4799))+(((-1.0)*r22*x4797))+((x4794*x4798))), (((x4796*x4797))+((cj1*cj4*x4796))+(((-1.0)*x4794*x4799))+(((-1.0)*x4794*x4797))+(((-1.0)*r22*x4798))+((r22*x4795))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4801=IKsin(j2);
IkReal x4802=IKcos(j2);
IkReal x4803=((0.08)*cj5);
IkReal x4804=((1.0)*sj4);
IkReal x4805=(cj5*r00);
IkReal x4806=(r10*sj0);
IkReal x4807=(cj5*r20);
IkReal x4808=((1.0)*sj0);
IkReal x4809=(r21*sj5);
IkReal x4810=((1.0)*cj4);
IkReal x4811=(sj1*x4802);
IkReal x4812=(cj1*x4801);
IkReal x4813=(cj1*x4802);
IkReal x4814=(r11*sj0*sj5);
IkReal x4815=(sj1*x4801);
IkReal x4816=(cj0*x4810);
IkReal x4817=(cj0*r01*sj5);
IkReal x4818=(x4812+x4811);
evalcond[0]=(((cj4*r22))+((sj4*x4809))+(((-1.0)*x4804*x4807))+x4818);
evalcond[1]=((((-1.0)*x4809*x4810))+((r22*sj4))+(((-1.0)*x4813))+((cj4*x4807))+x4815);
evalcond[2]=((((-0.11)*x4813))+(((-0.444)*cj1))+(((0.47)*x4812))+(((0.47)*x4811))+pz+(((0.11)*x4815))+(((-0.08)*x4809))+((r20*x4803)));
evalcond[3]=((((-1.0)*cj5*x4806*x4810))+((cj4*x4814))+((cj4*x4817))+(((-1.0)*cj0*r02*x4804))+(((-1.0)*r12*sj0*x4804))+(((-1.0)*x4805*x4816))+x4818);
evalcond[4]=((((-1.0)*cj4*r12*x4808))+(((-1.0)*x4804*x4817))+(((-1.0)*x4804*x4814))+((cj0*sj4*x4805))+(((-1.0)*x4815))+(((-1.0)*r02*x4816))+((cj5*sj4*x4806))+x4813);
evalcond[5]=((((-1.0)*cj0*r00*x4803))+(((0.08)*x4814))+(((0.08)*x4817))+(((-1.0)*py*x4808))+(((-0.47)*x4815))+(((0.47)*x4813))+(((0.11)*x4812))+(((0.11)*x4811))+(((-1.0)*x4803*x4806))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4819=(cj1*cj4);
IkReal x4820=(r21*sj5);
IkReal x4821=((1.0)*cj3);
IkReal x4822=(sj1*sj4);
IkReal x4823=(cj4*sj1);
IkReal x4824=(cj1*sj4);
IkReal x4825=(cj5*r20);
IkReal x4826=(cj3*x4825);
CheckValue<IkReal> x4827=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4827.valid){
continue;
}
CheckValue<IkReal> x4828 = IKatan2WithCheck(IkReal((((r22*x4822))+((x4823*x4825))+((x4824*x4826))+(((-1.0)*x4820*x4823))+(((-1.0)*x4820*x4821*x4824))+(((-1.0)*r22*x4819*x4821)))),IkReal(((((-1.0)*x4819*x4825))+((x4819*x4820))+((x4822*x4826))+(((-1.0)*r22*x4824))+(((-1.0)*r22*x4821*x4823))+(((-1.0)*x4820*x4821*x4822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4828.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4827.value)))+(x4828.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4829=IKcos(j2);
IkReal x4830=IKsin(j2);
IkReal x4831=((1.0)*cj4);
IkReal x4832=(cj0*r02);
IkReal x4833=((0.08)*cj5);
IkReal x4834=(r10*sj0);
IkReal x4835=((1.0)*sj5);
IkReal x4836=((1.0)*cj3);
IkReal x4837=(sj0*sj4);
IkReal x4838=(cj0*r01);
IkReal x4839=((0.08)*sj5);
IkReal x4840=((1.0)*cj5);
IkReal x4841=(cj0*r00);
IkReal x4842=(r11*sj0);
IkReal x4843=(r21*sj5);
IkReal x4844=(cj4*sj5);
IkReal x4845=(cj1*x4829);
IkReal x4846=(sj1*x4830);
IkReal x4847=(cj1*x4830);
IkReal x4848=(sj1*x4829);
IkReal x4849=(cj5*x4841);
evalcond[0]=(((cj5*r21))+(((-1.0)*sj3*x4845))+((r20*sj5))+((sj3*x4846)));
evalcond[1]=((((-1.0)*r20*sj4*x4840))+((cj4*r22))+((sj4*x4843))+x4848+x4847);
evalcond[2]=((((-1.0)*x4836*x4846))+((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*x4831*x4843))+((cj3*x4845)));
evalcond[3]=((((-1.0)*x4838*x4840))+(((-1.0)*x4834*x4835))+(((-1.0)*x4840*x4842))+(((-1.0)*x4835*x4841))+((sj3*x4848))+((sj3*x4847)));
evalcond[4]=((((-1.0)*r21*x4839))+(((-0.444)*cj1))+(((0.11)*x4846))+pz+((r20*x4833))+(((-0.11)*x4845))+(((0.47)*x4847))+(((0.47)*x4848)));
evalcond[5]=((((-1.0)*x4831*x4832))+((cj5*sj4*x4834))+(((-1.0)*r11*x4835*x4837))+((sj4*x4849))+(((-1.0)*x4846))+x4845+(((-1.0)*sj4*x4835*x4838))+(((-1.0)*r12*sj0*x4831)));
evalcond[6]=((((-1.0)*x4836*x4847))+(((-1.0)*x4836*x4848))+((x4842*x4844))+(((-1.0)*sj4*x4832))+((x4838*x4844))+(((-1.0)*x4831*x4849))+(((-1.0)*cj5*x4831*x4834))+(((-1.0)*r12*x4837)));
evalcond[7]=((((-0.47)*x4846))+(((-1.0)*x4833*x4834))+(((0.11)*x4848))+(((0.11)*x4847))+(((-1.0)*x4833*x4841))+((x4838*x4839))+(((-1.0)*py*sj0))+((x4839*x4842))+(((0.47)*x4845))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4850=((1.0)*sj1);
IkReal x4851=(r20*sj5);
IkReal x4852=(cj5*r21);
IkReal x4853=(r21*sj5);
IkReal x4854=(cj5*r20);
IkReal x4855=(sj3*sj4);
IkReal x4856=(cj1*x4855);
IkReal x4857=(cj4*r22*sj3);
CheckValue<IkReal> x4858=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4858.valid){
continue;
}
CheckValue<IkReal> x4859 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x4857))+(((-1.0)*x4853*x4856))+(((-1.0)*x4850*x4852))+(((-1.0)*x4850*x4851))+((x4854*x4856)))),IkReal(((((-1.0)*x4850*x4853*x4855))+((cj1*x4852))+((cj1*x4851))+((sj1*x4854*x4855))+(((-1.0)*x4850*x4857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4859.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4858.value)))+(x4859.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4860=IKcos(j2);
IkReal x4861=IKsin(j2);
IkReal x4862=((1.0)*cj4);
IkReal x4863=(cj0*r02);
IkReal x4864=((0.08)*cj5);
IkReal x4865=(r10*sj0);
IkReal x4866=((1.0)*sj5);
IkReal x4867=((1.0)*cj3);
IkReal x4868=(sj0*sj4);
IkReal x4869=(cj0*r01);
IkReal x4870=((0.08)*sj5);
IkReal x4871=((1.0)*cj5);
IkReal x4872=(cj0*r00);
IkReal x4873=(r11*sj0);
IkReal x4874=(r21*sj5);
IkReal x4875=(cj4*sj5);
IkReal x4876=(cj1*x4860);
IkReal x4877=(sj1*x4861);
IkReal x4878=(cj1*x4861);
IkReal x4879=(sj1*x4860);
IkReal x4880=(cj5*x4872);
evalcond[0]=(((cj5*r21))+(((-1.0)*sj3*x4876))+((sj3*x4877))+((r20*sj5)));
evalcond[1]=(((cj4*r22))+((sj4*x4874))+(((-1.0)*r20*sj4*x4871))+x4879+x4878);
evalcond[2]=(((cj3*x4876))+((r22*sj4))+(((-1.0)*x4862*x4874))+((cj4*cj5*r20))+(((-1.0)*x4867*x4877)));
evalcond[3]=((((-1.0)*x4869*x4871))+(((-1.0)*x4866*x4872))+(((-1.0)*x4871*x4873))+((sj3*x4879))+((sj3*x4878))+(((-1.0)*x4865*x4866)));
evalcond[4]=((((-0.444)*cj1))+(((-1.0)*r21*x4870))+(((-0.11)*x4876))+((r20*x4864))+pz+(((0.47)*x4878))+(((0.47)*x4879))+(((0.11)*x4877)));
evalcond[5]=((((-1.0)*x4862*x4863))+((cj5*sj4*x4865))+(((-1.0)*r11*x4866*x4868))+(((-1.0)*sj4*x4866*x4869))+((sj4*x4880))+(((-1.0)*x4877))+(((-1.0)*r12*sj0*x4862))+x4876);
evalcond[6]=((((-1.0)*r12*x4868))+((x4869*x4875))+(((-1.0)*sj4*x4863))+(((-1.0)*cj5*x4862*x4865))+((x4873*x4875))+(((-1.0)*x4862*x4880))+(((-1.0)*x4867*x4879))+(((-1.0)*x4867*x4878)));
evalcond[7]=(((x4869*x4870))+(((-0.47)*x4877))+(((-1.0)*x4864*x4865))+(((-1.0)*py*sj0))+(((0.47)*x4876))+((x4870*x4873))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((0.11)*x4878))+(((0.11)*x4879))+(((-1.0)*x4864*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4881=((0.08)*cj3);
IkReal x4882=((1.0)*cj3);
CheckValue<IkReal> x4883 = IKatan2WithCheck(IkReal(((((-1.0)*py*x4882))+((r11*sj5*x4881))+(((-1.0)*cj5*r10*x4881)))),IkReal(((((-1.0)*cj5*r00*x4881))+((r01*sj5*x4881))+(((-1.0)*px*x4882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4883.valid){
continue;
}
CheckValue<IkReal> x4884=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+(((-0.08)*r22))+((rxp0_2*sj5)))),-1);
if(!x4884.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4883.value)+(((1.5707963267949)*(x4884.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4885=IKsin(j0);
IkReal x4886=IKcos(j0);
IkReal x4887=(r11*sj5);
IkReal x4888=(cj5*r10);
IkReal x4889=(sj5*x4885);
IkReal x4890=((0.08)*x4886);
IkReal x4891=(sj4*x4886);
IkReal x4892=(cj5*x4885);
IkReal x4893=((1.0)*x4886);
IkReal x4894=(r02*x4885);
IkReal x4895=(r12*x4893);
evalcond[0]=(cj3+(((-1.0)*r10*sj5*x4893))+(((-1.0)*cj5*r11*x4893))+((r00*x4889))+((r01*x4892)));
evalcond[1]=(((x4887*x4890))+(((-1.0)*py*x4893))+(((0.08)*r00*x4892))+(((-1.0)*x4888*x4890))+(((-0.08)*r01*x4889))+((px*x4885)));
evalcond[2]=((((-1.0)*r00*sj4*x4892))+((x4888*x4891))+((cj4*x4894))+(((-1.0)*x4887*x4891))+((r01*sj4*x4889))+(((-1.0)*cj4*x4895)));
evalcond[3]=(sj3+(((-1.0)*r12*x4891))+((sj4*x4894))+((cj4*x4886*x4887))+(((-1.0)*cj4*r01*x4889))+((cj4*r00*x4892))+(((-1.0)*cj4*x4888*x4893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4896=((1.776)*sj3);
IkReal x4897=((1.776)*cj3);
IkReal x4898=(r22*sj4);
IkReal x4899=((0.44)*sj5);
IkReal x4900=((0.32)*sj3);
IkReal x4901=(cj5*r20);
IkReal x4902=(r21*sj5);
IkReal x4903=((1.32)*cj4);
IkReal x4904=((0.96)*sj3);
IkReal x4905=((1.88)*sj4);
IkReal x4906=((5.64)*sj3);
IkReal x4907=(cj4*r22);
IkReal x4908=(cj5*r21);
IkReal x4909=((12.0)*pz);
IkReal x4910=((4.0)*pz);
IkReal x4911=(sj3*x4909);
IkReal x4912=((1.32)*x4908);
IkReal x4913=((1.32)*r20*sj5);
IkReal x4914=(cj3*x4909);
IkReal x4915=((1.32)*x4898);
IkReal x4916=(cj3*x4902);
IkReal x4917=(cj3*x4907);
IkReal x4918=(x4901*x4904);
IkReal x4919=(x4906*x4907);
IkReal x4920=(x4902*x4904);
IkReal x4921=(x4902*x4903);
IkReal x4922=((5.64)*x4917);
IkReal x4923=((0.96)*x4916);
IkReal x4924=(x4901*x4903);
IkReal x4925=((0.96)*cj3*x4901);
IkReal x4926=((5.64)*sj4*x4902);
IkReal x4927=(sj4*x4901*x4906);
IkReal x4928=(sj4*x4902*x4906);
IkReal x4929=((5.64)*sj4*x4916);
IkReal x4930=((5.64)*cj3*sj4*x4901);
IkReal x4931=(x4927+x4918+x4911);
IkReal x4932=(x4923+x4922+x4921+x4929);
IkReal x4933=(x4930+x4925+x4924+x4914+x4915);
IkReal x4934=(x4920+x4928+x4919+x4912+x4913);
j1eval[0]=((IKabs((x4932+(((-1.0)*x4933))+x4897)))+(IKabs(((((-1.0)*x4897))+((cj4*r21*x4899))+(((-1.0)*cj3*x4910))+(((1.88)*x4917))+(((-0.44)*x4898))+((x4905*x4916))+(((-0.44)*cj4*x4901))+(((-0.32)*cj3*x4901))+(((-1.0)*cj3*x4901*x4905))+(((0.32)*x4916)))))+(IKabs((x4931+(((-1.0)*x4896))+(((-1.0)*x4934)))))+(IKabs((x4932+(((-1.0)*x4897))+(((-1.0)*x4933)))))+(IKabs((x4931+(((-1.0)*x4934))+x4896)))+(IKabs((((sj3*x4901*x4905))+(((-1.0)*r20*x4899))+((x4900*x4901))+(((-1.0)*x4900*x4902))+(((-1.0)*sj3*x4902*x4905))+(((-1.88)*sj3*x4907))+(((-0.44)*x4908))+x4896+((sj3*x4910))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4935=((1.776)*sj3);
IkReal x4936=((1.88)*sj4);
IkReal x4937=(cj5*r21);
IkReal x4938=(pz*sj3);
IkReal x4939=(r20*sj5);
IkReal x4940=((5.64)*sj4);
IkReal x4941=((12.0)*x4938);
IkReal x4942=((1.32)*x4937);
IkReal x4943=((1.32)*x4939);
IkReal x4944=((4.0)*x4938);
IkReal x4945=((0.44)*x4937);
IkReal x4946=((0.44)*x4939);
IkReal x4947=(r21*sj3*sj5);
IkReal x4948=(cj4*r22*sj3);
IkReal x4949=(cj5*r20*sj3);
IkReal x4950=((0.96)*x4949);
IkReal x4951=((5.64)*x4948);
IkReal x4952=((0.96)*x4947);
IkReal x4953=((0.32)*x4949);
IkReal x4954=((1.88)*x4948);
IkReal x4955=((0.32)*x4947);
IkReal x4956=(x4940*x4949);
IkReal x4957=(x4940*x4947);
IkReal x4958=(x4936*x4949);
IkReal x4959=(x4936*x4947);
IkReal x4960=(x4958+x4953+x4944);
IkReal x4961=(x4950+x4956+x4941);
IkReal x4962=(x4959+x4954+x4955+x4945+x4946);
IkReal x4963=(x4952+x4951+x4957+x4943+x4942);
op[0]=(x4935+x4960+(((-1.0)*x4962)));
op[1]=0;
op[2]=(x4935+x4961+(((-1.0)*x4963)));
op[3]=0;
op[4]=(x4961+(((-1.0)*x4963))+(((-1.0)*x4935)));
op[5]=0;
op[6]=(x4960+(((-1.0)*x4962))+(((-1.0)*x4935)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4964=((1.776)*cj3);
IkReal x4965=(r22*sj4);
IkReal x4966=(cj5*r20);
IkReal x4967=((0.44)*cj4);
IkReal x4968=((5.64)*sj4);
IkReal x4969=(r21*sj5);
IkReal x4970=((1.32)*cj4);
IkReal x4971=((1.88)*sj4);
IkReal x4972=(cj3*pz);
IkReal x4973=((12.0)*x4972);
IkReal x4974=((1.32)*x4965);
IkReal x4975=((0.44)*x4965);
IkReal x4976=((4.0)*x4972);
IkReal x4977=(cj3*cj4*r22);
IkReal x4978=(cj3*x4969);
IkReal x4979=(x4969*x4970);
IkReal x4980=((5.64)*x4977);
IkReal x4981=((0.96)*x4978);
IkReal x4982=(x4966*x4970);
IkReal x4983=((0.96)*cj3*x4966);
IkReal x4984=((1.88)*x4977);
IkReal x4985=(x4967*x4969);
IkReal x4986=((0.32)*x4978);
IkReal x4987=(x4966*x4967);
IkReal x4988=((0.32)*cj3*x4966);
IkReal x4989=(x4968*x4978);
IkReal x4990=(cj3*x4966*x4968);
IkReal x4991=(x4971*x4978);
IkReal x4992=(cj3*x4966*x4971);
IkReal x4993=(x4991+x4985+x4984+x4986);
IkReal x4994=(x4981+x4980+x4989+x4979);
IkReal x4995=(x4990+x4983+x4982+x4974+x4973);
IkReal x4996=(x4992+x4987+x4988+x4975+x4976);
j1evalpoly[0]=(x4993+x4964+(((-1.0)*x4996))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x4993+(((-1.0)*x4996))+(((-1.0)*x4964))))))+(((htj1*htj1)*((x4994+x4964+(((-1.0)*x4995))))))+(((htj1*htj1*htj1*htj1)*((x4994+(((-1.0)*x4995))+(((-1.0)*x4964)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4997=((1.0)*sj1);
IkReal x4998=(r20*sj5);
IkReal x4999=(cj1*sj4);
IkReal x5000=(cj5*r20);
IkReal x5001=(cj5*r21);
IkReal x5002=(r21*sj5);
IkReal x5003=((1.0)*cj4*r22);
if( IKabs((((x4999*x5000))+(((-1.0)*x4997*x4998))+(((-1.0)*cj1*x5003))+(((-1.0)*x4999*x5002))+(((-1.0)*x4997*x5001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x4997*x5002))+(((-1.0)*cj4*r22*x4997))+((cj1*x5001))+((cj1*x4998))+((sj1*sj4*x5000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4999*x5000))+(((-1.0)*x4997*x4998))+(((-1.0)*cj1*x5003))+(((-1.0)*x4999*x5002))+(((-1.0)*x4997*x5001))))+IKsqr(((((-1.0)*sj4*x4997*x5002))+(((-1.0)*cj4*r22*x4997))+((cj1*x5001))+((cj1*x4998))+((sj1*sj4*x5000))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x4999*x5000))+(((-1.0)*x4997*x4998))+(((-1.0)*cj1*x5003))+(((-1.0)*x4999*x5002))+(((-1.0)*x4997*x5001))), ((((-1.0)*sj4*x4997*x5002))+(((-1.0)*cj4*r22*x4997))+((cj1*x5001))+((cj1*x4998))+((sj1*sj4*x5000))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5004=IKcos(j2);
IkReal x5005=IKsin(j2);
IkReal x5006=(cj5*sj4);
IkReal x5007=((1.0)*cj0);
IkReal x5008=(cj0*r00);
IkReal x5009=((0.08)*cj5);
IkReal x5010=(r10*sj0);
IkReal x5011=(r01*sj5);
IkReal x5012=((1.0)*sj0);
IkReal x5013=(sj1*x5004);
IkReal x5014=(cj1*x5005);
IkReal x5015=(cj1*x5004);
IkReal x5016=(sj5*x5012);
IkReal x5017=(sj1*x5005);
IkReal x5018=(x5013+x5014);
evalcond[0]=(((cj5*r21))+x5017+(((-1.0)*x5015))+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+(((-1.0)*r20*x5006))+((cj4*r22))+x5018);
evalcond[2]=((((-1.0)*r00*sj5*x5007))+(((-1.0)*cj5*r01*x5007))+(((-1.0)*cj5*r11*x5012))+(((-1.0)*sj5*x5010))+x5018);
CheckValue<IkReal> x5019=IKPowWithIntegerCheck(cj4,-1);
if(!x5019.valid){
continue;
}
evalcond[3]=((((-0.11)*x5015))+(((-0.444)*cj1))+pz+(((-0.08)*r22*sj4*(x5019.value)))+(((0.47)*x5013))+(((0.47)*x5014))+(((0.11)*x5017)));
evalcond[4]=(((x5006*x5010))+(((-1.0)*cj4*r12*x5012))+x5015+(((-1.0)*r11*sj4*x5016))+(((-1.0)*cj4*r02*x5007))+(((-1.0)*x5017))+((x5006*x5008))+(((-1.0)*sj4*x5007*x5011)));
evalcond[5]=((((-1.0)*x5009*x5010))+(((-1.0)*px*x5007))+(((0.08)*r11*sj0*sj5))+(((-1.0)*py*x5012))+(((0.08)*cj0*x5011))+(((0.47)*x5015))+(((-0.47)*x5017))+(((0.11)*x5013))+(((0.11)*x5014))+(((-1.0)*x5008*x5009))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5020=((1.0)*cj1);
IkReal x5021=(cj4*r22);
IkReal x5022=(cj5*r21);
IkReal x5023=((1.0)*sj1);
IkReal x5024=(r20*sj5);
IkReal x5025=(cj5*r20*sj4);
IkReal x5026=(r21*sj4*sj5);
if( IKabs((((cj1*x5025))+((sj1*x5024))+((sj1*x5022))+(((-1.0)*x5020*x5026))+(((-1.0)*x5020*x5021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5021*x5023))+((sj1*x5025))+(((-1.0)*x5023*x5026))+(((-1.0)*x5020*x5024))+(((-1.0)*x5020*x5022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5025))+((sj1*x5024))+((sj1*x5022))+(((-1.0)*x5020*x5026))+(((-1.0)*x5020*x5021))))+IKsqr(((((-1.0)*x5021*x5023))+((sj1*x5025))+(((-1.0)*x5023*x5026))+(((-1.0)*x5020*x5024))+(((-1.0)*x5020*x5022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5025))+((sj1*x5024))+((sj1*x5022))+(((-1.0)*x5020*x5026))+(((-1.0)*x5020*x5021))), ((((-1.0)*x5021*x5023))+((sj1*x5025))+(((-1.0)*x5023*x5026))+(((-1.0)*x5020*x5024))+(((-1.0)*x5020*x5022))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5027=IKcos(j2);
IkReal x5028=IKsin(j2);
IkReal x5029=(cj5*sj4);
IkReal x5030=((1.0)*cj0);
IkReal x5031=(cj0*r00);
IkReal x5032=((0.08)*cj5);
IkReal x5033=(r10*sj0);
IkReal x5034=(r01*sj5);
IkReal x5035=((1.0)*sj0);
IkReal x5036=(cj1*x5027);
IkReal x5037=(sj5*x5035);
IkReal x5038=(cj1*x5028);
IkReal x5039=(sj1*x5027);
IkReal x5040=(sj1*x5028);
IkReal x5041=((1.0)*x5040);
evalcond[0]=(((cj5*r21))+(((-1.0)*x5041))+x5036+((r20*sj5)));
evalcond[1]=(((r21*sj4*sj5))+((cj4*r22))+x5038+x5039+(((-1.0)*r20*x5029)));
evalcond[2]=((((-1.0)*r00*sj5*x5030))+(((-1.0)*sj5*x5033))+(((-1.0)*cj5*r01*x5030))+(((-1.0)*x5038))+(((-1.0)*x5039))+(((-1.0)*cj5*r11*x5035)));
CheckValue<IkReal> x5042=IKPowWithIntegerCheck(cj4,-1);
if(!x5042.valid){
continue;
}
evalcond[3]=((((-0.444)*cj1))+pz+(((-0.11)*x5036))+(((-0.08)*r22*sj4*(x5042.value)))+(((0.11)*x5040))+(((0.47)*x5038))+(((0.47)*x5039)));
evalcond[4]=((((-1.0)*x5041))+x5036+(((-1.0)*cj4*r02*x5030))+(((-1.0)*r11*sj4*x5037))+(((-1.0)*sj4*x5030*x5034))+((x5029*x5033))+((x5029*x5031))+(((-1.0)*cj4*r12*x5035)));
evalcond[5]=((((-1.0)*px*x5030))+(((0.08)*cj0*x5034))+(((0.08)*r11*sj0*sj5))+(((-1.0)*x5031*x5032))+(((-1.0)*x5032*x5033))+(((0.11)*x5038))+(((0.11)*x5039))+(((-1.0)*py*x5035))+(((-0.47)*x5040))+(((0.47)*x5036))+(((0.444)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5043=(cj1*cj4);
IkReal x5044=((1.0)*r22);
IkReal x5045=(r21*sj5);
IkReal x5046=(cj1*sj4);
IkReal x5047=(cj5*r20);
IkReal x5048=(cj4*sj1);
IkReal x5049=(sj1*sj4);
if( IKabs(((((-1.0)*x5043*x5044))+((x5047*x5048))+((x5046*x5047))+((r22*x5049))+(((-1.0)*x5045*x5048))+(((-1.0)*x5045*x5046)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5043*x5045))+((x5047*x5049))+(((-1.0)*x5043*x5047))+(((-1.0)*x5044*x5046))+(((-1.0)*x5044*x5048))+(((-1.0)*x5045*x5049)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5043*x5044))+((x5047*x5048))+((x5046*x5047))+((r22*x5049))+(((-1.0)*x5045*x5048))+(((-1.0)*x5045*x5046))))+IKsqr((((x5043*x5045))+((x5047*x5049))+(((-1.0)*x5043*x5047))+(((-1.0)*x5044*x5046))+(((-1.0)*x5044*x5048))+(((-1.0)*x5045*x5049))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5043*x5044))+((x5047*x5048))+((x5046*x5047))+((r22*x5049))+(((-1.0)*x5045*x5048))+(((-1.0)*x5045*x5046))), (((x5043*x5045))+((x5047*x5049))+(((-1.0)*x5043*x5047))+(((-1.0)*x5044*x5046))+(((-1.0)*x5044*x5048))+(((-1.0)*x5045*x5049))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5050=IKcos(j2);
IkReal x5051=IKsin(j2);
IkReal x5052=((0.08)*cj5);
IkReal x5053=((1.0)*sj4);
IkReal x5054=(cj5*r00);
IkReal x5055=(r10*sj0);
IkReal x5056=(cj5*r20);
IkReal x5057=((1.0)*sj0);
IkReal x5058=(r21*sj5);
IkReal x5059=((1.0)*cj4);
IkReal x5060=(cj1*x5050);
IkReal x5061=(cj1*x5051);
IkReal x5062=(sj1*x5050);
IkReal x5063=(r11*sj0*sj5);
IkReal x5064=(cj0*x5059);
IkReal x5065=(sj1*x5051);
IkReal x5066=(cj0*r01*sj5);
IkReal x5067=((1.0)*x5065);
evalcond[0]=(((cj4*r22))+((sj4*x5058))+(((-1.0)*x5053*x5056))+x5061+x5062);
evalcond[1]=((((-1.0)*x5067))+((r22*sj4))+((cj4*x5056))+x5060+(((-1.0)*x5058*x5059)));
evalcond[2]=(((r20*x5052))+(((-0.444)*cj1))+(((-0.08)*x5058))+pz+(((0.47)*x5062))+(((0.47)*x5061))+(((0.11)*x5065))+(((-0.11)*x5060)));
evalcond[3]=((((-1.0)*x5067))+((cj0*sj4*x5054))+(((-1.0)*r02*x5064))+(((-1.0)*x5053*x5063))+(((-1.0)*x5053*x5066))+x5060+(((-1.0)*cj4*r12*x5057))+((cj5*sj4*x5055)));
evalcond[4]=((((-1.0)*cj0*r02*x5053))+(((-1.0)*x5054*x5064))+(((-1.0)*cj5*x5055*x5059))+(((-1.0)*r12*sj0*x5053))+(((-1.0)*x5062))+(((-1.0)*x5061))+((cj4*x5066))+((cj4*x5063)));
evalcond[5]=((((0.08)*x5063))+(((0.08)*x5066))+(((-1.0)*cj0*r00*x5052))+(((-1.0)*x5052*x5055))+(((0.47)*x5060))+(((-0.47)*x5065))+(((0.11)*x5062))+(((0.11)*x5061))+(((-1.0)*py*x5057))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5068=(r21*sj5);
IkReal x5069=(cj1*sj4);
IkReal x5070=(cj5*r20);
IkReal x5071=(sj1*sj4);
IkReal x5072=(cj4*sj1);
IkReal x5073=((1.0)*cj1*cj4);
IkReal x5074=((1.0)*r22*sj1);
if( IKabs((((x5068*x5072))+(((-1.0)*x5068*x5069))+(((-1.0)*x5070*x5072))+(((-1.0)*r22*x5071))+(((-1.0)*r22*x5073))+((x5069*x5070)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x5072))+((cj1*cj4*x5070))+((x5070*x5071))+((r22*x5069))+(((-1.0)*x5068*x5073))+(((-1.0)*x5068*x5071)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x5068*x5072))+(((-1.0)*x5068*x5069))+(((-1.0)*x5070*x5072))+(((-1.0)*r22*x5071))+(((-1.0)*r22*x5073))+((x5069*x5070))))+IKsqr(((((-1.0)*r22*x5072))+((cj1*cj4*x5070))+((x5070*x5071))+((r22*x5069))+(((-1.0)*x5068*x5073))+(((-1.0)*x5068*x5071))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x5068*x5072))+(((-1.0)*x5068*x5069))+(((-1.0)*x5070*x5072))+(((-1.0)*r22*x5071))+(((-1.0)*r22*x5073))+((x5069*x5070))), ((((-1.0)*r22*x5072))+((cj1*cj4*x5070))+((x5070*x5071))+((r22*x5069))+(((-1.0)*x5068*x5073))+(((-1.0)*x5068*x5071))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5075=IKsin(j2);
IkReal x5076=IKcos(j2);
IkReal x5077=((0.08)*cj5);
IkReal x5078=((1.0)*sj4);
IkReal x5079=(cj5*r00);
IkReal x5080=(r10*sj0);
IkReal x5081=(cj5*r20);
IkReal x5082=((1.0)*sj0);
IkReal x5083=(r21*sj5);
IkReal x5084=((1.0)*cj4);
IkReal x5085=(sj1*x5076);
IkReal x5086=(cj1*x5075);
IkReal x5087=(cj1*x5076);
IkReal x5088=(r11*sj0*sj5);
IkReal x5089=(sj1*x5075);
IkReal x5090=(cj0*x5084);
IkReal x5091=(cj0*r01*sj5);
IkReal x5092=(x5086+x5085);
evalcond[0]=(((sj4*x5083))+((cj4*r22))+x5092+(((-1.0)*x5078*x5081)));
evalcond[1]=((((-1.0)*x5087))+((r22*sj4))+((cj4*x5081))+(((-1.0)*x5083*x5084))+x5089);
evalcond[2]=((((-0.444)*cj1))+((r20*x5077))+(((0.47)*x5085))+(((0.47)*x5086))+(((0.11)*x5089))+(((-0.11)*x5087))+pz+(((-0.08)*x5083)));
evalcond[3]=((((-1.0)*r12*sj0*x5078))+(((-1.0)*cj0*r02*x5078))+((cj4*x5088))+((cj4*x5091))+x5092+(((-1.0)*x5079*x5090))+(((-1.0)*cj5*x5080*x5084)));
evalcond[4]=((((-1.0)*cj4*r12*x5082))+(((-1.0)*x5089))+(((-1.0)*x5078*x5091))+x5087+(((-1.0)*x5078*x5088))+(((-1.0)*r02*x5090))+((cj5*sj4*x5080))+((cj0*sj4*x5079)));
evalcond[5]=((((-1.0)*cj0*r00*x5077))+(((-0.47)*x5089))+(((0.47)*x5087))+(((-1.0)*x5077*x5080))+(((0.11)*x5085))+(((0.11)*x5086))+(((0.08)*x5088))+(((0.08)*x5091))+(((-1.0)*py*x5082))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5093=(cj1*cj4);
IkReal x5094=(r21*sj5);
IkReal x5095=((1.0)*cj3);
IkReal x5096=(sj1*sj4);
IkReal x5097=(cj4*sj1);
IkReal x5098=(cj1*sj4);
IkReal x5099=(cj5*r20);
IkReal x5100=(cj3*x5099);
CheckValue<IkReal> x5101 = IKatan2WithCheck(IkReal(((((-1.0)*x5094*x5097))+((x5098*x5100))+((r22*x5096))+(((-1.0)*x5094*x5095*x5098))+(((-1.0)*r22*x5093*x5095))+((x5097*x5099)))),IkReal(((((-1.0)*x5093*x5099))+((x5093*x5094))+((x5096*x5100))+(((-1.0)*x5094*x5095*x5096))+(((-1.0)*r22*x5098))+(((-1.0)*r22*x5095*x5097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5101.valid){
continue;
}
CheckValue<IkReal> x5102=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5102.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5101.value)+(((1.5707963267949)*(x5102.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5103=IKcos(j2);
IkReal x5104=IKsin(j2);
IkReal x5105=((1.0)*cj4);
IkReal x5106=(cj0*r02);
IkReal x5107=((0.08)*cj5);
IkReal x5108=(r10*sj0);
IkReal x5109=((1.0)*sj5);
IkReal x5110=((1.0)*cj3);
IkReal x5111=(sj0*sj4);
IkReal x5112=(cj0*r01);
IkReal x5113=((0.08)*sj5);
IkReal x5114=((1.0)*cj5);
IkReal x5115=(cj0*r00);
IkReal x5116=(r11*sj0);
IkReal x5117=(r21*sj5);
IkReal x5118=(cj4*sj5);
IkReal x5119=(cj1*x5103);
IkReal x5120=(sj1*x5104);
IkReal x5121=(cj1*x5104);
IkReal x5122=(sj1*x5103);
IkReal x5123=(cj5*x5115);
evalcond[0]=(((cj5*r21))+(((-1.0)*sj3*x5119))+((sj3*x5120))+((r20*sj5)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r20*sj4*x5114))+x5121+x5122+((sj4*x5117)));
evalcond[2]=(((r22*sj4))+((cj3*x5119))+((cj4*cj5*r20))+(((-1.0)*x5110*x5120))+(((-1.0)*x5105*x5117)));
evalcond[3]=((((-1.0)*x5112*x5114))+(((-1.0)*x5114*x5116))+((sj3*x5122))+((sj3*x5121))+(((-1.0)*x5109*x5115))+(((-1.0)*x5108*x5109)));
evalcond[4]=(((r20*x5107))+(((-0.444)*cj1))+(((0.47)*x5122))+(((0.47)*x5121))+(((-0.11)*x5119))+pz+(((0.11)*x5120))+(((-1.0)*r21*x5113)));
evalcond[5]=((((-1.0)*r12*sj0*x5105))+((cj5*sj4*x5108))+(((-1.0)*sj4*x5109*x5112))+x5119+(((-1.0)*r11*x5109*x5111))+(((-1.0)*x5120))+(((-1.0)*x5105*x5106))+((sj4*x5123)));
evalcond[6]=(((x5112*x5118))+((x5116*x5118))+(((-1.0)*r12*x5111))+(((-1.0)*x5105*x5123))+(((-1.0)*x5110*x5122))+(((-1.0)*x5110*x5121))+(((-1.0)*cj5*x5105*x5108))+(((-1.0)*sj4*x5106)));
evalcond[7]=(((x5112*x5113))+(((0.47)*x5119))+((x5113*x5116))+(((-0.47)*x5120))+(((-1.0)*x5107*x5108))+(((-1.0)*x5107*x5115))+(((-1.0)*py*sj0))+(((0.11)*x5122))+(((0.11)*x5121))+(((0.444)*sj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5124=((1.0)*sj1);
IkReal x5125=(r20*sj5);
IkReal x5126=(cj5*r21);
IkReal x5127=(r21*sj5);
IkReal x5128=(cj5*r20);
IkReal x5129=(sj3*sj4);
IkReal x5130=(cj1*x5129);
IkReal x5131=(cj4*r22*sj3);
CheckValue<IkReal> x5132=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5132.valid){
continue;
}
CheckValue<IkReal> x5133 = IKatan2WithCheck(IkReal(((((-1.0)*x5124*x5125))+(((-1.0)*x5124*x5126))+(((-1.0)*cj1*x5131))+(((-1.0)*x5127*x5130))+((x5128*x5130)))),IkReal(((((-1.0)*x5124*x5127*x5129))+(((-1.0)*x5124*x5131))+((sj1*x5128*x5129))+((cj1*x5125))+((cj1*x5126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5133.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5132.value)))+(x5133.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5134=IKcos(j2);
IkReal x5135=IKsin(j2);
IkReal x5136=((1.0)*cj4);
IkReal x5137=(cj0*r02);
IkReal x5138=((0.08)*cj5);
IkReal x5139=(r10*sj0);
IkReal x5140=((1.0)*sj5);
IkReal x5141=((1.0)*cj3);
IkReal x5142=(sj0*sj4);
IkReal x5143=(cj0*r01);
IkReal x5144=((0.08)*sj5);
IkReal x5145=((1.0)*cj5);
IkReal x5146=(cj0*r00);
IkReal x5147=(r11*sj0);
IkReal x5148=(r21*sj5);
IkReal x5149=(cj4*sj5);
IkReal x5150=(cj1*x5134);
IkReal x5151=(sj1*x5135);
IkReal x5152=(cj1*x5135);
IkReal x5153=(sj1*x5134);
IkReal x5154=(cj5*x5146);
evalcond[0]=(((cj5*r21))+(((-1.0)*sj3*x5150))+((sj3*x5151))+((r20*sj5)));
evalcond[1]=(((cj4*r22))+x5153+x5152+((sj4*x5148))+(((-1.0)*r20*sj4*x5145)));
evalcond[2]=((((-1.0)*x5136*x5148))+(((-1.0)*x5141*x5151))+((r22*sj4))+((cj4*cj5*r20))+((cj3*x5150)));
evalcond[3]=((((-1.0)*x5140*x5146))+(((-1.0)*x5143*x5145))+(((-1.0)*x5139*x5140))+((sj3*x5152))+((sj3*x5153))+(((-1.0)*x5145*x5147)));
evalcond[4]=((((-1.0)*r21*x5144))+(((-0.444)*cj1))+(((0.11)*x5151))+(((0.47)*x5153))+(((0.47)*x5152))+((r20*x5138))+pz+(((-0.11)*x5150)));
evalcond[5]=((((-1.0)*r12*sj0*x5136))+(((-1.0)*x5136*x5137))+x5150+((sj4*x5154))+(((-1.0)*sj4*x5140*x5143))+(((-1.0)*x5151))+(((-1.0)*r11*x5140*x5142))+((cj5*sj4*x5139)));
evalcond[6]=(((x5147*x5149))+(((-1.0)*x5141*x5152))+(((-1.0)*x5141*x5153))+((x5143*x5149))+(((-1.0)*sj4*x5137))+(((-1.0)*r12*x5142))+(((-1.0)*cj5*x5136*x5139))+(((-1.0)*x5136*x5154)));
evalcond[7]=(((x5144*x5147))+(((-0.47)*x5151))+((x5143*x5144))+(((0.11)*x5153))+(((0.11)*x5152))+(((0.47)*x5150))+(((-1.0)*x5138*x5139))+(((-1.0)*py*sj0))+(((0.444)*sj1))+(((-1.0)*cj0*px))+(((-1.0)*x5138*x5146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "4b6e9468983a12e2b60f778227ebe372"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
